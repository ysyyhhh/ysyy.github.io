<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>软件测试 | Ysyy's</title><link>https://ysyyhhh.github.io/docs/knowledge/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</link><atom:link href="https://ysyyhhh.github.io/docs/knowledge/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><description>软件测试</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><image><url>https://ysyyhhh.github.io/media/logo.svg</url><title>软件测试</title><link>https://ysyyhhh.github.io/docs/knowledge/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</link></image><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/</guid><description>&lt;h3 id="程序分析主要关注两大方面">程序分析主要关注两大方面：&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>程序优化&lt;/strong>侧重于提高程序的性能，通过对程序中关键函数的跟踪或者运行时信息的统计，找到系统性能的瓶颈，从而采取进一步行动对程序进行优化，同时减少资源使用。&lt;/li>
&lt;li>&lt;strong>程序正确性&lt;/strong>侧重于确保程序执行它应该做的事情，帮助开发者找出错误代码的位置。（本文以程序正确性的分析为主）&lt;/li>
&lt;/ul>
&lt;h3 id="程序分析方法">程序分析方法：&lt;/h3>
&lt;p>第一类是&lt;strong>静态程序分析&lt;/strong>，即在不执行程序的情况下进行程序分析。&lt;/p>
&lt;p>第二类是&lt;strong>动态程序分析&lt;/strong>，即通过运行程序或者在程序运行期间进行分析。&lt;/p>
&lt;p>&lt;a href="https://wiki.mbalib.com/wiki/%e5%8a%a8%e6%80%81%e5%88%86%e6%9e%90" target="_blank" rel="noopener">动态分析方法包括：调试、覆盖测试、剖面测试、动态切片、动态污点分析等&lt;/a>&lt;a href="https://wiki.mbalib.com/wiki/%e5%8a%a8%e6%80%81%e5%88%86%e6%9e%90" target="_blank" rel="noopener">1&lt;/a>。&lt;/p>
&lt;p>当然，也有很多研究工作是关于&lt;strong>如何有效结合静态和动态程序分析&lt;/strong>的。同时，因为通常无法拿到真正的程序正确性的需求，绝大多数的程序分析技术着重于分析&lt;strong>通用的程序正确性需求&lt;/strong>，比如如果有断言的话，我们尽量分析断言会不会被违背，再比如分析是否存在整数或者缓存溢出，再或者检测指针相关的安全漏洞等。&lt;/p>
&lt;p>&lt;strong>符号执行&lt;/strong>（通过用求解每条程序路上上的条件来生成测试用例）&lt;/p>
&lt;p>&lt;strong>模型检测&lt;/strong>（通过抽象并遍历所有的程序行为来判断程序是不是正确）&lt;/p>
&lt;p>&lt;strong>模糊测试&lt;/strong>（通过优化大量的生成测试用例）&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/396531255" target="_blank" rel="noopener">模型检查、符号执行、抽象解释等&lt;/a>&lt;a href="https://zhuanlan.zhihu.com/p/396531255" target="_blank" rel="noopener">1&lt;/a>。&lt;/p>
&lt;p>对基于静态分析（比如抽象解释，或者 lint）的工具，一个重要的问题就是&lt;strong>如何减少假警报&lt;/strong>的。&lt;/p>
&lt;p>而对于动态分析（比如测试）而言，对应的问题就是&lt;strong>如何减少漏报&lt;/strong>。&lt;/p>
&lt;p>除了把静态分析做的更精确（比如设计更复杂的 lint 规则），和把动态分析做的更完备（比如提要求更高的覆盖率标准）&lt;/p>
&lt;p>还有一个趋势，就是&lt;strong>结合不同的程序分析技术取长补短&lt;/strong>。比如 hybrid fuzzing 的做法是，通过有效的结合符号执行与模糊测试来提高测试的覆盖率。&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/396531255" target="_blank" rel="noopener">插桩、覆盖率、动态切片、动态污点分析等。&lt;/a>&lt;a href="https://zhuanlan.zhihu.com/p/396531255" target="_blank" rel="noopener">1&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/396531255" target="_blank" rel="noopener">技术分享 | 浅谈程序分析&lt;/a>&lt;/p></description></item></channel></rss>