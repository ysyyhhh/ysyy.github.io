<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法 | Ysyy's</title><link>https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/</link><atom:link href="https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><description>算法</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><image><url>https://ysyyhhh.github.io/media/logo.svg</url><title>算法</title><link>https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/</link></image><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/acmer%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/acmer%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</guid><description>&lt;h1 id="写在前面">写在前面&lt;/h1>
&lt;p>笔试上机题型基本是经典算法题，且难度最多leetcode hard。但面试的题目类型很多，如场景题、NP问题等没有最优解的问题。&lt;/p>
&lt;p>以下对求职面试算法题做整理，主要面向ACMer，是对比赛中不常见的算法题的补充。&lt;/p>
&lt;p>篇幅有限，仅给出简要思路，正解代码可选择该篇，或者自行搜索。背代码没用，经过思考后自己写一遍，面试时才能写出来。&lt;/p>
&lt;h1 id="经典算法题">经典算法题&lt;/h1>
&lt;h2 id="链表">链表&lt;/h2>
&lt;h3 id="链表翻转-空间o1-时间on">链表翻转 空间O(1) 时间O(n)&lt;/h3>
&lt;h3 id="归并排序链表on-时间onlogn">归并排序链表O(n) 时间O(nlogn)&lt;/h3>
&lt;h2 id="排序">排序&lt;/h2>
&lt;h3 id="手写快排">手写快排&lt;/h3>
&lt;h3 id="无序数组中找第k大数httpsleetcodecnproblemskth-largest-element-in-an-array--on">&lt;a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener">无序数组中找第k大数&lt;/a> O(n)&lt;/h3>
&lt;p>补充: 第K大数,而不是第K个不同的数.&lt;/p>
&lt;p>和求排序后的第k个数本质一致,转换一下即可.&lt;/p>
&lt;h4 id="思路">思路&lt;/h4>
&lt;p>回忆一下二分法和快排:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>二分法形成一棵二叉树. 每层所有序列长度总和为n, 二叉树高度为h, 时间复杂度为 O(n*h)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最优的情况: 每个结点的左儿子和右儿子序列长度相等. h = logn, 时间复杂度为O(n*logn)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因此快排最优是O(n*logn)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="如何优化到on">如何优化到O(n)&lt;/h4>
&lt;p>显然, 对于求排序后第k个数. 在二分时,每次可以只选择一个儿子继续搜索.&lt;/p>
&lt;p>即在最优情况下,每次二分结果为 l,mid,r&lt;/p>
&lt;ul>
&lt;li>mid == k ,答案就是a[mid]&lt;/li>
&lt;li>mid &amp;gt; k, 只需要继续在 (l,mid-1)中搜&lt;/li>
&lt;li>mid &amp;lt; k, 只需要继续在 (mid+1,r)中搜&lt;/li>
&lt;/ul>
&lt;p>因此与快排形成的二叉树不同. 该方法每层的搜索总长度是递减的.&lt;/p>
&lt;p>即 n + n/2 + n/4 + n/8 + &amp;hellip;&lt;/p>
&lt;p>易得上述公式的近似为 2*n, 时间复杂度O(n)&lt;/p>
&lt;h2 id="串">串&lt;/h2>
&lt;h3 id="字符串全排列httpsleetcodecnproblemszi-fu-chuan-de-pai-lie-lcof">&lt;a href="https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof/" target="_blank" rel="noopener">字符串全排列&lt;/a>&lt;/h3>
&lt;h3 id="最长回文子串---on">最长回文子串&amp;ndash; O(n)&lt;/h3>
&lt;p>思路:&lt;a href="https://blog.csdn.net/qq_51116518/article/details/117370554" target="_blank" rel="noopener">马拉车算法&lt;/a>&lt;/p>
&lt;h4 id="证明on">证明O(n):&lt;/h4>
&lt;p>即证while内的p[i]++ 执行次数总和为O(n)级别&lt;/p>
&lt;p>首先考虑什么情况下才需要进入while循环&lt;/p>
&lt;ul>
&lt;li>i &amp;lt; mx, 且 i 为 id 所在回文串的右四等分点之后.
&lt;ul>
&lt;li>此时p[i]是以mx-i 开始增加, 即i + p[i] &amp;gt;= mx&lt;/li>
&lt;li>也就是while内的操作每执行一次 mx++&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>i &amp;gt; mx, 无法使用之前的预处理.
&lt;ul>
&lt;li>while内的操作没执行一次 mx++&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>可知while的操作次数等于 mx从0加到n-1的次数, 因此while内操作次数的总和为n&lt;/p>
&lt;p>总时间复杂度 O(n)&lt;/p>
&lt;h2 id="动态规划非背包">动态规划(非背包)&lt;/h2>
&lt;h3 id="最长公共连续子序列-onm">最长公共连续子序列 O(nm)&lt;/h3>
&lt;h3 id="最长上升子序列-onlogn">最长上升子序列 O(nlogn)&lt;/h3>
&lt;p>思路:动态规划+二分&lt;/p>
&lt;h2 id="背包类">背包类&lt;/h2>
&lt;p>货币面值组成&lt;/p>
&lt;h3 id="砝码称重httpswwwacwingcomproblemcontentdescription3420-on--s">&lt;a href="https://www.acwing.com/problem/content/description/3420/" target="_blank" rel="noopener">砝码称重&lt;/a> O(n * s)&lt;/h3>
&lt;p>题意：有天平和 N 个砝码重量是 Wi。可以称出多少种不同的重量？砝码可以放在天平两边。&lt;/p>
&lt;p>N&amp;lt;100 ,Σwi &amp;lt; 1e5&lt;/p>
&lt;p>思路：&lt;/p>
&lt;p>01背包， 称重为i的可以从 abs(i-w) ， i+w 中转移。 不过要注意开个滚动数组防止重复放砝码。&lt;/p>
&lt;h2 id="数学题">数学题&lt;/h2>
&lt;h4 id="小凯的疑惑">小凯的疑惑&lt;/h4>
&lt;h1 id="思维题">思维题&lt;/h1>
&lt;h4 id="小球称重问题">小球称重问题&lt;/h4>
&lt;h1 id="np问题">NP问题&lt;/h1>
&lt;h2 id="集合覆盖问题">集合覆盖问题&lt;/h2>
&lt;h1 id="杂项">杂项&lt;/h1>
&lt;h3 id="随机加权采样算法-aliashttpsleetcodecnproblemsrandom-pick-with-weight">&lt;a href="https://leetcode.cn/problems/random-pick-with-weight/" target="_blank" rel="noopener">随机加权采样算法 alias&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://www.cnblogs.com/Lee-yl/p/12749070.html" target="_blank" rel="noopener">https://www.cnblogs.com/Lee-yl/p/12749070.html&lt;/a>&lt;/p>
&lt;h1 id="杂谈后话">杂谈后话&lt;/h1>
&lt;p>写一点求职的经验和所见所闻吧！&lt;strong>不保证时效性和真实性，参考与否自行斟酌&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>面评记录对求职的影响&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>针对人群：想&lt;strong>刷面试经验&lt;/strong>，而&lt;strong>不是真正急着找工作的&lt;/strong>。&lt;/li>
&lt;li>请&lt;strong>珍惜每次面试机会&lt;/strong>，尤其是面试喜欢的公司时。&lt;/li>
&lt;li>面试一般都会有记录和面试评价。&lt;/li>
&lt;li>所见所闻：大佬A大二时投递了理想公司的实习，意图刷该公司的面试经验。结果表现不佳，导致在真正需要找实习的时候，因之前的面评太差，导致没过简历/排序靠后（记不太清了）&lt;/li>
&lt;/ul></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</guid><description>&lt;p>1.已知平面上的一个圆和若干点 快速求出包含点数最少的多边形使得圆在多边形中&lt;/p>
&lt;p>预处理：圆内的点删去&lt;/p>
&lt;p>点排序，按照射线的角度排序。O(nlogn)&lt;/p>
&lt;p>如黑色的三个点要排序，就是按与圆相切的射线的角度排序。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="%e7%ac%94%e8%af%95%e7%ae%97%e6%b3%95%e9%a2%98/img/image-20230414155250711.png" alt="image-20230414155250711" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>把每一个点当作起点贪心。&lt;/p>
&lt;p>每次贪心：&lt;/p>
&lt;p>​ 从一个S出发，选择一个点T ，点T角度最大，且满足ST与圆不相交 且 圆心在ST射线的右侧。（即顺时针）然后再以T点出发，选择下一个点，直到遍历过的角度大于360度。每次选择 logn，最多选择n次，因此每次贪心是nlogn。&lt;/p>
&lt;p>做n次贪心，总时间复杂度是n^2logn&lt;/p>
&lt;p>给出一无序数组 求所有长度大于等于k的连续子序列的中位数的最大值 定义中位数为第&lt;a href="%e5%90%91%e4%b8%8a%e5%8f%96%e6%95%b4">l/2&lt;/a>(l为数组长度)个数&lt;/p>
&lt;p>二分答案，从小到大排序后二分，选择X为中位数。判断是否有大于等于X的中位数满足条件。&lt;/p>
&lt;p>预处理数组为 -1 ， 0 ， 1（小于X，等于X，大于X），On跑一遍找是否有长度大于K的和大于等于0。 求前缀和并维护最小前缀和即可。&lt;/p></description></item></channel></rss>