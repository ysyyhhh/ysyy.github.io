<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>面向对象 | Ysyy's</title><link>https://ysyyhhh.github.io/docs/knowledge/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link><atom:link href="https://ysyyhhh.github.io/docs/knowledge/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/index.xml" rel="self" type="application/rss+xml"/><description>面向对象</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><image><url>https://ysyyhhh.github.io/media/logo.svg</url><title>面向对象</title><link>https://ysyyhhh.github.io/docs/knowledge/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link></image><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h1 id="设计模式">设计模式&lt;/h1>
&lt;p>不到十五种，只考学了的&lt;/p>
&lt;p>分类:&lt;/p>
&lt;p>题型：
分析，设计，问答题&lt;/p>
&lt;p>要画类图, 多种模式组合&lt;/p>
&lt;p>接口的变化还是功能的变化, 功能的选择还是删减, 目的是创建还是复用对象&lt;/p>
&lt;p>只关注 设计原则 设计思想 和 设计模式本身&lt;/p>
&lt;h2 id="2策略模式">2.策略模式&lt;/h2>
&lt;p>策略类的层次结构定义了一系列算法或行为，以供上下文重用。
修改策略不符合开闭原则，增加策略符合开闭原则。
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-13-19-58.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>与简单工厂模式的区别&lt;/p>
&lt;p>用途不一样
工厂是创建型模式,它的作用就是创建对象；
策略是行为型模式,它的作用是让一个对象在许多行为中选择一种行为;
关注点不一样
一个关注对象创建
一个关注行为的封装&lt;/p>
&lt;p>解决不同的问题
工厂模式是创建型的设计模式，它接受指令，创建出符合要求的实例；它主要解决的是资源的统一分发，将对象的创建完全独立出来，让对象的创建和具体的使用客户无关。主要应用在多数据库选择，类库文件加载等。
策略模式是为了解决的是策略的切换与扩展，更简洁的说是定义策略族，分别封装起来，让他们之间可以相互替换，策略模式让策略的变化独立于使用策略的客户。&lt;/p>
&lt;p>工厂相当于黑盒子，策略相当于白盒子；&lt;/p>
&lt;h2 id="3状态模式">3.状态模式&lt;/h2>
&lt;p>⼀个对象的⾏为取决于⼀个或多个动态变化的属性，这种属性叫做状态，这样的对象叫做有状态的对象
定义：允许⼀个对象在其内部状态改变时改变它的⾏为，对象看起来似乎修改了它的类
包含的⻆⾊：环境类、抽象状态类、具体状态类
环境类：拥有状态的对象，充当状态管理器 State Manager ，在环境类中切换状态&lt;/p>
&lt;p>抽象状态类：可以是抽象类或接⼝；将不同对象下的⾏为单独抽取出来封装到具体状态类中，使得
环境类在修改内部状态时改变其⾏为
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-19-37-35.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>描述了对象状态的变化以及对象如何在每⼀种状态下表现出不同的⾏为
和策略模式的区别：策略模式是为了让⽤户透明地选择⼀个策略，从外部看，不同策略的⾏为是⼀致的；⽽状态模式是为了改变状态来改变⾏为，从外部看，不同状态的⾏为是不同的&lt;/p>
&lt;p>优点：封装了转换规则；枚举可能的状态；⽅便添加新的状态；状态转换逻辑与状态对象合成⼀体；让多个环境对象共享⼀个状态对象&lt;/p>
&lt;p>缺点：增加系统类和对象的个数；如果使⽤不当将导致程序结构和代码的混乱；对开闭原则的⽀持并不太好&lt;/p>
&lt;p>适⽤环境：⾏为依赖于它的状态（属性），可以根据他的状态改变⽽改变它的相关⾏为；代码包含⼤量与对象状态有关的条件语句&lt;/p>
&lt;p>模式扩展：共享状态；简单状态模式，不需要转换状态的模式，不关⼼状态切换，遵循开闭原则；&lt;/p>
&lt;p>可切换状态的状态模式，可以切换状态，添加新的状态类可能需要修改其他某些状态类甚⾄环境类的源代码&lt;/p>
&lt;h2 id="观察者模式">观察者模式&lt;/h2>
&lt;p>定义：定义了对象之间的⼀对多依赖，让多个观察者对象同时监听某⼀主题对象，当主题对象发⽣变化时，它的所有依赖者（观察者）都会收到通知并更新⾃⼰的状态&lt;/p>
&lt;p>Observer Pattern，⼜叫发布-订阅 Publish/Subscribe 模式、模型-视图 Model/View 模式、源-监听器 Source/Listener 模式、从属者 Dependents 模式&lt;/p>
&lt;p>定义：对象间的⼀种⼀对多依赖关系，使得每当⼀个对象状态发⽣改变时，其相关依赖对象皆得到通知并被⾃动更新
包含的角色：目标、具体目标、观察者、具体观察者&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-20-21-53.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>优点：实现表示层和数据逻辑层的分离；贯彻⽬标和观察者之间建⽴⼀个抽象的耦合；⽀持⼴播通信；符合开闭原则&lt;/p>
&lt;p>缺点：通知所有观察者会花费很多时间；如果观察者和观察⽬标之间有循环依赖，可能导致系统崩溃；没有相应的机制让观察者知道所观察的⽬标对象是怎么发⽣变化的，仅仅只是知道观察目标发⽣了变化&lt;/p>
&lt;p>适⽤环境：⼀个⽅⾯依赖于另⼀个⽅⾯，将这些⽅⾯封装在独⽴的对象中使它们可以各⾃独⽴地改变和复⽤；⼀个对象的改变将导致其他⼀个或多个对象也发⽣改变，⽽不知道具体有多少对象将发⽣改变；⼀个对象必须通知其他对象，⽽并不知道这些对象是谁；需要在系统中创建⼀个触发链，A-&amp;gt;B, B-&amp;gt;C ……，可以⽤观察者模式创建⼀种链式触发机制&lt;/p>
&lt;p>模式扩展：Java 中的 Observable 和 Observer 类；MVC 模式&lt;/p>
&lt;h2 id="单例模式">单例模式&lt;/h2>
&lt;p>饿汉式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Singleton&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">Singleton&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getUniqueInstance&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>懒汉式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">synchronized&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getUniqueInstance&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>双校验锁&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Singleton&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">volatile&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">Singleton&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getUniqueInstance&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">synchronized&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uniqueInstance&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="装饰器模式">装饰器模式&lt;/h2>
&lt;p>⽤继承机制或关联机制可以给⼀个类或对象增加⾏为；以对客户透明的⽅式动态地给⼀个对象附加
更多的职责，并且不需要创造更多⼦类
定义：动态地给⼀个对象增加⼀些额外的职责，别名也叫包装器 Wrapper ，也称为油漆⼯模式
包含的⻆⾊：抽象构件、具体构件、抽象装饰类、具体装饰类&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-20-28-11.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>与继承相⽐，装饰不会破坏类的封装性，⽽且继承是耦合度较⼤的静态关系，⽆法动态扩展
关联关系具有较好的松耦合性，系统更加容易维护，缺点是要创建更多的对象
以对⽤户透明的⽅式，动态地给⼀个对象附加更多的责任
优点：提供⽐继承更多的灵活性；通过⼀种动态的⽅法来扩展⼀个对象的功能；通过使⽤不同的具
体装饰类以及这些装饰类的排列组合，可以创造出很多不同⾏为的组合；具体构件类与具体装饰类
可以独⽴变化，符合开闭原则
缺点：产⽣很多⼩对象；⽐继承更容易出错，排错也很困难，多层装饰的对象调试时需要逐级排查
适⽤环境：以动态、透明的⽅式给单个对象添加职责；动态地给⼀个对象增加和撤销功能；当不能
采⽤继承的⽅式对系统进⾏扩充或者采⽤继承不利于系统扩展和维护时，如扩展很多、需要⼤量⼦
类，或者类是 ﬁnal 不能继承
模式应⽤：给 JList 装饰⼀个滚动条 JScrollPane ；Java ⾥的各种 **InputStream
模式简化时需要注意的问题：⼀个装饰类的接⼝与被装饰类的接⼝保持相同；不要把太多的逻辑和
状态放到具体构件中&lt;/p>
&lt;p>模式简化：如果只有⼀个具体构件类⽽没有抽象构件类，那么抽象装饰类可以作为具体构件类的直
接⼦类&lt;/p>
&lt;h2 id="工厂方法模式">工厂方法模式&lt;/h2>
&lt;p>⼯⼚⽅法模式
Factory Method Pattern，⼜称为虚拟构造器模式 Virtual Constructor Pattern 或者多态⼯⼚模式
Polymorphic Factory Pattern
“延迟实例化”：⼯⼚⽗类负责定义创建产品对象的公共接⼝，⽽⼯⼚⼦类则负责⽣成具体的产品对象；核⼼的⼯⼚类不再负责所有产品的创建，⽽是将具体创建⼯作交给⼦类去做允许系统在不修改⼯⼚⻆⾊的情况下引进新产品，符合开闭原则&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-20-43-31.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>可以退化成简单⼯⼚模式&lt;/p>
&lt;p>优点：⽤户只关⼼所需产品对应的⼯⼚，⽆须关⼼创建细节甚⾄⽆须知道具体产品类的类名；可以⾃主确定创建何种产品对象，⽽如何创建这个对象的细节则完全封装在具体⼯⼚内部；在系统中加⼊新产品时，⽆须修改抽象⼯⼚和抽象产品提供的接⼝，⽆须修改客户端，也⽆须修改其他的具体⼯⼚和具体产品，⽽只要添加⼀个具体⼯⼚和具体产品就可以&lt;/p>
&lt;p>缺点：需要编写新的具体产品类，还要提供与之对应的具体⼯⼚类，系统中类的个数将成对增加，增加了系统复杂度；增加了系统的抽象性、理解难度、实现难度&lt;/p>
&lt;p>适⽤环境：⼀个类不知道它所需要的对象的类；⼀个类通过其⼦类来指定创建哪个对象；将创建对象的任务委托给多个⼯⼚⼦类中的某⼀个，客户端在使⽤时可以⽆须关⼼时哪个⼯⼚⼦类创建产品⼦类，需要时再动态指定&lt;/p>
&lt;h2 id="抽象模式">抽象⼯⼚模式&lt;/h2>
&lt;p>Abstract Factory Pattern
产品等级结构：抽象电视机与海尔电视机、海信电视机构成产品等级结构
产品族：由同⼀个⼯⼚⽣产的、位于不同产品等级结构中的⼀组产品，如海尔电视机、海尔电冰箱&lt;/p>
&lt;p>⼯⼚⽅法模式⾯对同⼀个产品等级结构，抽象⼯⼚模式⾯对多个产品等级结构提供⼀个创建⼀系列相关或相互依赖对象的接⼝，⽽⽆须指定它们具体的类&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-20-43-48.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>包含的⻆⾊：抽象⼯⼚、具体⼯⼚、抽象产品、具体产品
优点：隔离了具体类的⽣成；只需改变具体⼯⼚的实例，就可以改变软件系统的⾏为；实现⾼内聚低耦合的设计⽬的；保证客户端始终只使⽤同⼀个产品族中的对象；增加新的具体⼯⼚和产品族很⽅便，⽆须修改已有系统，符合开闭原则&lt;/p>
&lt;p>缺点：难以扩展抽象⼯⼚来⽣产新种类的产品（涉及到对抽象⼯⼚和所有⼦类的修改）（开闭原则的倾斜性）&lt;/p>
&lt;p>适⽤环境：不应当依赖于产品类实例如何被创建、组合和表达的细节；有多于⼀个产品族；属于同⼀个产品族的产品将在⼀起使⽤；所有的产品以同样的接⼝出现，客户端不依赖具体实现&lt;/p>
&lt;p>⼯⼚模式的退化&lt;/p>
&lt;ul>
&lt;li>抽象⼯⼚➡ ⼯⼚⽅法：只存在⼀个产品等级结构&lt;/li>
&lt;li>⼯⼚⽅法➡ 简单⼯⼚：⼯⼚⽅法模式中抽象⼯⼚与具体⼯⼚合并，提供统⼀的⼯⼚来创建产品对象，并将创建对象的⼯⼚⽅法设计为静态⽅法&lt;/li>
&lt;/ul>
&lt;h2 id="适配器模式">适配器模式&lt;/h2>
&lt;p>将现有的接⼝转化为客户端期望的接⼝
定义：将⼀个接⼝转换成客户希望的另⼀个接⼝，使接⼝不兼容的那些类可以⼀起⼯作
也叫做包装器 Wrapper&lt;/p>
&lt;p>包含的⻆⾊：⽬标抽象类、适配器类（⽤来适配的类）、适配者类（被适配的类）、客户类
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-20-49-41.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
优点：将⽬标类和适配者类解耦；增加了类的透明性和复⽤性；灵活性和扩展性都⾮常好&lt;/p>
&lt;p>对象适配器模式优点：可以把多个不同的适配者适配到同⼀个⽬标；同⼀个适配器可以把适配者类和它的⼦类都适配到⽬标接⼝&lt;/p>
&lt;p>对象适配器模式缺点：不容易置换适配者类的⽅法
类适配器模式优点：可以在适配器类中置换⼀些适配者的⽅法，灵活性更强
类适配器模式缺点：⼀次只能适配⼀个适配者类，⽬标抽象类只能为抽象类
适⽤环境：需要使⽤现有的类，但是类的接⼝不符合系统需要；想要建⽴⼀个可以重复使⽤的类，⽤于与⼀些彼此之间没有太⼤关联的⼀些类
模式应⽤：JDBC 中间件
模式扩展：默认适配器模式 Default Adapter Pattern（当不需要实现接⼝的全部⽅法时，可先设⼀个抽象类⽤空⽅法实现每个接⼝⽅法，那么抽象类的⼦类就可以有选择地覆盖⽗类的⽅法来实现需求，适⽤于⼀个接⼝不想使⽤其所有⽅法的情况，因此也称为单接⼝适配器模式）、双向适配器模式&lt;/p>
&lt;h2 id="外观模式">外观模式&lt;/h2>
&lt;p>定义：外部与⼀个⼦系统的通信必须通过⼀个统⼀的外观对象进⾏，为⼦系统中的⼀组接⼝提供⼀个⼀致的界⾯，外观模式定义了⼀个⾼层接⼝，使得这⼀⼦系统更加容易使⽤。⼜称为⻔⾯模式
包含的⻆⾊：外观⻆⾊、⼦系统⻆⾊&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-20-51-50.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>单⼀职责原则：在软件中将⼀个系统划分为若⼲个⼦系统有利于降低整个系统的复杂性；引⼊⼀个
外观对象，为⼦系统的访问提供了⼀个简单⽽单⼀的⼊⼝&lt;/p>
&lt;p>迪⽶特法则：通过引⼊⼀个新的外观类可以降低原有系统的复杂度，降低客户类与⼦系统类的耦合度&lt;/p>
&lt;p>客户端只需要与外观对象打交道，⽽不需要与⼦系统内部的很多对象打交道；降低系统复杂度；提⾼了客户端使⽤的便捷性&lt;/p>
&lt;p>模式应⽤：电源总开关（多个电器⼀起开启和关闭）&lt;/p>
&lt;p>优点：对客户屏蔽⼦系统组件，减少了客户处理的对象数⽬并使得⼦系统使⽤起来更加容易；实现了⼦系统与客户之间的松耦合关系；降低了⼤型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程；只是提供了⼀个访问⼦系统的统⼀⼊⼝，并不影响⽤户直接使⽤⼦系统类&lt;/p>
&lt;p>缺点：不能很好地限制客户使⽤⼦系统类；在不引⼊抽象外观类的情况下，增加新的⼦系统需要修改外观类或客户端的源代码，违背了开闭原则&lt;/p>
&lt;p>适⽤环境：当要为⼀个复杂⼦系统提供⼀个简单接⼝时可以使⽤外观模式；客户程序与多个⼦系统之间存在很⼤的依赖性；使⽤外观模式定义系统中每⼀层的⼊⼝，层与层之间不直接产⽣联系，⽽通过外观类建⽴联系，降低层之间的耦合度&lt;/p>
&lt;p>模式扩展：⼀般将外观类设计为单例类以节约系统资源，但在⼀个系统中可以设计多个外观类，每个外观类都负责和⼀些特定的⼦系统交互；不要试图通过外观类为⼦系统增加新⾏为；实现迪⽶特法则；引⼊抽象外观类，当增加新的⼦系统或者移除⼦系统时需要修改外观类，可以通过引⼊抽象外观类解决违背开闭原则的问题，客户端针对抽象外观类进⾏编程&lt;/p>
&lt;h2 id="模板方法模式">模板方法模式&lt;/h2>
&lt;p>定义：定义⼀个操作中算法的⻣架，⽽将⼀些步骤延迟到⼦类中，模板⽅法使得⼦类可以不改变⼀个算法的结构即可重定义该算法的某些特定步骤
基于继承，将相同代码放在⽗类中，以具体⽅法形式实现；声明⼀些抽象⽅法，让不同⼦类实现
包含的⻆⾊：抽象类、具体⼦类&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-21-04-26.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>实现具体逻辑步骤的⽅法称为基本⽅法 Primitive Method，定义在抽象类中将基本⽅法汇总起来的⽅法称为模板⽅法 Template Method&lt;/p>
&lt;p>钩⼦⽅法 Hook Method：挂钩⽅法和空⽅法（返回布尔值来确定是否在模板⽅法中执⾏）实现⼦类对⽗类⾏为的反向控制（模板中调⽤⼀个返回布尔值的基本⽅法，根据返回值来判断是否执⾏某些&lt;/p>
&lt;p>代码；不同的⼦类返回不同的布尔值，来控制⽗类）&lt;/p>
&lt;p>优点：在⼀个类中抽象地定义算法，⽽由它的⼦类实现细节的处理；代码复⽤的基本技术；反向的控制结构，符合开闭原则；符合单⼀职责原则，使类内聚&lt;/p>
&lt;p>缺点：类的个数增加&lt;/p>
&lt;p>适⽤环境：将可变的⾏为留给⼦类来实现；各⼦类中公共的⾏为应被提取出来并集中到⼀个公共⽗类中；对⼀些复杂的算法进⾏分割；控制⼦类的扩展&lt;/p>
&lt;p>关于继承：应恰当使⽤继承，将可复⽤的⼀般性⾏为代码移到⽗类中。虽然继承复⽤存在⼀些问题，但是在某些情况下能给开发带来⽅便，模板⽅法模式体现了继承的优势&lt;/p>
&lt;p>模式扩展：好莱坞原则（⼦类不显式调⽤⽗类的⽅法，⽽是通过覆盖⽗类的⽅法来实现某些具体业务逻辑，通过⽗类来调⽤⼦类）；钩⼦⽅法（可使⼦类控制⽗类。⽗类提供空⽅法或⼀个默认实现⽅法，由⼦类覆盖。⽗类调⽤返回布尔值的⼦类⽅法，以判断是否执⾏某些代码）&lt;/p>
&lt;h2 id="命令模式">命令模式&lt;/h2>
&lt;p>Command Pattern，别名动作 Action 模式或事务 Transaction 模式
动机：让命令的发送者和接收者完全解耦
定义：将⼀个请求封装为⼀个对象，从⽽使我们可⽤不同的请求对客户进⾏参数化；对请求排队或者记录请求⽇志，以及⽀持可撤销的操作&lt;/p>
&lt;p>包含的⻆⾊：抽象命令类、具体命令类、调⽤者、接收者、客户类&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-21-21-28.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>对命令进⾏封装，将发出命令的责任和执⾏命令的责任分隔开；请求⼀⽅发出操作请求，接受⼀⽅收到请求并执⾏；请求的⼀⽅不必知道接受请求的⼀⽅的接⼝&lt;/p>
&lt;p>使请求本身成为⼀个对象；引⼊了抽象命令接⼝，发送者针对抽象命令接⼝编程&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-21-22-01.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>优点：降低系统耦合度；新的命令可以很容易地加⼊到系统中；⽐较容易设计⼀个命令队列和宏命令（组合命令）；⽅便地实现对请求的 Undo 和 Redo
缺点：导致某些系统由过多的具体命令类
适⽤环境：需要将请求调⽤者和请求接收者解耦；需要在不同的时间指定请求、将请求排队和执⾏&lt;/p>
&lt;p>请求；需要⽀持命令的撤销和恢复操作；需要将⼀组操作组合在⼀起，即⽀持宏命令
模式扩展：撤销操作的实现&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-21-22-53.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>模式扩展：宏命令：⼜称为组合命令，是&lt;strong>命令模式和组合模式&lt;/strong>联⽤的产物；在调⽤宏命令的execute() ⽅法时，将递归调⽤它所包含的每个成员命令的 execute() ⽅法；宏命令的成员对象可以是简单命令，还可以继续是宏命令&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-21-23-25.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="迭代器模式">迭代器模式&lt;/h2>
&lt;p>Iterator Pattern，又叫游标 Cursor 模式&lt;/p>
&lt;p>定义：提供⼀种⽅法顺序访问⼀个聚合对象中各个元素，⽽又⽆须暴露该对象的内部表示&lt;/p>
&lt;p>包含的⻆⾊：抽象迭代器、具体迭代器、抽象聚合类、具体聚合类&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-21-24-01.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>优点：访问⼀个聚合对象的内容⽆需暴露它的内部表示；遍历任务交由迭代器完成，这简化了聚合类；它⽀持以不同的遍历⽅式遍历⼀个聚合，甚⾄可以同时遍历多个聚合对象；在同⼀个聚合上可以有多个遍历；在迭代器模式中，增加新的聚合类和迭代器类都很⽅便，无须修改原有代码；封装性良好，为遍历不同的聚合结构提供⼀个统⼀的接⼝&lt;/p>
&lt;p>缺点：增加了类的个数，这在⼀定程度上增加了系统的复杂性&lt;/p>
&lt;h2 id="代理模式">代理模式&lt;/h2>
&lt;p>Proxy Pattern 或 Surrogate Pattern
通过引⼊⼀个新的对象，来实现对真实对象的操作或者将新的对象作为真实对象的⼀个替身；通过引⼊代理对象来间接访问⼀个对象
客户和⽬标对象之间通过⼀个代理对象来实现间接引⽤，起到中介作⽤；通过代理对象去掉客户不能看到的内容和服务，或者添加客户需要的额外对象&lt;/p>
&lt;p>定义：给某⼀个对象提供⼀个代理，并由代理对象控制对原对象的引⽤
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-21-34-06.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>包含的对象：抽象主题⻆⾊、代理主题⻆⾊、真实主题⻆⾊
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-21-34-20.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>优点：协调调⽤者和被调⽤者，降低系统耦合度；远程代理使得客户端可以访问在远程机器上的对象；虚拟代理通过⼀个⼩对象来代表⼀个⼤对象，减少系统资源的消耗，对系统进⾏优化并提⾼运⾏速度；保护代理可以控制对真实对象的使⽤权限&lt;/p>
&lt;p>缺点：有些类型的代理模式可能会造成请求的处理速度变慢；实现代理模式需要额外的⼯作，有些⾮常复杂&lt;/p>
&lt;p>适⽤环境：远程 Remote 代理（⼜叫⼤使 Ambassador）、虚拟 Virtual 代理、Copy-On-Write 代理（真正需要⽤到对象的时候才克隆）、保护 Protect or Access 代理（控制权限）、缓冲 Cache 代理（为某个⽬标操作的结果提供临时存储空间，以便多个客户端可以共享这些结果）、防⽕墙 Firewall 代理、智能引⽤ Smart Reference 代理（当⼀个对象被引⽤时，提供⼀些额外的操作）&lt;/p>
&lt;p>模式应⽤：远程⽅法调⽤&lt;/p>
&lt;h2 id="组合模式">组合模式&lt;/h2>
&lt;p>Composite Pattern&lt;/p>
&lt;p>定义：组合多个对象形成树形结构以表示“整体-部分”的结构层次，对单个对象（即叶⼦对象）和组合对象（即容器对象）的使⽤具有⼀致性
⼜被称为“整体-部分”（Part-Whole）模式，将对象组织到树结构中，可以⽤来描述整体与部分的关系&lt;/p>
&lt;p>包含的⻆⾊：抽象构件、叶⼦构件、容器构件、客户类&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="img/2023-12-28-21-36-18.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
优点：分层次的复杂对象；客户端可以⼀致地使⽤组合结构或其中单个对象；定义了包含叶⼦对象和容器对象的类层次结构，形成复杂的树形结构；更容易在组合体内加⼊对象构件&lt;/p>
&lt;p>缺点：设计变得更加抽象；很难对容器中的构件类型进⾏限制&lt;/p>
&lt;p>适⽤环境：需要表示⼀个对象整体或部分层次；客户端可以针对抽象构件编程，⽆须关⼼对象层次&lt;/p>
&lt;p>结构的细节；对象的结构是动态的并且复杂程度不⼀样，但客户需要⼀致地处理它们&lt;/p>
&lt;p>模式应⽤：XML ⽂档解析；操作系统中的⽬录结构&lt;/p>
&lt;p>模式扩展：更复杂的组合模式（有多种叶⼦节点、有多种组合节点）、透明组合模式（叶⼦结点也有组合节点的⽅法）、安全组合模式（只有组合节点才有 add remove getChild 等⽅法）&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</guid><description/></item></channel></rss>