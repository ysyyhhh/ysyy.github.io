<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>项目管理 | Ysyy's</title><link>https://ysyyhhh.github.io/docs/knowledge/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</link><atom:link href="https://ysyyhhh.github.io/docs/knowledge/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><description>项目管理</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><image><url>https://ysyyhhh.github.io/media/logo.svg</url><title>项目管理</title><link>https://ysyyhhh.github.io/docs/knowledge/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</link></image><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/git/</guid><description>&lt;p>软件配置管理&lt;/p>
&lt;p>21.做代码管理用什么东西&lt;/p>
&lt;p>Git 代码仓库&lt;/p>
&lt;p>22.git rebase和git merge的区别&lt;/p>
&lt;p>Merge会自动根据两个分支的共同祖先和两个分支的最新提交 进行一个三方合并，然后将合并中修改的内容生成一个新的 commit，即merge合并两个分支并生成一个新的提交,并且仍然后保存原来分支的commit记录&lt;/p>
&lt;p>Rebase会从两个分支的共同祖先开始提取当前分支上的修改，然后将当前分支上的所有修改合并到目标分支的最新提交后面，如果提取的修改有多个，那git将依次应用到最新的提交后面。Rebase后只剩下一个分支的commit记录&lt;/p>
&lt;p>rebase会打乱时间线，但是更加整洁，merge保留了时间线信息&lt;/p>
&lt;h3 id="23git提交流程">23.git提交流程&lt;/h3>
&lt;p>&lt;a href="https://blog.csdn.net/weixin_44256848/article/details/123812716" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44256848/article/details/123812716&lt;/a>&lt;/p>
&lt;p>git pull 同步远程代码&lt;/p>
&lt;p>修改代码&lt;/p>
&lt;p>git status 显示被修改的文件&lt;/p>
&lt;p>git diff 文件名 显示文件具体变更&lt;/p>
&lt;p>git add 文件名 提交文件到本地缓存区&lt;/p>
&lt;p>git commit 提交到本地仓库&lt;/p>
&lt;p>git push 提交本地代码到远程仓库&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/weixin_44256848/article/details/123812716" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44256848/article/details/123812716&lt;/a>&lt;/p>
&lt;p>生产分支（master）‌&lt;/p>
&lt;ul>
&lt;li>Master分支是仓库的主分支，也有人叫Production分支，这个分支包含最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改‌&lt;/li>
&lt;/ul>
&lt;p>补丁分支（hotfix）‌&lt;/p>
&lt;ul>
&lt;li>当我们在生产环境发现新的Bug时候，我们需要基于master分支创建一个Hotfix分支，然后在Hotfix分支上修复bug，完成Hotfix后，我们要把hotfix分支合并回Master和Develop分支‌，所以Hotfix的改动会进入下一个Release&lt;/li>
&lt;/ul>
&lt;p>发布分支（release)‌&lt;/p>
&lt;ul>
&lt;li>当你需要发布一个新功能的时候，要基于Develop分支创建一个Release分支，在Release分支测试并修复bug，完成release后，把release合并到master和develop分支‌&lt;/li>
&lt;/ul>
&lt;p>开发分支（develop）‌&lt;/p>
&lt;ul>
&lt;li>这个分支是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支‌&lt;/li>
&lt;/ul>
&lt;p>功能分支（feature）‌&lt;/p>
&lt;ul>
&lt;li>feature分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release‌&lt;/li>
&lt;/ul></description></item></channel></rss>