<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cmu-15418&amp;cs-618 | Ysyy's</title><link>https://ysyyhhh.github.io/tag/cmu-15418cs-618/</link><atom:link href="https://ysyyhhh.github.io/tag/cmu-15418cs-618/index.xml" rel="self" type="application/rss+xml"/><description>Cmu-15418&amp;cs-618</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Fri, 01 Mar 2024 00:00:00 +0000</lastBuildDate><image><url>https://ysyyhhh.github.io/media/logo.svg</url><title>Cmu-15418&amp;cs-618</title><link>https://ysyyhhh.github.io/tag/cmu-15418cs-618/</link></image><item><title>Abstraction vs implementation</title><link>https://ysyyhhh.github.io/blog/abstraction-vs-implementation/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/abstraction-vs-implementation/</guid><description>&lt;h2 id="ispc-language">ISPC language&lt;/h2>
&lt;p>SPMD: Single Program Multiple Data
一种花哨的方式来说，就是一种并行编程的范式，它的特点是：在编程时，我们只需要写一个程序，然后在运行时，这个程序会被复制多份，每一份都会被分配到不同的处理器上去执行，这样就实现了并行。&lt;/p>
&lt;p>用ISPC实现sinx&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//assume N % programCount == 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">programCount&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">programIndex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">denom&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">number&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">denom&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sign&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用C++来调用
调用ISPC的东西是个程序实例的集合, gang.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;sinx.ispc.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">terms&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//init x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//execute
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">ispc&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">terms&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-12-02_huf0efc3661c3a8dbb19222d4c78427dcd_64558_6645a5b3ae3ddd05822a97581964c7a1.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-12-02_huf0efc3661c3a8dbb19222d4c78427dcd_64558_a5fc4d7e11a6077f1c92e8e21cf17691.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-12-02_huf0efc3661c3a8dbb19222d4c78427dcd_64558_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-12-02_huf0efc3661c3a8dbb19222d4c78427dcd_64558_6645a5b3ae3ddd05822a97581964c7a1.webp"
width="377"
height="390"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>ispc中不需要手动设置programCount,programIndex&lt;/p>
&lt;p>programCount: &lt;strong>number of simultaneous program&lt;/strong> instances in the gang (uniform value)&lt;/p>
&lt;p>programIndex: &lt;strong>id of the current program&lt;/strong> instance in the gang(a non-uniform value)&lt;/p>
&lt;p>uniform value: 一个值在gang中的所有实例中都是一样的&lt;/p>
&lt;p>如果在ispc中直接使用sinx 并不会更快.&lt;/p>
&lt;p>因为有一些相同的工作会被重复做很多次.
通过分离他们,可以减少重复计算的次数,从而提高效率.&lt;/p>
&lt;p>一个设想的实现方法如下:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-20-55_hu8ffcb6cb31f8f6bbebe6700f4e47b705_244038_6c839c2c7db48b5c09baf72171af45ca.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-20-55_hu8ffcb6cb31f8f6bbebe6700f4e47b705_244038_c5c93d956e779e277324ce9a6f829f09.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-20-55_hu8ffcb6cb31f8f6bbebe6700f4e47b705_244038_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-20-55_hu8ffcb6cb31f8f6bbebe6700f4e47b705_244038_6c839c2c7db48b5c09baf72171af45ca.webp"
width="728"
height="526"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>ISPC是为了更容易编写SIMD代码而设计的, 只需要通过特殊的宏或编译指示就可以使用SIMD指令.&lt;/p>
&lt;p>programCount 就是 向量宽度&lt;/p>
&lt;p>SPMD programming &lt;strong>abstraction&lt;/strong>&lt;/p>
&lt;p>ISPC compiler generates SIMD &lt;strong>implementation&lt;/strong>&lt;/p>
&lt;p>version2版本的代码,这是分块进行而不是交错的.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">programCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">programIndex&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//assume N % programCount == 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">denom&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">number&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">denom&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sign&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-26-19_hu7938bd2c1271d40663fbfcd32562e0ce_196751_489fcd0f2eb24701e06c213cf432a3a7.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-26-19_hu7938bd2c1271d40663fbfcd32562e0ce_196751_58e4e2bf0e53ad2ba318e1a2ae95c491.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-26-19_hu7938bd2c1271d40663fbfcd32562e0ce_196751_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-26-19_hu7938bd2c1271d40663fbfcd32562e0ce_196751_489fcd0f2eb24701e06c213cf432a3a7.webp"
width="723"
height="530"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>交错通常比分块更好,因为分块会导致数据的访问不连续. 当计算量不均匀时,分块会导致一些处理器的负载过重,而另一些处理器的负载过轻.&lt;/p>
&lt;p>并且因为是同时进行的, 交错可以访问邻近的数据,这样可以增加cache的命中率.&lt;/p>
&lt;p>根本原因:
矢量加载指令(寄存器)是一次加载多个数据,如果在很短的时间内,要加载的数据是连续的,那么就可以一次加载多个数据,如果数据是不连续的,那么就需要多次加载,这样就会降低效率.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-30-56_hu772df7a64f68035bf40a24f2e3f74143_347068_3384da9ebeed146a97cfc55595a67d0b.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-30-56_hu772df7a64f68035bf40a24f2e3f74143_347068_1575106681211a7a5c741cec621dd52d.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-30-56_hu772df7a64f68035bf40a24f2e3f74143_347068_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-30-56_hu772df7a64f68035bf40a24f2e3f74143_347068_3384da9ebeed146a97cfc55595a67d0b.webp"
width="760"
height="562"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>如果有个聪明的编译器,它可以自动将分块的代码转换为交错的代码,这样就可以兼顾两者的优点.&lt;/p>
&lt;p>foreach就可以实现这个功能,让程序员不需要关心这些细节.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foreach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">denom&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">number&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">denom&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sign&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ISPC的错误例子:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nf">sumall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foreach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>错误:编译器会报错,因为sum是一个uniform value,它在所有的实例中都是一样的,但是在foreach中,每个实例都会对sum进行修改,这样就会导致错误.&lt;/p>
&lt;p>修正这个错误:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nf">sumall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">partial_sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foreach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">partial_sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">reduce_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">partial_sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>reduce_add原语: 允许将一组不同的值合并为一个值,这个值在所有的实例中都是一样的.&lt;/p>
&lt;p>编译后的细节
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-41-11_hu30d7f4b1ac4472348ddd5783aa0a2e21_362539_c0b3c7b02a87cd0eafa04c9f4beee5c6.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-41-11_hu30d7f4b1ac4472348ddd5783aa0a2e21_362539_55edfb833370beeedb04607514558ee7.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-41-11_hu30d7f4b1ac4472348ddd5783aa0a2e21_362539_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-41-11_hu30d7f4b1ac4472348ddd5783aa0a2e21_362539_c0b3c7b02a87cd0eafa04c9f4beee5c6.webp"
width="741"
height="536"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>ISPC tasks: 基本上就是一个线程,但是它可以被分配到不同的处理器上去执行.&lt;/p>
&lt;h2 id="三种并行编程范式-和-三种-machine-architecture">三种并行编程范式 和 三种 machine architecture&lt;/h2>
&lt;p>聚焦于 communication 和 cooperation&lt;/p>
&lt;p>使用pthread时要call operate system
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-12_hu424ec0e5f725e78cd54c25ee6a2805b4_197701_83380472fb20f875d83bf8891c0f6c14.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-12_hu424ec0e5f725e78cd54c25ee6a2805b4_197701_ed04f98ce04c7e8e1fd1bf25ece5ef46.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-12_hu424ec0e5f725e78cd54c25ee6a2805b4_197701_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-46-12_hu424ec0e5f725e78cd54c25ee6a2805b4_197701_83380472fb20f875d83bf8891c0f6c14.webp"
width="737"
height="539"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>而在ISPC中,只需要call compiler&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-25_hu743500d3f46eda111182bb13825ddd61_215881_52792a10df8d3bb4c80ec3a9d0e8c19a.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-25_hu743500d3f46eda111182bb13825ddd61_215881_030e1987c8ce29fd60d9d581425c576f.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-25_hu743500d3f46eda111182bb13825ddd61_215881_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-46-25_hu743500d3f46eda111182bb13825ddd61_215881_52792a10df8d3bb4c80ec3a9d0e8c19a.webp"
width="727"
height="516"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="three-models-of-communicationabstraction">Three models of communication(abstraction)&lt;/h3>
&lt;h4 id="1shared-address-space">1.Shared address space&lt;/h4>
&lt;p>asst3中会用到&lt;/p>
&lt;p>多个线程之间通过互斥锁来进行通信&lt;/p>
&lt;p>在硬件中, Dance-hall model
所有处理器在同一侧.&lt;/p>
&lt;p>Symmetric Multiprocessor(SMP) system 就是如此&lt;/p>
&lt;p>最简单的方式是总线, 但这样无法扩展,因为总线的带宽是有限的.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-53-08_hub47389cf4f6ee62c3a24da3ed64647bd_284773_83f92147b67d52d347c9e764be414a7b.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-53-08_hub47389cf4f6ee62c3a24da3ed64647bd_284773_cc407f2eb03a52fbae43d3cfe589a807.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-53-08_hub47389cf4f6ee62c3a24da3ed64647bd_284773_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-53-08_hub47389cf4f6ee62c3a24da3ed64647bd_284773_83f92147b67d52d347c9e764be414a7b.webp"
width="719"
height="515"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
但实际中:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-16_huf5246cd0b880f843a34d54e8a9ceaf60_364206_72f74a1364f215b213f08c01860aa3b0.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-16_huf5246cd0b880f843a34d54e8a9ceaf60_364206_edb55a08e1aefae545f268c2c8d26a2d.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-16_huf5246cd0b880f843a34d54e8a9ceaf60_364206_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-55-16_huf5246cd0b880f843a34d54e8a9ceaf60_364206_72f74a1364f215b213f08c01860aa3b0.webp"
width="700"
height="525"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-34_hua87b13fdf1ea4f4894dd6309e2108996_336002_c2b29e4255b71be3da91f5e5bf6035ad.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-34_hua87b13fdf1ea4f4894dd6309e2108996_336002_62a5aae783f2810b1b06c98e682c54c6.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-34_hua87b13fdf1ea4f4894dd6309e2108996_336002_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-55-34_hua87b13fdf1ea4f4894dd6309e2108996_336002_c2b29e4255b71be3da91f5e5bf6035ad.webp"
width="713"
height="527"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>还有一种访问本地内存的方式,就是通过cache,这样就可以减少对总线的访问,从而提高效率.
Non-Uniform Memory Access(NUMA) system
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-14-34_hud613f70bd8ccce87e35300c481917997_435369_f41680dad25a8c31bbd97860f05c5172.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-14-34_hud613f70bd8ccce87e35300c481917997_435369_fb2fbd3e109a81339371b7401c85f29f.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-14-34_hud613f70bd8ccce87e35300c481917997_435369_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-14-34_hud613f70bd8ccce87e35300c481917997_435369_f41680dad25a8c31bbd97860f05c5172.webp"
width="760"
height="410"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但它为程序员引入的复杂性是很大的,因为程序员需要手动的将数据放到本地内存中,这样才能提高效率.&lt;/p>
&lt;p>shared address space的优点:&lt;/p>
&lt;ol>
&lt;li>程序员不需要关心数据的传输&lt;/li>
&lt;li>程序员不需要关心数据的分布&lt;/li>
&lt;/ol>
&lt;h4 id="2message-passing">2.Message passing&lt;/h4>
&lt;p>aasst4中会用到&lt;/p>
&lt;p>由于实现缓存一致性需要额外的成本，因此在大型系统中，共享内存的实现是不可行的。在这种情况下，消息传递是一种更好的选择。&lt;/p>
&lt;p>在消息传递中，每个处理器都有自己的私有内存，而且没有共享内存。要在处理器之间传递数据，必须使用显式的消息传递原语。&lt;/p>
&lt;p>不需要任何硬件支持，因此可以在任何系统上实现。只需要网络。&lt;/p>
&lt;p>可以构建大型系统，因为没有共享内存的限制。&lt;/p>
&lt;p>这些原语允许程序员在处理器之间传递数据，但是程序员必须显式地指定数据的传输。这种方式的缺点是，程序员需要关心数据的传输，这样就会增加程序员的负担。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-18-37_hu42065f6b748829e4ad2ed8749e657be7_703756_ddc00b5301d4dc84d1e271fe7930a3e9.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-18-37_hu42065f6b748829e4ad2ed8749e657be7_703756_d491feaa04b414c21f714294089e1a0f.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-18-37_hu42065f6b748829e4ad2ed8749e657be7_703756_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-18-37_hu42065f6b748829e4ad2ed8749e657be7_703756_ddc00b5301d4dc84d1e271fe7930a3e9.webp"
width="760"
height="513"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h4 id="3data-parallel">3.Data parallel&lt;/h4>
&lt;p>asst2中会用到&lt;/p>
&lt;p>上面两种方式可以在任何硬件上实现。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-22-41_hu29009ffeff66b4988989ee35eddf94af_620179_c09df96c7d1eb7e807d4e08bd88b7d7a.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-22-41_hu29009ffeff66b4988989ee35eddf94af_620179_45b583dd334a3ef06cb1eba15c98eb10.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-22-41_hu29009ffeff66b4988989ee35eddf94af_620179_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-22-41_hu29009ffeff66b4988989ee35eddf94af_620179_c09df96c7d1eb7e807d4e08bd88b7d7a.webp"
width="760"
height="440"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Data parallel对程序员来说是最简单的，因为程序员不需要关心数据的传输，也不需要关心数据的分布。但是，它只能在特定的硬件上实现，因为它需要硬件支持。&lt;/p>
&lt;p>过去我们使用SIMD，现在使用SPMD。&lt;/p>
&lt;p>并行程序的问题&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-28-16_hu69dfe58954025daef8c252774f7a0fae_426166_3f56fdd1ed92ca29942ada1ecd451f8a.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-28-16_hu69dfe58954025daef8c252774f7a0fae_426166_35f3911aeb8171c6b3bb3b1641022573.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-28-16_hu69dfe58954025daef8c252774f7a0fae_426166_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-28-16_hu69dfe58954025daef8c252774f7a0fae_426166_3f56fdd1ed92ca29942ada1ecd451f8a.webp"
width="760"
height="562"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>这样的并行会得到不确定的结果。&lt;/p>
&lt;p>那么如何有原则性地使用并行呢？&lt;/p>
&lt;p>有一个抽象概念是stream，可以避免并行竞争问题。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-30-44_hu3d9b4b708f4c384b1f7b7d012771095e_675645_3c7739822199ef3aa5013f2a499cb65b.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-30-44_hu3d9b4b708f4c384b1f7b7d012771095e_675645_2e3d9be1885abeb0b8a5ba073e2faa56.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-30-44_hu3d9b4b708f4c384b1f7b7d012771095e_675645_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-30-44_hu3d9b4b708f4c384b1f7b7d012771095e_675645_3c7739822199ef3aa5013f2a499cb65b.webp"
width="760"
height="519"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>两个函数间的用法：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-31-24_hu7ad04064968c85894cc57d0d9c48a049_715623_64ef6cbf5a00d5a6bf1599d935d086d9.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-31-24_hu7ad04064968c85894cc57d0d9c48a049_715623_48da98c2f403b1682277c9fc2c8145bc.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-31-24_hu7ad04064968c85894cc57d0d9c48a049_715623_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-31-24_hu7ad04064968c85894cc57d0d9c48a049_715623_64ef6cbf5a00d5a6bf1599d935d086d9.webp"
width="760"
height="559"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>当如果使用stream，就必须创建tmp。不得不把临时数据写入浪费的带宽中。&lt;/p>
&lt;p>所以我们希望也许有一些新的运算符可以做更加高级的操作。&lt;/p>
&lt;p>gather: 将数据从不同的stream中收集到一个stream中。
scatter: 将数据从一个stream中分散到不同的stream中。&lt;/p>
&lt;p>intel包括了gather，但不包括scatter。
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-39-33_huac084b4facbe1a325680980b61a6f2eb_748223_5e0630b9c73daaa7936463d125ffd07c.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-39-33_huac084b4facbe1a325680980b61a6f2eb_748223_88196d1ffbb5e688aa133fefcc71da82.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-39-33_huac084b4facbe1a325680980b61a6f2eb_748223_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-39-33_huac084b4facbe1a325680980b61a6f2eb_748223_5e0630b9c73daaa7936463d125ffd07c.webp"
width="760"
height="568"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-42-00_hu1e128ac41b625201ee01db386b0f9bf6_668641_08b839ae4cc614773c96da758214b653.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-42-00_hu1e128ac41b625201ee01db386b0f9bf6_668641_fd727307d9b3eec91fb5789f8d13a106.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-42-00_hu1e128ac41b625201ee01db386b0f9bf6_668641_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-42-00_hu1e128ac41b625201ee01db386b0f9bf6_668641_08b839ae4cc614773c96da758214b653.webp"
width="760"
height="557"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h4 id="总结">总结&lt;/h4>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-44-11_hu191eb3d20f4c2a32765dba803ce24f69_671529_e7cdb83e3678f5e26c23091fd4def508.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-44-11_hu191eb3d20f4c2a32765dba803ce24f69_671529_7c9a647964f71be563c9183aefe4e725.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-44-11_hu191eb3d20f4c2a32765dba803ce24f69_671529_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-44-11_hu191eb3d20f4c2a32765dba803ce24f69_671529_e7cdb83e3678f5e26c23091fd4def508.webp"
width="760"
height="512"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>这些并不是完全独立的，而是可以组合使用的。&lt;/p>
&lt;p>通常在实践中为了得到最好的性能，会使用以上所有的方式。&lt;/p>
&lt;p>多核芯片内部通常是shared address space，但小规模情况下使用message passing。&lt;/p></description></item><item><title>asst1</title><link>https://ysyyhhh.github.io/blog/asst1/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/asst1/</guid><description>&lt;p>&lt;a href="https://www.cnblogs.com/kalicener/p/16824312.html" target="_blank" rel="noopener">参考&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/stanford-cs149/asst1" target="_blank" rel="noopener">任务&lt;/a>&lt;/p>
&lt;h2 id="program-1-parallel-fractal-generation-using-threads-20-pointshttpsgithubcomstanford-cs149asst1program-1-parallel-fractal-generation-using-threads-20-points">&lt;a href="https://github.com/stanford-cs149/asst1#program-1-parallel-fractal-generation-using-threads-20-points" target="_blank" rel="noopener">Program 1: Parallel Fractal Generation Using Threads (20 points)&lt;/a>&lt;/h2>
&lt;p>提示:
需要先看CMU15-418/CS149的L2再完成Pro1&lt;/p>
&lt;p>任务描述:
用多线程画mandelbrot fractal.&lt;/p>
&lt;p>代码中给出了串行的实现, 你需要实现多线程的版本.&lt;/p>
&lt;p>多线程版本中只需要修改 &lt;code>workerThreadStart&lt;/code>函数.
不需要手动创建线程, 也不需要手动join线程.
直接调用mandelbrotThread().&lt;/p>
&lt;h3 id="11--12-计算在23456781632个线程下的加速比">1.1 &amp;amp; 1.2, 计算在2,3,4,5,6,7,8,16,32个线程下的加速比&lt;/h3>
&lt;h4 id="编写并观察">编写并观察&lt;/h4>
&lt;p>workerThreadStart函数的实现:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">345&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">workerThreadStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">WorkerArgs&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// TODO FOR CS149 STUDENTS: Implement the body of the worker
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// thread here. Each thread should make a call to mandelbrotSerial()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// to compute a part of the output image. For example, in a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// program that uses two threads, thread 0 could compute the top
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// half of the image and thread 1 could compute the bottom half.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// printf(&amp;#34;Hello world from thread %d\n&amp;#34;, args-&amp;gt;threadId);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CycleTimer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">currentSeconds&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 每个线程负责的行数(除不尽的部分由最后一个线程负责)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">numThreads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">startRow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">numRows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">numThreads&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果是最后一个线程，那么就要把除不尽的部分也算上
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">numRows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">numThreads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Thread %d startRow: %d, numRows: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startRow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numRows&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mandelbrotSerial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">startRow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numRows&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">maxIterations&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CycleTimer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">currentSeconds&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Thread %d time: %.3f ms&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>线程数&lt;/th>
&lt;th>加速比&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1.97&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>1.63&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>2.31&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>2.37&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>3.08&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>3.15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>3.74&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>5.14&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可以观察到，加速比和线程数并不是线性相关.&lt;/p>
&lt;h4 id="猜测原因">猜测原因&lt;/h4>
&lt;p>猜测可能的原因有:&lt;/p>
&lt;ul>
&lt;li>线程通信的开销&lt;/li>
&lt;li>每个线程分配的任务不均匀&lt;/li>
&lt;/ul>
&lt;h3 id="13-查看每个线程的执行时间验证猜想">1.3 查看每个线程的执行时间,验证猜想&lt;/h3>
&lt;p>当线程数为4时, 每个线程的执行时间如下:
Thread 0 time: 63.974 ms
Thread 3 time: 65.563 ms
Thread 2 time: 259.972 ms
Thread 1 time: 260.669 ms&lt;/p>
&lt;p>当线程数为8时, 每个线程的执行时间如下:
Thread 0 time: 13.702 ms
Thread 7 time: 16.831 ms
Thread 1 time: 57.324 ms
Thread 6 time: 61.069 ms
Thread 5 time: 113.431 ms
Thread 2 time: 115.753 ms
Thread 4 time: 164.736 ms
Thread 3 time: 166.306 ms&lt;/p>
&lt;p>可以看到,中间线程分配的任务更多,执行时间更长.
因此在增加线程数时,加速比并不是线性增加的.&lt;/p>
&lt;h3 id="14">1.4&lt;/h3>
&lt;p>任务描述:&lt;/p>
&lt;ul>
&lt;li>解决上面的问题,使得加速比更接近线性.
&lt;ul>
&lt;li>如: 8线程时的加速比需要在7~8之间.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>解决方法需要具有适用性, 适用所有的线程数.&lt;/li>
&lt;/ul>
&lt;p>tips:
有一个非常简单的静态赋值可以实现这个目标，并且线程之间不需要通信/同步.&lt;/p>
&lt;h4 id="解决方案">解决方案&lt;/h4>
&lt;p>思路:
根据代码可知, 每行的计算是独立的, 因此可以将每行分配给不同的线程.
但由上面的实验可知,中间行的计算量比较大.&lt;/p>
&lt;p>因此我们不应该直接平均切分行, 而是以线程数量为步长,线程交叉依次分配行.
即 第i个线程分配k*n+i行.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">workerThreadStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">WorkerArgs&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// TODO FOR CS149 STUDENTS: Implement the body of the worker
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// thread here. Each thread should make a call to mandelbrotSerial()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// to compute a part of the output image. For example, in a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// program that uses two threads, thread 0 could compute the top
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// half of the image and thread 1 could compute the bottom half.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// printf(&amp;#34;Hello world from thread %d\n&amp;#34;, args-&amp;gt;threadId);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CycleTimer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">currentSeconds&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> 方案1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> // 每个线程负责的行数(除不尽的部分由最后一个线程负责)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> int baseHeight = args-&amp;gt;height / args-&amp;gt;numThreads;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> int startRow = args-&amp;gt;threadId * baseHeight;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> int numRows = baseHeight;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> int yu = args-&amp;gt;height % args-&amp;gt;numThreads;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> // 均匀分配剩余行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> if (args-&amp;gt;threadId &amp;lt; yu)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> numRows++;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> startRow += std::min(args-&amp;gt;threadId, yu);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> printf(&amp;#34;Thread %d startRow: %d, numRows: %d\n&amp;#34;, args-&amp;gt;threadId, startRow, numRows);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> mandelbrotSerial(args-&amp;gt;x0, args-&amp;gt;y0, args-&amp;gt;x1, args-&amp;gt;y1,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> args-&amp;gt;width, args-&amp;gt;height,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> startRow, numRows,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> args-&amp;gt;maxIterations, args-&amp;gt;output);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 方案2, 依次分配行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">numThreads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mandelbrotSerial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">maxIterations&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CycleTimer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">currentSeconds&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Thread %d time: %.3f ms&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果:&lt;/p>
&lt;p>Thread 3 time: 88.842 ms
Thread 1 time: 89.680 ms
Thread 0 time: 89.717 ms
Thread 7 time: 90.280 ms
Thread 5 time: 90.715 ms
Thread 6 time: 90.743 ms
Thread 2 time: 91.049 ms
Thread 4 time: 92.982 ms
[mandelbrot thread]: [93.318] ms
Wrote image file mandelbrot-thread.ppm
(7.10x speedup from 8 threads)&lt;/p>
&lt;p>上面的解决方案使得每个线程的执行时间基本相同,因此加速比接近线性.
在8线程时,加速比为7.1.&lt;/p>
&lt;h3 id="15-16线程和8线程的加速比">1.5 16线程和8线程的加速比&lt;/h3>
&lt;p>现在16线程是否明显优于8线程? 给出是或否的原因.
(6.45x speedup from 16 threads)
16线程并没有明显由于8线程,反而还更慢.
原因:&lt;/p>
&lt;ul>
&lt;li>电脑本身是4核, 超线程后是8线程.&lt;/li>
&lt;li>16线程时线程切换反而导致开销增加.&lt;/li>
&lt;/ul>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>pro1的目的是为了认识到并行计算的overhead, 以及多线程在计算上也应该是依次交替分配的. 不能简单的平均分配.&lt;/p>
&lt;p>pro1是通过垂直分割来实现并行计算.
而向量化是通过水平分割来实现并行计算.&lt;/p>
&lt;h2 id="program-2-vectorizing-code-using-simd-intrinsics">program-2-vectorizing-code-using-simd-intrinsics&lt;/h2>
&lt;p>前提: L2
任务描述：
使用SIMD指令(CS149intrin.h提供的),来实现clampedExpVector函数.&lt;/p>
&lt;p>示例函数:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">absVector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">zero&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_mask&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNegative&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotNegative&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Note: Take a careful look at this loop indexing. This example
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// code is not guaranteed to work when (N % VECTOR_WIDTH) != 0.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Why is that the case?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="n">VECTOR_WIDTH&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// All ones
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// All zeros
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskIsNegative&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Load vector of values from contiguous memory addresses
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vload_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// x = values[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Set mask according to predicate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vlt_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maskIsNegative&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zero&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// if (x &amp;lt; 0) {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Execute instruction using mask (&amp;#34;if&amp;#34; clause)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vsub_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zero&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNegative&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// output[i] = -x;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Inverse maskIsNegative to generate &amp;#34;else&amp;#34; mask
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskIsNotNegative&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_mask_not&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maskIsNegative&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// } else {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Execute instruction (&amp;#34;else&amp;#34; clause)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vload_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotNegative&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// output[i] = x; }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Write results back to memory
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vstore_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例函数absVector并不能适用于所有情况,原因如下:
当n%VECTOR_WIDTH != 0时, 会越界.&lt;/p>
&lt;h3 id="12-实现clampedexpvector函数">1&amp;amp;2 实现clampedExpVector函数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">clampedExpVector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exponents&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// CS149 STUDENTS TODO: Implement your vectorized version of
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// clampedExpSerial() here.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Your solution should work for any value of
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// N and VECTOR_WIDTH, not just when VECTOR_WIDTH divides N
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_int&lt;/span> &lt;span class="n">zeroInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">oneInt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">oneInt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">zeroInt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">one&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nine&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">9.999999f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">VECTOR_WIDTH&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_mask&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsZero&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// All ones
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// All zeros
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskIsZero&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 防止在最后一次循环时，i+VECTOR_WIDTH超出N
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">VECTOR_WIDTH&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">maskAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">N&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// float x = values[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vload_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// int y = exponents[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vload_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exponents&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// if (y == 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_veq_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maskIsZero&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zeroInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// output[i] = 1.f;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vstore_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_mask_not&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maskIsZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 消除最后一次循环时，i+VECTOR_WIDTH超出N的情况
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_mask_and&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// float result = x;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// int count = y - 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__cs149_vec_int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_cs149_vsub_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">oneInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 哪些count&amp;gt;0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__cs149_mask&lt;/span> &lt;span class="n">countMark&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_cs149_vgt_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">countMark&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zeroInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// while (count &amp;gt; 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">_cs149_cntbits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">countMark&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// result *= x;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vmult_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">countMark&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// count--;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vsub_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">oneInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">countMark&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 哪些count&amp;gt;0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vgt_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">countMark&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zeroInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">countMark&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// if (result &amp;gt; 9.999999f)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__cs149_mask&lt;/span> &lt;span class="n">gtNineMask&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_cs149_vgt_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gtNineMask&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nine&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// { reult = 9.999999f;}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vmove_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nine&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gtNineMask&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// output[i] = result;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_cs149_vstore_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过init_ones来防止在有n%vectorWith!=0时 越界.&lt;/p>
&lt;ul>
&lt;li>在最开始的maskAll时设置&lt;/li>
&lt;li>在取反码后也要设置一次&lt;/li>
&lt;/ul>
&lt;p>count循环:
通过设置一个mask来标记哪些count&amp;gt;0, 从而实现循环.&lt;/p>
&lt;p>修改vectorWidth为2, 4, 8, to 16来回答:
Does the vector utilization increase, decrease or stay the same as VECTOR_WIDTH changes? Why?&lt;/p>
&lt;p>vectorWidth为2时, 结果如下:
****************** Printing Vector Unit Statistics *******************
Vector Width: 2
Total Vector Instructions: 162728
Vector Utilization: 77.0%
Utilized Vector Lanes: 250653
Total Vector Lanes: 325456&lt;/p>
&lt;p>vectorWidth为4时, 结果如下:
****************** Printing Vector Unit Statistics *******************
Vector Width: 3
Total Vector Instructions: 119440
Vector Utilization: 72.2%
Utilized Vector Lanes: 258879
Total Vector Lanes: 358320&lt;/p>
&lt;p>vectorWidth为8时, 结果如下:
****************** Printing Vector Unit Statistics *******************
Vector Width: 8
Total Vector Instructions: 51628
Vector Utilization: 66.0%
Utilized Vector Lanes: 272539
Total Vector Lanes: 413024&lt;/p>
&lt;p>vectorWidth为16时, 结果如下:
****************** Printing Vector Unit Statistics *******************
Vector Width: 16
Total Vector Instructions: 26968
Vector Utilization: 64.2%
Utilized Vector Lanes: 277188
Total Vector Lanes: 431488&lt;/p>
&lt;p>可以发现, 随着vectorWidth的增加, vectorUtilization也在减少.&lt;/p>
&lt;p>原因:
有多个条件语句,当vectorWidth增加时, 每次在某个条件中不执行的指令也会增加.&lt;/p>
&lt;h3 id="3-实现arraysumvector">3 实现arraySumVector&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float&lt;/span> &lt;span class="nf">arraySumVector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// CS149 STUDENTS TODO: Implement your vectorized version of arraySumSerial here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">VECTOR_WIDTH&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_mask&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// All ones
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 防止在最后一次循环时，i+VECTOR_WIDTH超出N
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">VECTOR_WIDTH&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">maskAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">N&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// float x = values[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vload_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// sum += x;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vadd_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// log2(VECTOR_WIDTH)内解决
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">log2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VECTOR_WIDTH&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用_cs149_hadd_float函数，将sum中的每两个元素相加
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 再使用_cs149_interleave_float函数，将sum中的每两个元素交叉放置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 重复log2(VECTOR_WIDTH)次
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_hadd_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_cs149_interleave_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将sum中的第一个元素赋值给result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设VECTOR_WIDTHs始终是N的因子.&lt;/p>
&lt;p>可以实现在O(N/VECTOR_WIDTH + log2(VECTOR_WIDTH))的时间内完成计算.&lt;/p>
&lt;p>最后的log2实现方式.
提示中给了两个函数
hadd: 将每两个元素相加
interleave: 将每两个元素交叉放置&lt;/p>
&lt;p>因此我们可以类似与归并排序的方式,将sum中的每两个元素相加,再将每两个元素交叉放置.
重复log2(VECTOR_WIDTH)次后,第一个元素就是结果.&lt;/p>
&lt;h2 id="program-3-ispc">program-3 ISPC&lt;/h2>
&lt;p>前提: L3&lt;/p>
&lt;h3 id="part1-ispc-basic">part1 ISPC basic&lt;/h3>
&lt;p>任务:学习ISPC基本概念和编写.&lt;/p>
&lt;p>ISPC是一种编译器,可以将C代码编译为SIMD指令.&lt;/p>
&lt;h3 id="part2-ispc-task">part2 ISPC task&lt;/h3>
&lt;p>任务描述:
观察ISPCtask执行的结果&lt;/p>
&lt;h4 id="1">1&lt;/h4>
&lt;p>启动mandelbrot_ispc &amp;ndash;tasks&lt;/p>
&lt;p>结果:
[mandelbrot serial]: [424.881] ms
Wrote image file mandelbrot-serial.ppm
[mandelbrot ispc]: [97.180] ms
Wrote image file mandelbrot-ispc.ppm
[mandelbrot multicore ispc]: [48.986] ms
Wrote image file mandelbrot-task-ispc.ppm
(4.37x speedup from ISPC)
(8.67x speedup from task ISPC)&lt;/p>
&lt;p>因为设置了两个task所以大约是两倍的加速比 对于 ISPC&lt;/p>
&lt;h4 id="2">2&lt;/h4>
&lt;p>修改mandelbrot_ispc_withtasks()中的task数量,
you should be able to achieve performance that exceeds the sequential version of the code by over 32 times!
How did you determine how many tasks to create?
Why does the number you chose work best?&lt;/p>
&lt;p>根据机器的最大超线程数量设置
我设置了16个task, 因为我的机器是4核8线程, 16个task可以使得每个线程都有两个task.&lt;/p>
&lt;h4 id="3">3&lt;/h4>
&lt;p>what happens when you launch 10,000 ISPC tasks? What happens when you launch 10,000 threads?&lt;/p>
&lt;p>向量加速&lt;/p>
&lt;p>思考题:
Q: Why are there two different mechanisms (foreach and launch) for expressing independent, parallelizable work to the ISPC system?
A:foreach是将一个任务分配给多个线程,而launch是将多个任务分配给多个线程.&lt;/p>
&lt;p>Q: Couldn&amp;rsquo;t the system just partition the many iterations of foreach across all cores and also emit the appropriate SIMD code for the cores?
A:&lt;/p>
&lt;h2 id="program-4-iterative-sqrt-15-points">program-4 Iterative sqrt (15 points)&lt;/h2>
&lt;p>用sqrt复习ISPC的基本概念&lt;/p>
&lt;h3 id="1-1">1&lt;/h3>
&lt;p>运行结果:
[sqrt serial]: [1316.793] ms
[sqrt ispc]: [301.134] ms
[sqrt task ispc]: [52.439] ms
(4.37x speedup from ISPC)
(25.11x speedup from task ISPC)
4.37x speedup due to SIMD
25.11 / 4.37 = 5.74x speedup due to multi-core&lt;/p>
&lt;h3 id="2-1">2&lt;/h3>
&lt;p>构造数组使得加速比最大.&lt;/p>
&lt;p>全部数为2.998.
思路:
因为每个元素相同可以让计算更均匀,2.998可以充分调动cpu
结构:
(5.60x speedup from ISPC)
(30.39x speedup from task ISPC)&lt;/p>
&lt;h3 id="3-1">3&lt;/h3>
&lt;p>构造数组使得加速比最小.&lt;/p>
&lt;p>全部数为1
思路:
1的sqrt计算迭代最少.&lt;/p>
&lt;p>结果:
(2.50x speedup from ISPC)
(3.08x speedup from task ISPC)&lt;/p>
&lt;h2 id="program-5-blas-saxpy-10-points">program-5 BLAS saxpy (10 points)&lt;/h2>
&lt;h3 id="1-2">1&lt;/h3>
&lt;p>运行观察加速比
[saxpy ispc]: [25.098] ms [11.874] GB/s [1.594] GFLOPS
[saxpy task ispc]: [18.438] ms [16.164] GB/s [2.169] GFLOPS
(1.36x speedup from use of tasks)&lt;/p>
&lt;p>因为需要访问内存所以加速比不高.&lt;/p>
&lt;h3 id="2-2">2&lt;/h3>
&lt;p>Even though saxpy loads one element from X, one element from Y, and writes one element to result the multiplier by 4 is correct. Why is this the case? (Hint, think about how CPU caches work.)&lt;/p>
&lt;p>当程序写入结果的一个元素时，它首先将包含这个元素的缓存行提取到缓存中。这需要一个内存操作。然后，当不需要这个缓存行时，它将从缓存中闪现出来，这需要另一个内存操作。&lt;/p></description></item><item><title>asst2</title><link>https://ysyyhhh.github.io/blog/asst2/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/asst2/</guid><description>&lt;h2 id="c-sync">C++ Sync&lt;/h2>
&lt;h3 id="thread的使用">thread的使用&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">my_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">thread_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello from spawned thread %d of %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">my_func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">my_func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The main thread is running concurrently with spawned threads.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Spawned threads have terminated at this point.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mutex">mutex&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;chrono&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;map&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">g_pages&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">g_pages_mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">save_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// simulate a long page fetch
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">this_thread&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sleep_for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;fake content&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">guard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g_pages_mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">g_pages&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">save_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;http://foo&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">save_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;http://bar&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// safe to access g_pages without lock now, as the threads are joined
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">pair&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">g_pages&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">pair&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; =&amp;gt; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">pair&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">http://bar &lt;span class="o">=&lt;/span>&amp;gt; fake content
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http://foo &lt;span class="o">=&lt;/span>&amp;gt; fake content
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="condition_variable">condition_variable&lt;/h3>
&lt;p>线程调用 wait (lock)来指示它希望等待来自另一个线程的通知。&lt;/p>
&lt;p>注意，互斥对象(包装在 std: : only _ lock 中)被传递给 wait ()调用。当通知线程时，条件变量将获得锁。&lt;/p>
&lt;p>这意味着当调用 wait ()返回时，调用线程是锁的当前持有者。锁通常用于保护线程现在需要检查的共享变量，以确保它正在等待的条件为真。&lt;/p>
&lt;p>创建 N 个线程。N-1个线程等待来自线程0的通知，然后在接到通知后，自动递增一个受共享互斥锁保护的计数器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Wrapper class around a counter, a condition variable, and a mutex.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ThreadState&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">condition_variable_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_waiting_threads_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ThreadState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num_waiting_threads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">condition_variable_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mutex_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_waiting_threads_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_waiting_threads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">ThreadState&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">condition_variable_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">mutex_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">signal_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ThreadState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">thread_state&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Acquire mutex to make sure the shared counter is read in a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// consistent state.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">counter_&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">num_waiting_threads_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Release the mutex before calling `notify_all()` to make sure
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// waiting threads have a chance to make progress.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">condition_variable_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Re-acquire the mutex to read the shared counter again.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">wait_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ThreadState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">thread_state&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// A lock must be held in order to wait on a condition variable.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// This lock is atomically released before the thread goes to sleep
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// when `wait()` is called. The lock is atomically re-acquired when
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// the thread is woken up using `notify_all()`.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">condition_variable_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Increment the shared counter with the lock re-acquired to inform the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// signaling thread that this waiting thread has successfully been
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// woken up.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">counter_&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Lock re-acquired after wait()...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Signaling thread spins until each waiting thread increments a shared
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * counter after being woken up from the `wait()` method.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">condition_variable_example&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;==============================================================&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Starting %d threads for signal-and-waiting...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ThreadState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">thread_state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_threads&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signal_fn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wait_fn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;==============================================================&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="part_a">part_a&lt;/h2>
&lt;h3 id="step-1-实现tasksystemparallelspawn">step 1 实现TaskSystemParallelSpawn&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">TaskSystemParallelSpawn&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 students will modify the implementation of this
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// method in Part A. The implementation provided below runs all
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// tasks sequentially on the calling thread.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">taskId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 交叉分配任务
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">taskId&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fetch_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">task_id&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runnable&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">taskId&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fetch_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// printf(&amp;#34;done\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Q:How will you assign tasks to your worker threads? Should you consider static or dynamic assignment of tasks to threads?
A:交叉分配任务，动态分配任务&lt;/p>
&lt;p>Q:How will you ensure that all tasks are executed exactly once?
A:使用原子变量taskId&lt;/p>
&lt;h3 id="step-2-实现--tasksystemparallelthreadpoolspinning">step 2 实现 TaskSystemParallelThreadPoolSpinning&lt;/h3>
&lt;p>step1 的overhead主要是创建线程的开销(尤其是计算量低的任务上)，因此使用线程池可以减少开销&lt;/p>
&lt;p>要求: 在TestSystem 创建时,或者在run时创建线程池&lt;/p>
&lt;p>Q1: 作为一个开始的实现，我们建议您将worker threads设计为连续循环，始终检查它们是否有更多的工作要执行。(进入 while 循环直到条件为真的线程通常称为“spinning”)
那么worker thread 如何确定有work要执行呢？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">ITaskSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 student implementations may decide to perform setup
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// operations (such as thread pool construction) here.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Implementations are free to add new class member variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// (requiring changes to tasksys.h).
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">exit_flag_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="o">::~&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exit_flag_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">thread&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 students will modify the implementation of this
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// method in Part A. The implementation provided below runs all
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// tasks sequentially on the calling thread.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// printf(&amp;#34;run\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">runnable_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_tasks_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_tasks_done_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">num_tasks_done_&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">this_thread&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">yield&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Q:为什么要使用yield
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// A:因为如果不使用yield，那么线程会一直占用CPU，导致其他线程无法运行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Q:那我直接死循环呢
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// A:死循环会导致CPU占用率100%，导致其他线程无法运行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Q2:确保 run ()实现所需的同步行为是非常重要的。如何更改 run ()的实现以确定批量任务启动中的所有任务都已完成？
A:使用原子变量num_tasks_done_，每个任务完成时，num_tasks_done_加一，当num_tasks_done_等于num_total_tasks时，所有任务完成&lt;/p>
&lt;h3 id="step-3-实现-tasksystemparallelthreadpoolsleeping">step 3 实现 TaskSystemParallelThreadPoolSleeping&lt;/h3>
&lt;p>Step2的缺点：
当线程“spin”等待某些操作时，它们会利用 CPU 核心的执行资源。&lt;/p>
&lt;ul>
&lt;li>例如，工作线程可能会循环等待新任务到达。&lt;/li>
&lt;li>另一个例子是，主线程可能会循环等待辅助线程完成所有任务，这样它就可以从 run ()调用返回。&lt;/li>
&lt;/ul>
&lt;p>这可能会影响性能，因为即使这些线程没有做有用的工作，也会使用 CPU 资源来运行这些线程。&lt;/p>
&lt;p>在任务的这一部分中，我们希望您通过让线程处于休眠状态来提高任务系统的效率，直到它们所等待的条件得到满足。&lt;/p>
&lt;p>您的实现可以选择使用条件变量来实现此行为。条件变量是一个同步原语，它允许线程在等待条件存在时休眠(不占用 CPU 处理资源)。其他线程向等待唤醒的线程发出“信号”，以查看它们所等待的条件是否已经满足。例如，如果没有工作要做，您的工作线程可能会处于休眠状态(这样它们就不会从尝试执行有用工作的线程那里占用 CPU 资源)。另一个例子是，调用 run ()的主应用程序线程可能希望在等待批量任务启动中的所有任务由工作线程完成时休眠。(否则，一个旋转的主线程将从工作线程那里夺走 CPU 资源!)有关 C + + 中条件变量的更多信息，请参见我们的 C + + 同步教程。&lt;/p>
&lt;p>您在这部分作业中的实现可能需要考虑棘手的race conditions 。您需要考虑许多可能的线程行为交错&lt;/p>
&lt;p>您可能需要考虑编写额外的测试用例来测试您的系统。赋值入门代码包括评分脚本用于评分代码性能的工作负载，但是我们也将使用一组更广泛的工作负载来测试您的实现的正确性，而我们在入门代码中并没有提供这些工作负载！&lt;/p>
&lt;p>The assignment starter code includes the workloads that the grading script will use to grade the performance of your code, but we will also test the correctness of your implementation using a wider set of workloads that we are not providing in the starter code!&lt;/p>
&lt;p>tasksys.h&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * TaskSystemParallelThreadPoolSleeping: This class is the student&amp;#39;s
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * optimized implementation of a parallel task execution engine that uses
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * a thread pool. See definition of ITaskSystem in
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * itasksys.h for documentation of the ITaskSystem interface.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TaskSystemParallelThreadPoolSleeping&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ITaskSystem&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">name&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TaskID&lt;/span> &lt;span class="nf">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">deps&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sync&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_tasks_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">exit_flag_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">num_tasks_done_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tasks_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable_&lt;/span>&lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">queue_condition_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">all_done_condition_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_waiting_threads_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">num_tasks_remaining_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">all_done_mutex_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>tasksys.cpp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * ================================================================
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Parallel Thread Pool Sleeping Task System Implementation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * ================================================================
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Parallel + Thread Pool + Sleep&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">task_id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">exit_flag_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">task_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 等待任务
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">queue_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lk&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">exit_flag_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">tasks_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tasks_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runnable_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_tasks_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_tasks_remaining_&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">num_tasks_remaining_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通知主线程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// printf(&amp;#34;notify_all_done\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">all_done_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">notify_one&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通知其他线程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// printf(&amp;#34;notify_all\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">queue_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">notify_one&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">ITaskSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 student implementations may decide to perform setup
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// operations (such as thread pool construction) here.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Implementations are free to add new class member variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// (requiring changes to tasksys.h).
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">exit_flag_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::~&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 student implementations may decide to perform cleanup
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// operations (such as thread pool shutdown construction) here.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Implementations are free to add new class member variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// (requiring changes to tasksys.h).
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">exit_flag_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">queue_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">thread&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 students will modify the implementation of this
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// method in Parts A and B. The implementation provided below runs all
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// tasks sequentially on the calling thread.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runnable_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_tasks_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_tasks_remaining_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通知其他线程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">queue_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// printf(&amp;#34;run\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">num_tasks_remaining_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lk2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">all_done_mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">all_done_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lk2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// printf(&amp;#34;all done\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// printf(&amp;#34;all done\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果分析:&lt;/p>
&lt;p>sleep对spin的提升效果不明显，可能是因为任务太少，线程切换的开销比较大.&lt;/p>
&lt;p>运行结果:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Running task system grading harness... &lt;span class="o">(&lt;/span>&lt;span class="m">11&lt;/span> total tests&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - Detected CPU with &lt;span class="m">16&lt;/span> execution contexts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - Task system configured to use at most &lt;span class="m">8&lt;/span> &lt;span class="nv">threads&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: super_super_light...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: super_super_light
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 5.281 5.788 0.91 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 95.221 92.995 1.02 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 10.877 10.446 1.04 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 6.943 42.705 0.16 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: super_light...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: super_light
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 37.497 37.844 0.99 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 108.136 108.805 0.99 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 10.777 13.615 0.79 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 10.274 44.686 0.23 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: ping_pong_equal...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: ping_pong_equal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 603.419 606.739 0.99 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 167.412 178.638 0.94 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 105.983 123.525 0.86 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 108.243 148.316 0.73 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: ping_pong_unequal...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: ping_pong_unequal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 1126.19 1109.329 1.02 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 259.271 260.822 0.99 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 199.088 198.013 1.01 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 198.777 214.293 0.93 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: recursive_fibonacci...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: recursive_fibonacci
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 1052.273 1128.069 0.93 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 156.014 172.113 0.91 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 156.31 171.337 0.91 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 156.462 166.476 0.94 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: math_operations_in_tight_for_loop...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: math_operations_in_tight_for_loop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 411.426 423.96 0.97 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 537.747 532.353 1.01 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 99.286 104.844 0.95 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 95.817 239.76 0.40 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: math_operations_in_tight_for_loop_fewer_tasks...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: math_operations_in_tight_for_loop_fewer_tasks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 413.681 415.961 0.99 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 514.021 505.234 1.02 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 108.644 117.702 0.92 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 106.84 260.724 0.41 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: math_operations_in_tight_for_loop_fan_in...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: math_operations_in_tight_for_loop_fan_in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 212.534 211.52 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 76.402 76.09 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 37.203 39.662 0.94 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 36.523 57.039 0.64 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: math_operations_in_tight_for_loop_reduction_tree...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: math_operations_in_tight_for_loop_reduction_tree
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 208.076 207.488 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 45.054 45.227 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 33.079 33.9 0.98 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 34.502 38.389 0.90 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: spin_between_run_calls...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: spin_between_run_calls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 353.553 382.373 0.92 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 180.401 197.119 0.92 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 205.374 222.315 0.92 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 214.819 197.579 1.09 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: mandelbrot_chunked...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: mandelbrot_chunked
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 257.289 256.815 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 34.395 34.058 1.01 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 34.241 34.922 0.98 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 35.191 35.273 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Overall performance results
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> : All passed Perf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> : All passed Perf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> : All passed Perf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> : All passed Perf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="part_b">part_b&lt;/h2>
&lt;p>在任务的 B 部分中，您将扩展您的 A 部分任务系统实现，以支持可能依赖于以前任务的任务的异步启动。这些任务间依赖关系创建了任务执行库必须遵守的调度约束。&lt;/p>
&lt;p>ITaskSystem 接口还有一个方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">virtual&lt;/span> &lt;span class="n">TaskID&lt;/span> &lt;span class="nf">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">deps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>RunAsyncWithDeps ()类似于 run () ，因为它也用于执行 num &lt;em>total&lt;/em> asks 任务的批量启动。但是，它与 run ()在许多方面有所不同&amp;hellip;&lt;/p>
&lt;h3 id="asynchronous-task-launch">Asynchronous Task Launch&lt;/h3>
&lt;p>首先，使用 runAsyncWithDeps ()创建的任务由任务系统与调用线程异步执行。&lt;/p>
&lt;p>这意味着 runAsyncWithDeps ()应该立即返回给调用方，即使任务尚未完成执行。&lt;/p>
&lt;p>该方法返回与此批量任务启动关联的唯一标识符。&lt;/p>
&lt;p>调用线程可以通过调用 sync ()来确定大容量任务启动的实际完成时间。&lt;/p>
&lt;p>&lt;code>virtual void sync() = 0;&lt;/code>&lt;/p>
&lt;p>只有当与之前所有批量任务启动关联的任务完成时，sync ()才返回给调用方。例如，考虑以下代码:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// assume taskA and taskB are valid instances of IRunnable...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">noDeps&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// empty vector
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ITaskSystem&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TaskSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bulk launch of 4 tasks
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">noDeps&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bulk launch of 8 tasks
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">noDeps&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// at this point tasks associated with launchA and launchB
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// may still be running
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">sync&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// at this point all 12 tasks associated with launchA and launchB
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// are guaranteed to have terminated
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如上面的注释中所述，在线程调用sync() runAsyncWithDeps() ) 的任务已完成。 准确地说， runAsyncWithDeps()告诉您的任务系统执行新的批量任务启动，但您的实现可以灵活地在下次调用sync()之前随时执行这些任务。 请注意，此规范意味着无法保证您的实现在从 launchB 启动任务之前先执行 launchA 中的任务！&lt;/p>
&lt;h3 id="support-for-explicit-dependencies">Support for Explicit Dependencies&lt;/h3>
&lt;p>runAsyncWithDeps()的第二个关键细节是它的第三个参数：TaskID 标识符向量，必须引用之前使用runAsyncWithDeps()启动的批量任务。 该向量指定当前批量任务启动中的任务所依赖的先前任务。 因此，在依赖向量中给出的启动中的所有任务完成之前，您的任务运行时无法开始执行当前批量任务启动中的任何任务！ 例如，考虑以下示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">noDeps&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// empty vector
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">depOnA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">depOnBC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ITaskSystem&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TaskSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">noDeps&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">depOnA&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">launchA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">depOnA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchC&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">depOnA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">depOnBC&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">launchB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">depOnBC&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">launchC&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskD&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">depOnBC&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">sync&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码有四个批量任务启动（taskA：128 个任务，taskB：2 个任务，taskC：6 个任务，taskD：32 个任务）。 请注意，任务 B 和任务 C 的启动取决于任务 A。 taskD 的批量启动 ( launchD ) 取决于launchB和launchC的结果。 因此，虽然您的任务运行时可以按任意顺序（包括并行）处理与launchB和launchC关联的任务，但这些启动中的所有任务必须在launchA的任务完成后开始执行，并且它们必须在运行时开始之前完成从launchD执行任何任务。&lt;/p>
&lt;p>我们可以通过任务图直观地说明这些依赖关系。 任务图是有向无环图 (DAG)，其中图中的节点对应于批量任务启动，从节点 X 到节点 Y 的边表示 Y 对 X 输出的依赖关系。上述代码的任务图是：
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="https://github.com/jeremyephron/asst2/raw/master/figs/task_graph.png" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>请注意，如果您在具有八个执行上下文的 Myth 计算机上运行上面的示例，则并行调度launchB和launchC中的任务的能力可能非常有用，因为单独的批量任务启动都不足以使用所有执行机器的资源。&lt;/p>
&lt;h3 id="task">Task&lt;/h3>
&lt;p>您必须从 A 部分扩展任务系统实现，才能正确实现TaskSystem::runAsyncWithDeps()和TaskSystem::sync() 。 与 A 部分一样，我们为您提供以下入门提示：&lt;/p>
&lt;ul>
&lt;li>It may be helpful to think about the behavior of runAsyncWithDeps() as pushing a record corresponding to the bulk task launch, or perhaps records corresponding to each of the tasks in the bulk task launch onto a &amp;ldquo;work queue&amp;rdquo;. Once the record to work to do is in the queue, runAsyncWithDeps() can return to the caller.&lt;/li>
&lt;li>The trick in this part of the assignment is performing the appropriate bookkeeping to track dependencies. What must be done when all the tasks in a bulk task launch complete? (This is the point when new tasks may become available to run.)&lt;/li>
&lt;li>It can be helpful to have two data structures in your implementation: (1) a structure representing tasks that have been added to the system via a call to runAsyncWithDeps(), but are not yet ready to execute because they depend on tasks that are still running (these tasks are &amp;ldquo;waiting&amp;rdquo; for others to finish) and (2) a &amp;ldquo;ready queue&amp;rdquo; of tasks that are not waiting on any prior tasks to finish and can safely be run as soon as a worker thread is available to process them.&lt;/li>
&lt;li>You need not worry about integer wrap around when generating unique task launch ids. We will not hit your task system with over 2^31 bulk task launches.&lt;/li>
&lt;li>You can assume all programs will either call only run() or only runAsyncWithDeps(); that is, you do not need to handle the case where a run() call needs to wait for all proceeding calls to runAsyncWithDeps() to finish.&lt;/li>
&lt;/ul>
&lt;p>在part_b/子目录中实现B部分实现，以与正确的参考实现（ part_b/runtasks_ref_* ）进行比较。&lt;/p></description></item><item><title>L2</title><link>https://ysyyhhh.github.io/blog/l2/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/l2/</guid><description>&lt;h2 id="并行程序">并行程序&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">denom&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sign&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">denom&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">number&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>转换成汇编后大致如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ld&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">addr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mul&lt;/span> &lt;span class="no">ri&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mul&lt;/span> &lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">可以看到每次循环都是独立的。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">对于最简单的是顺序执行。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">通过超线程(超标量处理器具有从单个指令流中提取多个指令的能力)可以提高性能。有时称指令级并行性。(&lt;/span>&lt;span class="nf">ILP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">Instruction&lt;/span> &lt;span class="no">Level&lt;/span> &lt;span class="no">Parallelism&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">但在这些汇编指令中必须顺序执行。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">因此实现指令级并行性是一个挑战。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">但即使是纯顺序执行的代码,也有很多方式使其运行更快(基于写代码的方式和编译器的智能程度).&lt;/span> &lt;span class="nf">Pentium&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="err">比如先取多条指令等&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">(有个黑匣子会预测分支,预测错误的话就会清空流水线,浪费时间)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">解决方法:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">1.&lt;/span> &lt;span class="err">通过&lt;/span>&lt;span class="nf">pthread编写并行性的程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">2.&lt;/span> &lt;span class="err">假设有一种语言可以表示并行性,编译器可以自动并行化程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">如:&lt;/span> &lt;span class="nf">forall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="no">i&lt;/span> &lt;span class="no">from&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">n-1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">自动并行化可能的解决方法:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">1.&lt;/span> &lt;span class="err">直接分为&lt;/span>&lt;span class="nf">k个线程&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">每个线程处理&lt;/span>&lt;span class="no">n&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="no">k个循环.&lt;/span> &lt;span class="err">然后将结果合并&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">2.&lt;/span> &lt;span class="err">在硬件上执行.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">有一堆性能较低但具有并行性的处理器时,&lt;/span> &lt;span class="err">也需要更多电力/时间来驱动很多信号从一端到另一端.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## CPU &amp;amp;&amp;amp; GPU
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">GPU将核心的概念带到了极致&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">抛弃了所有的分支预测&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">只是控制逻辑而不完成计算&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">对于上面的程序有垂直和水平两种分割方式:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">-&lt;/span> &lt;span class="err">垂直:&lt;/span> &lt;span class="err">每个线程处理一个循环&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">-&lt;/span> &lt;span class="err">水平:&lt;/span> &lt;span class="err">同时处理多个循环,&lt;/span> &lt;span class="err">如先同时进行所有的第一个乘法&lt;/span>&lt;span class="na">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## SIMD Single Instruction Multiple Data
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">假设我正在执行的多次操作之间没有依赖关系,都能够并行运行.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">a&lt;/span> &lt;span class="no">single&lt;/span> &lt;span class="no">instruction&lt;/span> &lt;span class="no">is&lt;/span> &lt;span class="no">applied&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">multiple&lt;/span> &lt;span class="no">data&lt;/span> &lt;span class="no">elements&lt;/span> &lt;span class="no">simultaneously.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">即:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">同时对8个数值和另一个地方的8个数值取出并进行加法.&lt;/span> &lt;span class="err">有时这些数值可以被称作向量.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">使用&lt;/span>&lt;span class="nf">AVX&lt;/span> &lt;span class="no">intrinsics的向量化程序&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">```&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="err">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">void&lt;/span> &lt;span class="no">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="no">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="no">terms&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">float&lt;/span>&lt;span class="p">*&lt;/span> &lt;span class="no">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">float&lt;/span>&lt;span class="p">*&lt;/span> &lt;span class="no">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="no">i&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="c1">; i &amp;lt; N; i+=8) {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">__m256&lt;/span> &lt;span class="no">origx&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_load_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;amp;&lt;/span>&lt;span class="no">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">i&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">__m256&lt;/span> &lt;span class="no">value&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">origx&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">__m256&lt;/span> &lt;span class="no">number&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">origx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">origx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">origx&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">float&lt;/span> &lt;span class="no">sign&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">__m256&lt;/span> &lt;span class="no">denom&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_set1_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="no">j&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="c1">; j &amp;lt; terms; j++) {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//value += sign * number / denom;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">__m256&lt;/span> &lt;span class="no">tmp&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_div_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">denom&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">tmp&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">tmp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">_mm256_set1_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">sign&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">value&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_add_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">tmp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">sign&lt;/span> &lt;span class="p">*&lt;/span>&lt;span class="err">=&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//denom *= (2*j+3)*(2*j+2);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">denom&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">denom&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">_mm256_set1_ps&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="no">j&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)*(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="no">j&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)))&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//number *= x[i] * x[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">number&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">origx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">origx&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="err">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">_mm256_store_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;amp;&lt;/span>&lt;span class="no">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">value&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//result[i] = value;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="err">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译成汇编后大致如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">vloadps&lt;/span> &lt;span class="no">xmm0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">addr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">vmulps&lt;/span> &lt;span class="no">xmm1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">xmm0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">xmm0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">vmulps&lt;/span> &lt;span class="no">xmm2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">xmm1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">xmm0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="no">vstoreps&lt;/span> &lt;span class="no">addr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">xmm2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">xmm0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>AVX代表高级矢量扩展, 256代表每次可以处理256位的数据, 也就是8个float.
有多个版本:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-md" data-lang="md">&lt;span class="line">&lt;span class="cl">AVX: 128位 = 4 &lt;span class="ge">* 4 *&lt;/span> 8 = 32字节
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AVX2: 256位 = 8 &lt;span class="ge">* 4 *&lt;/span> 8 = 32字节
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AVX512: 512位 = 16 &lt;span class="ge">* 4 *&lt;/span> 8 = 64字节
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>XMM寄存器是特殊的32字节 256位寄存器, 有16个, 从xmm0到xmm15. 用于支持vectorized SIMD指令.&lt;/p>
&lt;p>那么有没有办法让编译器自动将代码向量化呢?&lt;/p>
&lt;ul>
&lt;li>有,GCC的-O3选项可以自动向量化代码.&lt;/li>
&lt;/ul>
&lt;p>但只有非常结构化,精心编写的代码才能被自动向量化.&lt;/p>
&lt;h3 id="条件">条件&lt;/h3>
&lt;p>如果加入条件判断,如何向量化?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>SIMD可能的做法:
设置一个掩码, 用于标记哪些元素需要执行哪些不需要执行.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-md" data-lang="md">&lt;span class="line">&lt;span class="cl">x &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">0:&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">x &lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="s">-x:&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">翻转:&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">x &lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="s">x:&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但大多时候只保留了一半的效率,因为每次有可能只有一半的数据需要执行.
不过这很好的保证了一致性,因为分支结束后又回到了同一个执行路径.
即保持一致性,远离分歧.&lt;/p>
&lt;p>coherent execution: 所有的线程都执行相同的指令.&lt;/p>
&lt;p>divergent: a lack of instruction stream coherence.&lt;/p>
&lt;p>对于生成这些矢量操作,要么有聪明的编译器,要么就是有耐心的程序员.&lt;/p>
&lt;h3 id="simd-execution-on-many-modern-gpus">SIMD execution on many modern GPUs&lt;/h3>
&lt;p>SPMD: Single Program Multiple Data&lt;/p>
&lt;p>GPU给的不是SIMD,而是SPMD. 单个程序,多个数据. 意味着程序的不同部分可以执行不同的指令.&lt;/p>
&lt;p>在这之下,还是用SIMD来实现大部分逻辑,采用异构的方式来实现并行.&lt;/p>
&lt;p>但有n个加法, 即两个包含n个值的向量相加.
实际上不是所有单位都在等待计算.而是会先计算出如何分配到块中,底层块的实际大小是32, 32values而不是32byte. 这个被称作SIMD宽度,一般是8-32.&lt;/p>
&lt;h3 id="gpu和cpu的差别">GPU和CPU的差别&lt;/h3>
&lt;p>CPU i7:&lt;/p>
&lt;ul>
&lt;li>4核&lt;/li>
&lt;li>8 SIMD ALUs per core&lt;/li>
&lt;li>每秒大概几千次浮点运算&lt;/li>
&lt;/ul>
&lt;p>GPU: RTX 1080&lt;/p>
&lt;ul>
&lt;li>20 cores&lt;/li>
&lt;li>32 SIMD ALUs per core&lt;/li>
&lt;li>每秒大概8m次浮点运算&lt;/li>
&lt;/ul>
&lt;p>GPU的核心摒弃了分支预测等只用做control,因此可以有更多的ALU.填充进来.&lt;/p>
&lt;p>大概是80:1的原始计算能力差异.&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>三种方法实现并行计算&lt;/p>
&lt;p>多核CPU:&lt;/p>
&lt;ul>
&lt;li>线程级实现并行&lt;/li>
&lt;/ul>
&lt;p>SIMD:&lt;/p>
&lt;ul>
&lt;li>指令级并行&lt;/li>
&lt;li>通过向量化指令实现&lt;/li>
&lt;li>但依赖于事先知道执行的指令优先级顺序&lt;/li>
&lt;/ul>
&lt;p>Superscaler:
exploit ILP within an instruction stream&lt;/p>
&lt;h2 id="paart2-accessing-memory">paart2 accessing memory&lt;/h2>
&lt;p>Memory latency: 从CPU到内存的时间&lt;/p>
&lt;ul>
&lt;li>example: DRAM访问时间 100 cycles, 100ns&lt;/li>
&lt;/ul>
&lt;p>Memory bandwidth: 从内存到CPU的时间&lt;/p>
&lt;ul>
&lt;li>example: 20GB/s 其实不是很快&lt;/li>
&lt;/ul>
&lt;p>Stall: CPU等待内存的时间
当cpu试图进行读取而内存不可用时，就会停等知道内存可用.&lt;/p>
&lt;p>缓存就是为了解决Stall的问题.&lt;/p>
&lt;p>在多级缓存中,靠近核心的缓存是私有的.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l2/img/2023-10-05-16-43-06_hu18c235196594db696f84796cb1ead687_215427_6a724ed12fad9a3240b03da2a1c0ff6b.webp 400w,
/blog/l2/img/2023-10-05-16-43-06_hu18c235196594db696f84796cb1ead687_215427_9ceee60bd8fdd3eb63114e89b322d0b0.webp 760w,
/blog/l2/img/2023-10-05-16-43-06_hu18c235196594db696f84796cb1ead687_215427_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l2/img/2023-10-05-16-43-06_hu18c235196594db696f84796cb1ead687_215427_6a724ed12fad9a3240b03da2a1c0ff6b.webp"
width="760"
height="424"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
这样可以通过写入读出L2缓存的数据来实现通讯,而不需要经过DRAM.&lt;/p>
&lt;p>缓存对延迟和带宽都有帮助.&lt;/p>
&lt;h3 id="prefecthing-reduces-stalls">Prefecthing reduces stalls&lt;/h3>
&lt;p>硬件通常通过预取来&lt;strong>减少延迟&lt;/strong>.
即预测下一次可能会访问的数据,并将其提前读取到缓存中.
不过可能会造成信息泄露&lt;/p>
&lt;p>使用预取的效果:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l2/img/2023-10-05-16-47-27_hu9e755d86af4542e2c891b6ef523b2239_504134_f5783346b6eafcc279c7b7eadc75a246.webp 400w,
/blog/l2/img/2023-10-05-16-47-27_hu9e755d86af4542e2c891b6ef523b2239_504134_e1a197eee3ba4938657b7931766d1231.webp 760w,
/blog/l2/img/2023-10-05-16-47-27_hu9e755d86af4542e2c891b6ef523b2239_504134_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l2/img/2023-10-05-16-47-27_hu9e755d86af4542e2c891b6ef523b2239_504134_f5783346b6eafcc279c7b7eadc75a246.webp"
width="760"
height="556"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="multi-threading-reduces-stalls">Multi-threading reduces stalls&lt;/h3>
&lt;p>让多个线程交替进行, 如asst1/prog2的实现&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l2/img/2023-10-05-16-53-05_hu018724600a89671805482e5e14021481_143403_2c3960edeb7b7146e69b7397f368eed9.webp 400w,
/blog/l2/img/2023-10-05-16-53-05_hu018724600a89671805482e5e14021481_143403_ae5cc04b79da4d5c206e7798358b5dff.webp 760w,
/blog/l2/img/2023-10-05-16-53-05_hu018724600a89671805482e5e14021481_143403_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l2/img/2023-10-05-16-53-05_hu018724600a89671805482e5e14021481_143403_2c3960edeb7b7146e69b7397f368eed9.webp"
width="760"
height="284"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
这也是超线程的实现,在一个核心中多路复用多个指令流.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l2/img/2023-10-05-16-52-35_hu6c2acc8845dfbfbe4383d0d236adfe16_560224_3bc248fc2800b46d51b509a0fd52a08a.webp 400w,
/blog/l2/img/2023-10-05-16-52-35_hu6c2acc8845dfbfbe4383d0d236adfe16_560224_f27aeda0e160298c73ea9b46e9eef185.webp 760w,
/blog/l2/img/2023-10-05-16-52-35_hu6c2acc8845dfbfbe4383d0d236adfe16_560224_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l2/img/2023-10-05-16-52-35_hu6c2acc8845dfbfbe4383d0d236adfe16_560224_3bc248fc2800b46d51b509a0fd52a08a.webp"
width="760"
height="563"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>对于CPU&amp;amp;GPU, 谁来组织线程是不同的做法.(操作系统 or 硬件)&lt;/p>
&lt;p>通常情况下内存要比其他因素更加限制速度&lt;/p></description></item><item><title>L4 Parallel Programing basics</title><link>https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/</guid><description>&lt;p>主要用三种方式实现并行程序(没有进行真正的优化)&lt;/p>
&lt;p>例子 n-body simulation&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-08-15_hue48a4921cc49cf57e882ed55cfa33ec8_653223_300d6e55ae7158eb7f77967a00820153.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-08-15_hue48a4921cc49cf57e882ed55cfa33ec8_653223_6c1a606d891b45c87635608e28e74a79.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-08-15_hue48a4921cc49cf57e882ed55cfa33ec8_653223_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-08-15_hue48a4921cc49cf57e882ed55cfa33ec8_653223_300d6e55ae7158eb7f77967a00820153.webp"
width="760"
height="566"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>创建并行程序的过程&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-12-34_hu8ca133d8fdd22bace72d28bc0e9f928f_717995_d7d48a19c6b8d98d4bb025be7407106a.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-12-34_hu8ca133d8fdd22bace72d28bc0e9f928f_717995_becf2ea517713a91c8190995e7cc73a3.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-12-34_hu8ca133d8fdd22bace72d28bc0e9f928f_717995_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-12-34_hu8ca133d8fdd22bace72d28bc0e9f928f_717995_d7d48a19c6b8d98d4bb025be7407106a.webp"
width="760"
height="569"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="1-decomposition">1. Decomposition&lt;/h3>
&lt;p>主要思想: 创造至少足够的任务让所有的处理单元都有事情做&lt;/p>
&lt;p>Amdahl&amp;rsquo;s Law: 串行部分的比例越大, 并行程序的加速比就越小,因为增加处理单元的数量并不能减少串行部分的时间&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-17-14_hu6b8d57c08ba6ce2d6ea30fe8baefa3d4_659251_0e9ae484b47d7b98ce1bcb4d1368d085.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-17-14_hu6b8d57c08ba6ce2d6ea30fe8baefa3d4_659251_f894a7fc4c613f87e7daa182688bfbb2.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-17-14_hu6b8d57c08ba6ce2d6ea30fe8baefa3d4_659251_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-17-14_hu6b8d57c08ba6ce2d6ea30fe8baefa3d4_659251_0e9ae484b47d7b98ce1bcb4d1368d085.webp"
width="760"
height="570"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-25-06_hu46e8e5fd6fd42d95218680164502ccdb_474311_26ca6d976940fa163bdb00a72d487ab2.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-25-06_hu46e8e5fd6fd42d95218680164502ccdb_474311_7d794c4862846294ba020113fcbd3a99.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-25-06_hu46e8e5fd6fd42d95218680164502ccdb_474311_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-25-06_hu46e8e5fd6fd42d95218680164502ccdb_474311_26ca6d976940fa163bdb00a72d487ab2.webp"
width="760"
height="562"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>分解的任务更多是程序员的工作, 编译器还无法很好的帮助我们&lt;/p>
&lt;h3 id="2assignment">2.Assignment&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-27-56_huac3192b45d26432b1fbf3a13b42c3714_518393_f4b6891d6e8836e5b078c7b6aec5aadd.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-27-56_huac3192b45d26432b1fbf3a13b42c3714_518393_65d2c13a7bb828fa5c068bca90139c7a.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-27-56_huac3192b45d26432b1fbf3a13b42c3714_518393_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-27-56_huac3192b45d26432b1fbf3a13b42c3714_518393_f4b6891d6e8836e5b078c7b6aec5aadd.webp"
width="760"
height="568"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>需要考虑让每个处理单元尽可能减少沟通.&lt;/p>
&lt;p>有一种方法是随机分配,但会最大化沟通
还有一个极端是全部由一个处理单元完成,但是这样就没有并行了&lt;/p>
&lt;p>这是另一个挑战&lt;/p>
&lt;p>分配可以静态也可以动态发生&lt;/p>
&lt;p>静态: 在程序开始时就确定好.
动态: 在程序运行时分配
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-32-26_hue221ecbb5d082188d974279744465ae6_739363_469ecdbd4a9b8454fd47173ba40269f8.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-32-26_hue221ecbb5d082188d974279744465ae6_739363_b3390ceebc8efeab9b8139e9845c32b3.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-32-26_hue221ecbb5d082188d974279744465ae6_739363_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-32-26_hue221ecbb5d082188d974279744465ae6_739363_469ecdbd4a9b8454fd47173ba40269f8.webp"
width="760"
height="562"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>静态分配的问题:&lt;/p>
&lt;ul>
&lt;li>无法适应不同的输入(如:工作量不均匀)&lt;/li>
&lt;li>无法适应不同的处理单元数量&lt;/li>
&lt;/ul>
&lt;p>动态分配: 通过消息传递来实现, 每个处理单元都有一个队列, 用来存放需要处理的任务(tasks). 当一个处理单元完成了一个任务, 就从队列中取出一个任务来处理
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-41-07_hu6c85e4ef3ddfa256fd5b280b3f1947d5_610384_1ec3e9269d1b9769ff7549ca3e7ff991.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-41-07_hu6c85e4ef3ddfa256fd5b280b3f1947d5_610384_435b8b910d0cf444fe612cbec0958114.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-41-07_hu6c85e4ef3ddfa256fd5b280b3f1947d5_610384_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-41-07_hu6c85e4ef3ddfa256fd5b280b3f1947d5_610384_1ec3e9269d1b9769ff7549ca3e7ff991.webp"
width="760"
height="526"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>缺点:
队列需要同步, 会有额外的开销&lt;/p>
&lt;h3 id="3-orchestration-编排阶段">3. Orchestration 编排阶段&lt;/h3>
&lt;p>编排的目标是:
减少沟通和同步的成本, preserve &lt;strong>locality&lt;/strong> of data reference, reduce overhead.&lt;/p>
&lt;h3 id="4mapping">4.mapping&lt;/h3>
&lt;p>这是程序员最不需要关心的, 交给编译器就好了
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-48-55_hu7d458683065d371a53e4f3bbced0dc5b_674886_dd70cb98c5d235d4af085a8b85d717eb.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-48-55_hu7d458683065d371a53e4f3bbced0dc5b_674886_d0427d53091c240e55a9032cbafa5c74.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-48-55_hu7d458683065d371a53e4f3bbced0dc5b_674886_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-48-55_hu7d458683065d371a53e4f3bbced0dc5b_674886_dd70cb98c5d235d4af085a8b85d717eb.webp"
width="760"
height="574"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="example">example&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-28-08_hu4bc1ad631611432311f7608937c4d974_532911_378f26ab2469867248ef1ea890a944f5.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-28-08_hu4bc1ad631611432311f7608937c4d974_532911_2b961a92c582af81689691d4ee62333d.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-28-08_hu4bc1ad631611432311f7608937c4d974_532911_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-28-08_hu4bc1ad631611432311f7608937c4d974_532911_378f26ab2469867248ef1ea890a944f5.webp"
width="760"
height="568"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>顺序程序:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-29-38_huef0e497a0a3be02bd46e8912ca469521_552238_b0a20d7e5de93d8bfdaa4a330e9fd80e.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-29-38_huef0e497a0a3be02bd46e8912ca469521_552238_eb0f8d018192eebde00a35c3f9fa78f1.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-29-38_huef0e497a0a3be02bd46e8912ca469521_552238_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-29-38_huef0e497a0a3be02bd46e8912ca469521_552238_b0a20d7e5de93d8bfdaa4a330e9fd80e.webp"
width="760"
height="579"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>那么如何并行执行呢?&lt;/p>
&lt;h3 id="step1-identify-dependenciesproblem-decomposition">Step1: identify dependencies(problem decomposition)&lt;/h3>
&lt;p>因为会迭代很多次,所以会引起不同迭代次数的数据竞争.&lt;/p>
&lt;p>有一种划分方法是沿着对角线:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-32-11_hua770f7c3378cf5e52779686442875f74_850357_eac19ef97378e0332e37b6120c1b7460.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-32-11_hua770f7c3378cf5e52779686442875f74_850357_11f821c7ea9de7edb4def82251e9efdf.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-32-11_hua770f7c3378cf5e52779686442875f74_850357_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-32-11_hua770f7c3378cf5e52779686442875f74_850357_eac19ef97378e0332e37b6120c1b7460.webp"
width="760"
height="617"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>不足之处是:&lt;/p>
&lt;ul>
&lt;li>有些对角线很短, 负载不均衡&lt;/li>
&lt;li>需要额外的计算(对角线下标)&lt;/li>
&lt;/ul>
&lt;p>另一种方法是滚动数组:
用两个数组, 一个用来存放当前迭代的结果, 一个用来存放上一次迭代的结果&lt;/p>
&lt;p>这样计算时不会有数据竞争.&lt;/p>
&lt;p>但很多人不希望有额外的内存开销.&lt;/p>
&lt;p>事实上使用的是红黑排序.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-37-00_hub6902c6359b72f71195b1f839828355e_586963_5d8ef9fd25d94e005487943ac9894f81.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-37-00_hub6902c6359b72f71195b1f839828355e_586963_34f7f339aea72b213c8a668102485760.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-37-00_hub6902c6359b72f71195b1f839828355e_586963_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-37-00_hub6902c6359b72f71195b1f839828355e_586963_5d8ef9fd25d94e005487943ac9894f81.webp"
width="760"
height="566"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>每次迭代只更新红色的部分, 然后再翻转.
这样就不需要复制数组了.&lt;/p>
&lt;h3 id="step2-assign-tasks">Step2: assign tasks&lt;/h3>
&lt;p>我们不把每一个元素作为一个任务,而是把每一行作为一个任务.&lt;/p>
&lt;p>同时:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-41-36_hubdceb7f300441a8766ba1431277c7cc4_755276_711347c7e817fe638550eebcc34b2faf.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-41-36_hubdceb7f300441a8766ba1431277c7cc4_755276_accd9f6717d58f6ab57f5c5748534b83.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-41-36_hubdceb7f300441a8766ba1431277c7cc4_755276_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-41-36_hubdceb7f300441a8766ba1431277c7cc4_755276_711347c7e817fe638550eebcc34b2faf.webp"
width="760"
height="569"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>红黑排序有一个同步的步骤: 必须等待所有的红色部分都计算完毕, 才能开始计算黑色部分.&lt;/p>
&lt;p>为了最小化沟通, 相邻行作为捆包是更好的选择, 这样只在更新边界时需要沟通.&lt;/p>
&lt;h3 id="三种实现方法">三种实现方法&lt;/h3>
&lt;h4 id="data-parallel-expression-of-solver">Data-parallel expression of solver&lt;/h4>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-45-17_hu05b94560b10f4189a08c6cb5f48bfd71_676413_6071d1eabf8eb456c38c7ab568c29c85.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-45-17_hu05b94560b10f4189a08c6cb5f48bfd71_676413_bd6ad13f2f63aba99999c5aa7836e481.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-45-17_hu05b94560b10f4189a08c6cb5f48bfd71_676413_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-45-17_hu05b94560b10f4189a08c6cb5f48bfd71_676413_6071d1eabf8eb456c38c7ab568c29c85.webp"
width="760"
height="568"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>这个的特点是系统做了很多工作, 程序只需要指定哪里需要并行.&lt;/p>
&lt;h4 id="shared-address-space-code">shared-address-space code&lt;/h4>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-07_hud4acc75f44d57621c38bcef37ecf69ad_501385_5ac6b61cbfefc82f7f4c733828aa1374.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-07_hud4acc75f44d57621c38bcef37ecf69ad_501385_4fee6b612cf87991254c9c57b904ce52.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-07_hud4acc75f44d57621c38bcef37ecf69ad_501385_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-07_hud4acc75f44d57621c38bcef37ecf69ad_501385_5ac6b61cbfefc82f7f4c733828aa1374.webp"
width="760"
height="576"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>version1 :
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-41_hu397a5c725eab7f2ec6ba703b751c7761_745157_533e533992488749606b9438d64b007c.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-41_hu397a5c725eab7f2ec6ba703b751c7761_745157_0b75e1a598b6dc90f1d0988f46b9c18f.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-41_hu397a5c725eab7f2ec6ba703b751c7761_745157_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-41_hu397a5c725eab7f2ec6ba703b751c7761_745157_533e533992488749606b9438d64b007c.webp"
width="760"
height="577"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但是有个锁会使得程序变慢
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-51-52_hue0bce16ea2bc879cd28793bae80b6fdb_858650_008576a8562e19a9b68a706920f134f5.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-51-52_hue0bce16ea2bc879cd28793bae80b6fdb_858650_162d8768bd53d226b92aa1e3c8b841ae.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-51-52_hue0bce16ea2bc879cd28793bae80b6fdb_858650_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-51-52_hue0bce16ea2bc879cd28793bae80b6fdb_858650_008576a8562e19a9b68a706920f134f5.webp"
width="760"
height="564"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>version2:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-53-12_hu36b9d35db431827e24b4b081d064641f_693240_d83b71c546167384983d9a1ef9afcab6.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-53-12_hu36b9d35db431827e24b4b081d064641f_693240_0b8c610136d7c28529574edd2eba5bbd.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-53-12_hu36b9d35db431827e24b4b081d064641f_693240_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-53-12_hu36b9d35db431827e24b4b081d064641f_693240_d83b71c546167384983d9a1ef9afcab6.webp"
width="760"
height="574"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>有三个barrier来保证红黑顺序
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-54-07_hudaa8f328867329c6ba35530421eebfde_512012_66c627513b8313419cea65ed7635bd4f.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-54-07_hudaa8f328867329c6ba35530421eebfde_512012_b8e8413bb73b3bc460895c08c728e194.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-54-07_hudaa8f328867329c6ba35530421eebfde_512012_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-54-07_hudaa8f328867329c6ba35530421eebfde_512012_66c627513b8313419cea65ed7635bd4f.webp"
width="760"
height="545"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
为什么是三个呢?&lt;/p>
&lt;p>每一部分都要被分割&lt;/p>
&lt;p>最后一个是为了diff的分割
第一个是为了myDiff的分割
第二个是为了diff的分割&lt;/p>
&lt;p>所以可以使用diff数组&lt;/p>
&lt;p>version3:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-57-40_hu0d1996844693b134151c8d82ee5425bd_617614_38e643162361d034d8e8ed437c443f84.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-57-40_hu0d1996844693b134151c8d82ee5425bd_617614_5ce102c5ce45f0dbc1dac41b6096bf7b.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-57-40_hu0d1996844693b134151c8d82ee5425bd_617614_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-57-40_hu0d1996844693b134151c8d82ee5425bd_617614_38e643162361d034d8e8ed437c443f84.webp"
width="760"
height="566"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>barrier的问题:
barrier还是有点笨重, 这会强制所有线程到一个起跑线
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-59-07_huaecac9eeb7b6b74f7510d557e9b6e26a_572209_41fd0f188cd297c382afe2bc81211c7e.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-59-07_huaecac9eeb7b6b74f7510d557e9b6e26a_572209_8f25e59fa55106ba0b7456f62971f92b.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-59-07_huaecac9eeb7b6b74f7510d557e9b6e26a_572209_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-59-07_huaecac9eeb7b6b74f7510d557e9b6e26a_572209_41fd0f188cd297c382afe2bc81211c7e.webp"
width="760"
height="584"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但如果有更精确的信息, 只需要等待依赖的线程就好了&lt;/p>
&lt;h4 id="message-passing-code">message-passing code&lt;/h4>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-21-00-57_hue70b1faf829cca87f081e5bc424c7628_594886_3dcdaa90f3dc0b6edb968742fde6788b.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-00-57_hue70b1faf829cca87f081e5bc424c7628_594886_5f9edad42ee570536dbb24cbbf0e2313.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-00-57_hue70b1faf829cca87f081e5bc424c7628_594886_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-21-00-57_hue70b1faf829cca87f081e5bc424c7628_594886_3dcdaa90f3dc0b6edb968742fde6788b.webp"
width="760"
height="574"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>需要有额外的划分,来存储相邻处理器的数据&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-21-02-04_hu4c6d7b1bda54071ab3467deea4424d30_799693_194c426e9f4bd30f2c0f56092d87ed1d.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-02-04_hu4c6d7b1bda54071ab3467deea4424d30_799693_201679da15e21745058c91d98624422d.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-02-04_hu4c6d7b1bda54071ab3467deea4424d30_799693_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-21-02-04_hu4c6d7b1bda54071ab3467deea4424d30_799693_194c426e9f4bd30f2c0f56092d87ed1d.webp"
width="760"
height="579"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>同时,在最后计算diff时,需要等待所有的处理器都计算完毕.
这里选中了一个processor zero来计算diff, 其他的处理器都发送自己的diff给它.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-21-04-12_hu40d62451cdfd210f1a8f99acfc52e78e_920652_34bd425bc4ebe88a31f4957864cd7fe4.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-04-12_hu40d62451cdfd210f1a8f99acfc52e78e_920652_a4c392a2099e53a7ae0b5f3bc237eb21.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-04-12_hu40d62451cdfd210f1a8f99acfc52e78e_920652_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-21-04-12_hu40d62451cdfd210f1a8f99acfc52e78e_920652_34bd425bc4ebe88a31f4957864cd7fe4.webp"
width="760"
height="562"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但沟通时有可能发生死锁. 因为每个处理器都在等待其他处理器的消息, 但是自己的消息又没有发送出去.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-21-06-02_huc087edeeaded9dcd70e781a8caf24d42_565877_7664ca781070f75ef349661a85c63958.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-06-02_huc087edeeaded9dcd70e781a8caf24d42_565877_68b90074dc227e55c1a49326a35e5e23.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-06-02_huc087edeeaded9dcd70e781a8caf24d42_565877_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-21-06-02_huc087edeeaded9dcd70e781a8caf24d42_565877_7664ca781070f75ef349661a85c63958.webp"
width="760"
height="574"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>所以需要分奇偶来发送&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-21-07-24_hu36e0868a51b260305696d6733ba21ec5_677923_a6befff3da24916d55d41b8bb71c4d75.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-07-24_hu36e0868a51b260305696d6733ba21ec5_677923_1053a357a9c5aa6773e8e220d458f49a.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-07-24_hu36e0868a51b260305696d6733ba21ec5_677923_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-21-07-24_hu36e0868a51b260305696d6733ba21ec5_677923_a6befff3da24916d55d41b8bb71c4d75.webp"
width="760"
height="590"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p></description></item><item><title>L5 Work distribution and scheduling</title><link>https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/</guid><description>&lt;h2 id="三种分配策略的总结">三种分配策略的总结&lt;/h2>
&lt;h3 id="静态分配">静态分配&lt;/h3>
&lt;p>优点:&lt;/p>
&lt;ul>
&lt;li>几乎没有运行时的开销(关于分配)&lt;/li>
&lt;/ul>
&lt;p>缺点:&lt;/p>
&lt;ul>
&lt;li>不总是均匀的分配任务&lt;/li>
&lt;/ul>
&lt;p>什么时候使用:&lt;/p>
&lt;ul>
&lt;li>(最简单的例子) 当知道每个任务的工作量相当的时候&lt;/li>
&lt;li>当每个任务的工作量是可预测的,但不一定相等的时候&lt;/li>
&lt;/ul>
&lt;p>半静态分配&lt;/p>
&lt;ul>
&lt;li>场景: 当工作量会随时间发生改变,当变化比较慢时.(任务量不可预测)&lt;/li>
&lt;li>做法: 定期的重新分配任务
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-17-21_huc4d2be410d647016a3206e85b20b8291_1107621_5880584d2300544cd55841de43263248.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-17-21_huc4d2be410d647016a3206e85b20b8291_1107621_68fb3d31df2ca327d35ff36a5b6491e8.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-17-21_huc4d2be410d647016a3206e85b20b8291_1107621_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-17-21_huc4d2be410d647016a3206e85b20b8291_1107621_5880584d2300544cd55841de43263248.webp"
width="760"
height="574"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;h3 id="动态分配">动态分配&lt;/h3>
&lt;p>场景: 当每个任务的工作量或者任务的数量是不可预测的时候&lt;/p>
&lt;p>每个计算单元都要去获取任务&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-25-21_hua6a3c077cced5abdb9b7bbaa576a7ec8_874748_13253e7a7b20fe3aefc71947e01ae37c.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-25-21_hua6a3c077cced5abdb9b7bbaa576a7ec8_874748_7546cdc1ebd3007df3f8be6534e94e4f.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-25-21_hua6a3c077cced5abdb9b7bbaa576a7ec8_874748_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-25-21_hua6a3c077cced5abdb9b7bbaa576a7ec8_874748_13253e7a7b20fe3aefc71947e01ae37c.webp"
width="760"
height="552"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但这样的实现, 每次的任务可能会很少,
会使得更多的开销在争夺锁(获取任务的锁)上面.&lt;/p>
&lt;p>有一个办法是一次性计算更多的任务.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-26-57_huf835b5eac9d37b49ce3c30a88aace822_752046_764dee7c21fd261f1ea42dd03deaac94.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-26-57_huf835b5eac9d37b49ce3c30a88aace822_752046_d2c2f29cd40410d16e80729d86a1a85a.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-26-57_huf835b5eac9d37b49ce3c30a88aace822_752046_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-26-57_huf835b5eac9d37b49ce3c30a88aace822_752046_764dee7c21fd261f1ea42dd03deaac94.webp"
width="760"
height="535"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但分配更多的任务可能会导致负载不平衡.&lt;/p>
&lt;p>因此需要在分配任务数量上要找一个平衡, 不花费过多的时间在争夺锁上, 也不会导致负载不平衡.&lt;/p>
&lt;p>&lt;strong>Schedule long tasks first&lt;/strong>
但如果有一个大任务在最后，将出现如下情况：
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-53-07_hu91d4bd1fcd6b2d3a4a21166e27be8ac1_532596_a319b7fbc769ba12a45b529df1c65503.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-53-07_hu91d4bd1fcd6b2d3a4a21166e27be8ac1_532596_dbd94cdf2d21f71697636c8d4408b78a.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-53-07_hu91d4bd1fcd6b2d3a4a21166e27be8ac1_532596_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-53-07_hu91d4bd1fcd6b2d3a4a21166e27be8ac1_532596_a319b7fbc769ba12a45b529df1c65503.webp"
width="760"
height="567"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>因此，如果知道有一个大任务，可以提前处理，而不是放到最后一个.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-56-01_hubaef0c3f89c826d5b1d5dd6890516517_550046_ac355852c6e4b1b13a70e8840c1e0592.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-56-01_hubaef0c3f89c826d5b1d5dd6890516517_550046_ec03d531275ed3b43bc45e5ddf89fe21.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-56-01_hubaef0c3f89c826d5b1d5dd6890516517_550046_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-56-01_hubaef0c3f89c826d5b1d5dd6890516517_550046_ac355852c6e4b1b13a70e8840c1e0592.webp"
width="760"
height="566"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h4 id="work-stealing">Work stealing&lt;/h4>
&lt;p>当一个计算单元没有任务的时候, 从其他计算单元那里偷取任务.&lt;/p>
&lt;p>实现的一些问题:&lt;/p>
&lt;p>1.从哪个线程开始偷取任务呢?
有随机的, 也有从最后一个开始偷取的.&lt;/p>
&lt;p>2.应该偷取多少任务呢?
应该偷取尽可能多一些,这样可以减少偷取任务的次数.&lt;/p>
&lt;p>3.怎样检测一个计算单元是否有任务呢?
可能会循环遍历,&lt;/p>
&lt;p>4.使用本地队列(分布式队列)会更快(在有互斥锁的情况下)&lt;/p>
&lt;p>还有一种方式是使用特殊的数据结构来存储任务间的依赖关系, 从而可以在任务完成的时候, 自动的调度下一个任务.
缺点是额外开销
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-32-31_hu882ba279ae3cd004bfdf46a1a891da1b_594941_ef134a9b1bd58c72a760187990732c21.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-32-31_hu882ba279ae3cd004bfdf46a1a891da1b_594941_c2a7dd664f517f7aea7b9a0f8edb78b1.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-32-31_hu882ba279ae3cd004bfdf46a1a891da1b_594941_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-32-31_hu882ba279ae3cd004bfdf46a1a891da1b_594941_ef134a9b1bd58c72a760187990732c21.webp"
width="760"
height="564"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="常见的并行编程模式">常见的并行编程模式&lt;/h2>
&lt;p>循环
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-42-32_hua668693ef93510a897eb16b96202656c_595050_512dd4ec637d5bdea75de7f988ef7ae6.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-42-32_hua668693ef93510a897eb16b96202656c_595050_d23d15f8a4c93c3c3ca1dbe1f069c539.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-42-32_hua668693ef93510a897eb16b96202656c_595050_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-42-32_hua668693ef93510a897eb16b96202656c_595050_512dd4ec637d5bdea75de7f988ef7ae6.webp"
width="760"
height="571"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>创建显示线程
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-43-32_hu787070f973929fd30cb38c336bbde5e3_506261_1bd6943adefdb492091091335d4f6790.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-43-32_hu787070f973929fd30cb38c336bbde5e3_506261_fd4d25059248640d13177979d28dfbe2.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-43-32_hu787070f973929fd30cb38c336bbde5e3_506261_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-43-32_hu787070f973929fd30cb38c336bbde5e3_506261_1bd6943adefdb492091091335d4f6790.webp"
width="760"
height="575"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>递归时的并行&lt;/p>
&lt;p>递归可以编写出简单的代码, 但是递归的并行化是比较困难的.&lt;/p>
&lt;p>因为递归的并行化需要在递归的每一层都要进行并行化, 并且需要在每一层都要进行同步.&lt;/p>
&lt;p>但只要有独立的子问题, 就可以创造很多潜在的并行性.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-45-15_hue5ded81e796c68dee0b0618a6e0920dd_758799_83e684b20ad601fbffd05f681e98b070.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-45-15_hue5ded81e796c68dee0b0618a6e0920dd_758799_f656576fbd7c80b31534d8c55418bd72.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-45-15_hue5ded81e796c68dee0b0618a6e0920dd_758799_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-45-15_hue5ded81e796c68dee0b0618a6e0920dd_758799_83e684b20ad601fbffd05f681e98b070.webp"
width="760"
height="576"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="fork-join-pattern">Fork-Join pattern&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-47-18_hu0f4ed4729d5da33b2852ec7891c96ad1_815835_a69bafaace4900b4f73d3c5cf6d9df30.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-47-18_hu0f4ed4729d5da33b2852ec7891c96ad1_815835_56c44942eb8197b75e566cfc48810c8c.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-47-18_hu0f4ed4729d5da33b2852ec7891c96ad1_815835_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-47-18_hu0f4ed4729d5da33b2852ec7891c96ad1_815835_a69bafaace4900b4f73d3c5cf6d9df30.webp"
width="760"
height="567"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>cilk_spawn: 会创建一个新的线程, 并且在新的线程中执行函数, 并且不会阻塞当前的线程.&lt;/p>
&lt;p>cilk_sync: 会等待所有的子线程执行完毕, 并且会阻塞当前的线程.&lt;/p>
&lt;p>每个函数的结尾隐式的调用了cilk_sync.&lt;/p>
&lt;p>example:
有一个主线程+fork的线程.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-49-40_hu6b2a13e8c61edb007acb8c68ac6cc24d_722419_3330ee920e588071cd2cc18ca84067e5.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-49-40_hu6b2a13e8c61edb007acb8c68ac6cc24d_722419_9e9c62ec66af9b2387fa7b6c712555a7.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-49-40_hu6b2a13e8c61edb007acb8c68ac6cc24d_722419_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-49-40_hu6b2a13e8c61edb007acb8c68ac6cc24d_722419_3330ee920e588071cd2cc18ca84067e5.webp"
width="760"
height="573"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>快排的例子:
在规模较小的时候, 使用串行的快排. 这样可以减少线程的创建和销毁的开销.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-53-13_hub5a36810580b89ed0b40df5af3f5878e_872565_77c644f2c45c972574415e31fe8b84ab.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-53-13_hub5a36810580b89ed0b40df5af3f5878e_872565_9e81ba5d6c1f18ad17e02f7b2e7199ab.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-53-13_hub5a36810580b89ed0b40df5af3f5878e_872565_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-53-13_hub5a36810580b89ed0b40df5af3f5878e_872565_77c644f2c45c972574415e31fe8b84ab.webp"
width="760"
height="560"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>不要忽略了抽象和实现的区别.&lt;/strong>
spawn不是生成一个具体的线程, 而是声明这里有一个可以并行的任务.&lt;/p>
&lt;p>任务的数量至少需要比硬件线程多,但也不能大于100倍.
8倍是一个比较好的选择.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-01-49_huac690f525b910e3151d41f9e83b20825_725705_68336c190f129e2e078badf9a4caf4bc.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-01-49_huac690f525b910e3151d41f9e83b20825_725705_3b3a6a1947f775d0efca7c18769e335e.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-01-49_huac690f525b910e3151d41f9e83b20825_725705_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-01-49_huac690f525b910e3151d41f9e83b20825_725705_68336c190f129e2e078badf9a4caf4bc.webp"
width="760"
height="500"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="cilk的实现">Cilk的实现&lt;/h2>
&lt;p>假设我们要去实现clik_spawn 和 cilk_sync
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-04-28_huef2c8d13f3726a6bfffc8a2b7080cdd9_608019_2241e98cd40fefed3853c0a484c7dd60.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-04-28_huef2c8d13f3726a6bfffc8a2b7080cdd9_608019_cf4047faa49cace03c1989649aefba72.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-04-28_huef2c8d13f3726a6bfffc8a2b7080cdd9_608019_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-04-28_huef2c8d13f3726a6bfffc8a2b7080cdd9_608019_2241e98cd40fefed3853c0a484c7dd60.webp"
width="760"
height="566"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>线程池的实现(CILB):&lt;/p>
&lt;p>thread1 需要找到一种方法来发现有新的任务可以执行.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-15-52_hu6062ae083bda93fd6d07b13dc77a746e_457683_347386d8c0afd36698d48e122a0c1825.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-15-52_hu6062ae083bda93fd6d07b13dc77a746e_457683_b919d83502c83d6232a5d7d03bf95db5.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-15-52_hu6062ae083bda93fd6d07b13dc77a746e_457683_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-15-52_hu6062ae083bda93fd6d07b13dc77a746e_457683_347386d8c0afd36698d48e122a0c1825.webp"
width="760"
height="593"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>所以thread 0不能简单的调用foo, 它的作用是执行foo.&lt;/p>
&lt;p>但需要在执行foo前,把特殊的东西放入工作队列中.&lt;/p>
&lt;p>此时如果另一个线程突然变得空闲, 它就可以从工作队列中获取任务.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-26-10_hu0eab66eeb24e199a2ed3f547cb3fdbbd_614646_2713f0abd710a06c367e46d38effce5b.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-26-10_hu0eab66eeb24e199a2ed3f547cb3fdbbd_614646_df1c7581b35efeb6316a776aaa66ab1c.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-26-10_hu0eab66eeb24e199a2ed3f547cb3fdbbd_614646_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-26-10_hu0eab66eeb24e199a2ed3f547cb3fdbbd_614646_2713f0abd710a06c367e46d38effce5b.webp"
width="760"
height="564"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>为什么不把foo放入队列, 直接执行bar呢?(上面是执行foo bar放入队列)&lt;/p>
&lt;p>这涉及到 continuation first(child stealing) 和 child first(continuation stealing) 的问题.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-34-20_hufa1a658f74f9b4a90809f48194848857_696273_fe7736de0427a88b81b2c7d0be7754ad.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-34-20_hufa1a658f74f9b4a90809f48194848857_696273_cb1ddf6b4689a69077e0506ca9f22a9f.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-34-20_hufa1a658f74f9b4a90809f48194848857_696273_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-34-20_hufa1a658f74f9b4a90809f48194848857_696273_fe7736de0427a88b81b2c7d0be7754ad.webp"
width="760"
height="567"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-36-22_huf67bed5371ecbc7f84d380e6087a42a4_776363_40fcf8e5060f66ffb6e517fa52d3f196.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-36-22_huf67bed5371ecbc7f84d380e6087a42a4_776363_ecff36fcf2da6712dd8f81729708df45.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-36-22_huf67bed5371ecbc7f84d380e6087a42a4_776363_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-36-22_huf67bed5371ecbc7f84d380e6087a42a4_776363_40fcf8e5060f66ffb6e517fa52d3f196.webp"
width="760"
height="570"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>continuation first会导致线程0的大量工作排队.(广度优先队列)
child first会导致其他线程把下一个任务偷走时, 会导致线程0的工作队列为空.(深度优先队列)&lt;/p>
&lt;p>实际上child first是合理的.(在递归中是最合适的)&lt;/p>
&lt;p>在递归程序中,会先将所有深度的任务放入队列中.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-48-23_hu66dd5b38ec1cb04147fc744f7a6b03af_704850_1c76cdef873f64be703a63df2b13a2f4.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-48-23_hu66dd5b38ec1cb04147fc744f7a6b03af_704850_46b3b02be3b190b15285021529e61fd4.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-48-23_hu66dd5b38ec1cb04147fc744f7a6b03af_704850_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-48-23_hu66dd5b38ec1cb04147fc744f7a6b03af_704850_1c76cdef873f64be703a63df2b13a2f4.webp"
width="760"
height="567"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>按照之前优先执行大任务的策略, 其他线程会优先从队列顶部(先入的)中偷取任务.
因为在分而治之的算法中, 大任务会被分解成小任务, 因此大任务会先被放入队列中.&lt;/p>
&lt;p>实际中使用了双端队列:&lt;/p>
&lt;ul>
&lt;li>从队列头部获取任务&lt;/li>
&lt;li>从队列尾部放入任务&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-52-42_hu052208d2ad01dc27d0149b8c74cf57ec_616787_49c97faec0e975c38ed21774d1caec1a.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-52-42_hu052208d2ad01dc27d0149b8c74cf57ec_616787_7bf3fcf44cbc5d63c27fb37d53c448c5.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-52-42_hu052208d2ad01dc27d0149b8c74cf57ec_616787_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-52-42_hu052208d2ad01dc27d0149b8c74cf57ec_616787_49c97faec0e975c38ed21774d1caec1a.webp"
width="760"
height="571"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但之前有一个问题: 很多队列,该从哪个队列中获取任务呢?
也许是随机的. 偷取任务的时候, 不随机的更可能会引起负载不均衡.&lt;/p>
&lt;p>本地线程访问的是本地队列的尾部, 偷取时也是放入尾部.(偷其他队列的头部)
这样也有利于空间局部性.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-58-04_huef94ca176ae555045fd9f51c7aa174d2_800473_b158461eeda1557071d3b4c63c8e3fe8.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-58-04_huef94ca176ae555045fd9f51c7aa174d2_800473_9d3eab37557ed64ca33376a218896efe.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-58-04_huef94ca176ae555045fd9f51c7aa174d2_800473_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-58-04_huef94ca176ae555045fd9f51c7aa174d2_800473_b158461eeda1557071d3b4c63c8e3fe8.webp"
width="760"
height="567"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>那么如何实现同步呢?&lt;/p>
&lt;p>Example1: stalling join policy
拖延政策: 所有我创建的任务都必须完成后, 我才能继续执行.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-01-00_hu7eda749a9f38115f90e5a19b6e792dce_643232_b716a896fce22ab605c4290cace396e0.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-01-00_hu7eda749a9f38115f90e5a19b6e792dce_643232_5b91177fc136336170132f872072d0ec.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-01-00_hu7eda749a9f38115f90e5a19b6e792dce_643232_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-01-00_hu7eda749a9f38115f90e5a19b6e792dce_643232_b716a896fce22ab605c4290cace396e0.webp"
width="760"
height="572"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Example2: greedy join policy(cilk的实现方法)&lt;/p>
&lt;p>有一个跟踪数据结构,但那个东西可以四处移动.&lt;/p>
&lt;p>最后一个完成的线程会偷走这个数据结构&lt;/p>
&lt;p>所以一旦最后一个任务完成, 就可以继续执行了.&lt;/p>
&lt;p>这样不会浪费时间等待同步.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-04-26_hu803153c610f9240dc37b9df9cd593271_620138_b52217a08b08c5bd606846c2329641a3.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-04-26_hu803153c610f9240dc37b9df9cd593271_620138_140ed442354f7ce867bd06440a9c0b7d.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-04-26_hu803153c610f9240dc37b9df9cd593271_620138_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-04-26_hu803153c610f9240dc37b9df9cd593271_620138_b52217a08b08c5bd606846c2329641a3.webp"
width="760"
height="570"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>第一个方法实现起来更简单,但速度更慢.
因为它总是首线程只等待其他线程完成.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-09-58_hu4b706f34d698b4c5ca13bee75ebcc6f0_719518_a9b876038607b0430400742d4c1f6534.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-09-58_hu4b706f34d698b4c5ca13bee75ebcc6f0_719518_9d10c292ac70375ca23c48a9647fc5ab.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-09-58_hu4b706f34d698b4c5ca13bee75ebcc6f0_719518_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-09-58_hu4b706f34d698b4c5ca13bee75ebcc6f0_719518_a9b876038607b0430400742d4c1f6534.webp"
width="760"
height="570"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-10-26_hu503fb65c817ae1cedfa6301188230a3a_411373_6fa573df606795d8a26e44006a6d0209.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-10-26_hu503fb65c817ae1cedfa6301188230a3a_411373_1efd01f734283ebc6881240856c4c447.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-10-26_hu503fb65c817ae1cedfa6301188230a3a_411373_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-10-26_hu503fb65c817ae1cedfa6301188230a3a_411373_6fa573df606795d8a26e44006a6d0209.webp"
width="760"
height="421"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p></description></item><item><title>L6</title><link>https://ysyyhhh.github.io/blog/l6/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/l6/</guid><description>&lt;p>虚拟文件系统&lt;/p>
&lt;p>/proc/cpuinfo&lt;/p>
&lt;ul>
&lt;li>model name&lt;/li>
&lt;li>cpu MHz - 频率&lt;/li>
&lt;li>cache size - 缓存大小&lt;/li>
&lt;li>siblings - 逻辑cpu数量&lt;/li>
&lt;li>processor - 逻辑cpu编号&lt;/li>
&lt;li>cpu cores - 物理cpu数量&lt;/li>
&lt;li>core id - 物理cpu编号&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>这样查看的cpu数量很多&lt;/p>
&lt;p>siblings是逻辑cpu的数量&lt;/p>
&lt;p>cpu cores是物理cpu的数量&lt;/p>
&lt;p>为什么报告的processor数量是40而siblings是20呢?
因为报告的processor包括超线程的逻辑cpu. 这样操作系统就可以直接根据逻辑cpu的数量来分配任务.&lt;/p>
&lt;p>Memory bandwidth - 内存带宽
Power consumption - 功耗
能源消耗实际上是一个很大的问题.
Intel code name - 代号
Functional units&lt;/p>
&lt;ul>
&lt;li>latency - 延迟&lt;/li>
&lt;li>issue time - 发射时间&lt;/li>
&lt;li>capacity - 容量&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="http://www.agner.org/optimize/microarchitecture.pdf" target="_blank" rel="noopener">微处理架构&lt;/a>&lt;/p>
&lt;h2 id="function-units">function units&lt;/h2>
&lt;ul>
&lt;li>latency - 延迟，执行一个指令所需要的时钟周期数(不包括等待)&lt;/li>
&lt;li>issue time - 发射时间，指令发射到执行所需要的时钟周期数(包括等待)&lt;/li>
&lt;li>capacity - 容量&lt;/li>
&lt;/ul>
&lt;p>优化的地方:&lt;/p>
&lt;ul>
&lt;li>搞清楚到底哪些代码是执行次数最多的(内部循环)(对实际使用情况来说)&lt;/li>
&lt;li>基本运算消耗时间: 除法 &amp;gt; 乘法 &amp;gt; 加法 &amp;gt; 位移&lt;/li>
&lt;/ul>
&lt;p>基本的程序:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-22-45_hu85293fdaa222549af0ddcf65b2bf7284_658635_5ab47a1042335e55b8938e5994f8e82a.webp 400w,
/blog/l6/img/2023-10-17-20-22-45_hu85293fdaa222549af0ddcf65b2bf7284_658635_e757e717e52c37dae010bd08781bf275.webp 760w,
/blog/l6/img/2023-10-17-20-22-45_hu85293fdaa222549af0ddcf65b2bf7284_658635_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-22-45_hu85293fdaa222549af0ddcf65b2bf7284_658635_5ab47a1042335e55b8938e5994f8e82a.webp"
width="760"
height="362"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>合并重复计算的简单的提升:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-23-02_hudb10c716aa5853d9906cab8e836be839_490764_e61947fe8d466c3906248b8957252142.webp 400w,
/blog/l6/img/2023-10-17-20-23-02_hudb10c716aa5853d9906cab8e836be839_490764_139df3e7b8e363317855fbed39089e3f.webp 760w,
/blog/l6/img/2023-10-17-20-23-02_hudb10c716aa5853d9906cab8e836be839_490764_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-23-02_hudb10c716aa5853d9906cab8e836be839_490764_e61947fe8d466c3906248b8957252142.webp"
width="760"
height="363"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-24-13_hud8148b776d8e4bb3b0215a9ad8cf6f95_349342_738cfac8407fe76b9bd88d182792930c.webp 400w,
/blog/l6/img/2023-10-17-20-24-13_hud8148b776d8e4bb3b0215a9ad8cf6f95_349342_63cfbdb2168372034d159f8ad1ec2a56.webp 760w,
/blog/l6/img/2023-10-17-20-24-13_hud8148b776d8e4bb3b0215a9ad8cf6f95_349342_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-24-13_hud8148b776d8e4bb3b0215a9ad8cf6f95_349342_738cfac8407fe76b9bd88d182792930c.webp"
width="760"
height="389"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>将除法次数减少,(不依赖于内层循环的变量的计算拿出来)&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-24-42_hu3b7220bf0b4c94aedaa80f1185888619_507170_9095d26daddab8794efd73a5792f17c3.webp 400w,
/blog/l6/img/2023-10-17-20-24-42_hu3b7220bf0b4c94aedaa80f1185888619_507170_5ff7d026f194e0d2cd56e0d7a8225adb.webp 760w,
/blog/l6/img/2023-10-17-20-24-42_hu3b7220bf0b4c94aedaa80f1185888619_507170_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-24-42_hu3b7220bf0b4c94aedaa80f1185888619_507170_9095d26daddab8794efd73a5792f17c3.webp"
width="760"
height="383"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>循环展开 loop unrolling&lt;/p>
&lt;p>如果每一次循环都要进行一次是否终止的测试,开销会很大.(尤其是一次循环的计算 相比于 循环次数来说很小 时)&lt;/p>
&lt;p>所以处理器从简单的策略开始,如预测循环的次数. 大部分都是基于统计预测的.&lt;/p>
&lt;p>如果可以预测循环的次数,就可以将循环展开. 每次循环多执行4 或 8 或&amp;hellip;次原来循环做的事情.&lt;/p>
&lt;p>但展开时不一定均匀,&lt;/p>
&lt;p>uniform可以使得循环展开的更好.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-35-48_huf0320ca0eb40e0cc3f8446f56f4bb928_788707_4a9e00eea4a0274ea68f3d4c2a674fbf.webp 400w,
/blog/l6/img/2023-10-17-20-35-48_huf0320ca0eb40e0cc3f8446f56f4bb928_788707_2f730b863ed7aa2fc673db2504200996.webp 760w,
/blog/l6/img/2023-10-17-20-35-48_huf0320ca0eb40e0cc3f8446f56f4bb928_788707_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-35-48_huf0320ca0eb40e0cc3f8446f56f4bb928_788707_4a9e00eea4a0274ea68f3d4c2a674fbf.webp"
width="760"
height="459"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-39-50_hu45d93cab90138384d4beff72db4bc99e_596600_e755b84003b152ad93396cb9cfcd83e7.webp 400w,
/blog/l6/img/2023-10-17-20-39-50_hu45d93cab90138384d4beff72db4bc99e_596600_800800c4cbdaf41f00d08bd8121bf03d.webp 760w,
/blog/l6/img/2023-10-17-20-39-50_hu45d93cab90138384d4beff72db4bc99e_596600_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-39-50_hu45d93cab90138384d4beff72db4bc99e_596600_e755b84003b152ad93396cb9cfcd83e7.webp"
width="760"
height="452"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>为什么8维向量获得了超过8倍的加速呢?
因为uniform, 原本要做8次的判断,现在只需要做一次.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-42-45_hudc3741a959af0eae57271f90b977df00_280278_baf35b7a782eb349a2031ec1a434ece4.webp 400w,
/blog/l6/img/2023-10-17-20-42-45_hudc3741a959af0eae57271f90b977df00_280278_93cfbec29770590a36c25754a7afcd12.webp 760w,
/blog/l6/img/2023-10-17-20-42-45_hudc3741a959af0eae57271f90b977df00_280278_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-42-45_hudc3741a959af0eae57271f90b977df00_280278_baf35b7a782eb349a2031ec1a434ece4.webp"
width="760"
height="306"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>常规优化提升了15倍
向量优化提升了5.4倍
总计提升了82倍&lt;/p>
&lt;p>向量化很好且是free的,但不能忽略了传统的优化&lt;/p>
&lt;p>传统的优化(213 program)使得速度提升了三倍&lt;/p>
&lt;p>要做到极致的优化,就比如要花3个星期的时间在编码风格上, 最后30分钟花在向量化上.&lt;/p>
&lt;p>但要看情况来决定编码风格的优化.
因为如果我们编写的代码不是执行次数最多(如内核,场景仿真,高频), 那么可能更需要的是可读性.&lt;/p>
&lt;p>可读性变差 可能会导致bug很容易被引入, 并且非常不容易被发现和维护.&lt;/p></description></item><item><title>L7</title><link>https://ysyyhhh.github.io/blog/l7/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/l7/</guid><description>&lt;p>GPU&lt;/p>
&lt;h2 id="图形渲染">图形渲染&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l7/img/2023-10-18-22-45-21_huf26ab9cd16631e333ae7f2c3af77eb19_132208_4715ef0685f9d6c48ae4ca6038102849.webp 400w,
/blog/l7/img/2023-10-18-22-45-21_huf26ab9cd16631e333ae7f2c3af77eb19_132208_d0293c4adf5cdc95de68440138589056.webp 760w,
/blog/l7/img/2023-10-18-22-45-21_huf26ab9cd16631e333ae7f2c3af77eb19_132208_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l7/img/2023-10-18-22-45-21_huf26ab9cd16631e333ae7f2c3af77eb19_132208_4715ef0685f9d6c48ae4ca6038102849.webp"
width="686"
height="519"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>图像中的每个对象都有很自然的并行性。&lt;/p></description></item><item><title>Why parallelism? Why efficiency?</title><link>https://ysyyhhh.github.io/blog/why-parallelism-why-efficiency/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/why-parallelism-why-efficiency/</guid><description>&lt;h2 id="parallelism">Parallelism&lt;/h2>
&lt;p>加速比 Speed up 是指：
程序在单处理器上运行的时间 / 程序在多处理器上运行的时间&lt;/p>
&lt;p>我们一般会期望用两倍的硬件得到两倍的速度提升,但是实际上并不是这样的。&lt;/p>
&lt;p>制约性能提升可能的因素有:&lt;/p>
&lt;ul>
&lt;li>资源分配不均匀&lt;/li>
&lt;li>通信开销&lt;/li>
&lt;li>短板效应&lt;/li>
&lt;li>共享资源读写冲突&lt;/li>
&lt;/ul>
&lt;p>为什么要去了解硬件？&lt;/p>
&lt;ul>
&lt;li>什么是限制性能的因素？&lt;/li>
&lt;li>导致性能瓶颈的原因是什么？&lt;/li>
&lt;/ul>
&lt;h2 id="efficiency">Efficiency&lt;/h2>
&lt;p>fast != efficient&lt;/p>
&lt;ul>
&lt;li>什么是效率？
尽可能地利用资源，减少浪费&lt;/li>
&lt;/ul>
&lt;p>比如按时间租用服务器。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>并行程序的挑战：&lt;/p>
&lt;ul>
&lt;li>负载均衡 Load balance&lt;/li>
&lt;li>通信延迟 Communication latency&lt;/li>
&lt;li>集体工作时，真正用于计算的时间很少&lt;/li>
&lt;/ul></description></item></channel></rss>