<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home | Ysyy's</title><link>https://ysyyhhh.github.io/</link><atom:link href="https://ysyyhhh.github.io/index.xml" rel="self" type="application/rss+xml"/><description>Home</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Tue, 24 Oct 2023 00:00:00 +0000</lastBuildDate><image><url>https://ysyyhhh.github.io/media/logo.svg</url><title>Home</title><link>https://ysyyhhh.github.io/</link></image><item><title>6.5840 Lab 1: MapReduce</title><link>https://ysyyhhh.github.io/blog/6.5840-lab-1-mapreduce/</link><pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/6.5840-lab-1-mapreduce/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>在这个实验中，你将构建一个 MapReduce 系统。你将实现一个工作节点进程，调用应用程序的 Map 和 Reduce 函数，处理文件的读写，以及一个协调器进程，向工作节点分发任务，并处理失败的工作节点。你将构建类似于 &lt;a href="https://pdos.csail.mit.edu/6.824/labs/lab-mr.html" target="_blank" rel="noopener">MapReduce 论文&lt;/a>中描述的系统。（注意：&lt;strong>这个实验使用“协调器”而不是论文中的“主节点”。&lt;/strong>）&lt;/p>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>准备工作:
&lt;a href="https://pdos.csail.mit.edu/6.824/labs/go.html" target="_blank" rel="noopener">安装Go&lt;/a>
&lt;a href="https://git-scm.com/" target="_blank" rel="noopener">安装Git&lt;/a>&lt;/p>
&lt;p>获取项目:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone git://g.csail.mit.edu/6.5840-golabs-2024 6.5840
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> 6.824
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 输出为 Makefile src&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们为你提供了一个简单的顺序 MapReduce 实现，位于 src/main/mrsequential.go 中。
它一次只在单个进程中运行一个 Map 和一个 Reduce。&lt;/p>
&lt;p>我们还为你提供了几个 MapReduce 应用程序：在 &lt;code>mrapps/wc.go&lt;/code> 中是单词计数，而在 &lt;code>mrapps/indexer.go&lt;/code> 中是文本索引器。你可以按顺序运行单词计数如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 生成 wc.so 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go build -buildmode&lt;span class="o">=&lt;/span>plugin ../mrapps/wc.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除 mr-out* 文件 这是输出文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm mr-out*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 运行 mrsequential.go 使用 wc.so 插件处理 pg*.txt 文件, 这是提供的线性处理程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pg*.txt 是输入文件, 包含了一些文本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go run mrsequential.go wc.so pg*.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看输出文件 mr-out-0 的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">more mr-out-0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Go 将其输出保留在文件 mr- out-0中，输入来自名为 pg-xxx.txt 的文本文件。&lt;/p>
&lt;p>可以随意借用 mrSequential.go 的代码。您还应该查看 mrapps/wc.go，看看 MapReduce 应用程序代码是什么样的。&lt;/p>
&lt;h2 id="任务">任务&lt;/h2>
&lt;p>你的任务是实现一个分布式的 MapReduce，包括两个程序，协调器和工作节点。将只有一个协调器进程，以及一个或多个并行执行的工作节点进程。在一个真实的系统中，工作节点可能会在一堆不同的机器上运行，但是对于这个实验，你会将它们全部运行在单个机器上。工作节点将通过 RPC 与协调器通信。&lt;/p>
&lt;p>每个工作节点进程都会循环询问协调器要一个任务，从一个或多个文件中读取任务的输入，执行任务，将任务的输出写入一个或多个文件，然后再次向协调器请求一个新的任务。&lt;/p>
&lt;p>如果一个工作节点在合理的时间内（在这个实验中，使用十秒）没有完成它的任务，协调器应该注意到，并将相同的任务分配给另一个工作节点。&lt;/p>
&lt;p>协调器和 worker 的“ main”例程位于 main/mrCollaborator.go 和 main/mrworker.go 中; 不要更改这些文件。&lt;/p>
&lt;p>只修改mr/coordinator.go, mr/worker.go, and mr/rpc.go&lt;/p>
&lt;h3 id="示例">示例&lt;/h3>
&lt;p>下面是如何在单词计数 MapReduce 应用程序上运行代码的方法。首先，确保单词计数插件是新构建的:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">go build -buildmode&lt;span class="o">=&lt;/span>plugin ../mrapps/wc.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm mr-out*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go run mrcoordinator.go pg-*.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 pg-.txt 参数是输入文件；每个文件对应一个“分片”，是一个 Map 任务的输入。&lt;/p>
&lt;p>然后,在一个或多个其他窗口中，运行一些工作节点：
&lt;code>go run mrworker.go wc.so&lt;/code>&lt;/p>
&lt;p>在&lt;code>mr-out-*&lt;/code>文件中，可以单词计数的输出。&lt;/p>
&lt;p>当coordinator完成所有任务后, 会输出如下内容:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cat mr-out-* &lt;span class="p">|&lt;/span> sort &lt;span class="p">|&lt;/span> more
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试">测试&lt;/h3>
&lt;p>我们在 main/test-mr.sh 中为你提供了一个测试脚本。
这些测试检查当给定 pg-xxx.txt 文件作为输入时，wc 和 indexer MapReduce 应用程序是否产生正确的输出。
测试还会检查你的实现是否并行运行 Map 和 Reduce 任务，并且你的实现是否能够从在运行任务时崩溃的工作节点中恢复。&lt;/p>
&lt;p>运行测试脚本的方法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">bash test-mr.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>tips:&lt;/p>
&lt;blockquote>
&lt;p>如果现在直接执行mrcoordinator会一直卡在那, 因为&lt;code>mr/coordinator.go&lt;/code>中的Done函数没有被实现.
一直返回false, 无法结束任务.
如果想先测试一下流程,直接把&lt;code>mr/coordinator.go&lt;/code>中的&lt;code>Done&lt;/code>函数改成&lt;code>return true&lt;/code>就可以了.&lt;/p>
&lt;/blockquote>
&lt;p>这个测试脚本会输出到 &lt;code>mr-out-X&lt;/code>中&lt;/p>
&lt;p>如果全部完成了,可以看到输出的内容:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">*** Starting wc test.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- wc test: PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Starting indexer test.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- indexer test: PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Starting map parallelism test.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- map parallelism test: PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Starting reduce parallelism test.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- reduce parallelism test: PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Starting job count test.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- job count test: PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Starting early &lt;span class="nb">exit&lt;/span> test.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- early &lt;span class="nb">exit&lt;/span> test: PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Starting crash test.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- crash test: PASS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** PASSED ALL TESTS
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="一些可以忽略的问题">一些可以忽略的问题&lt;/h3>
&lt;p>&lt;code>rpc.Register: method &amp;quot;Done&amp;quot; has 1 input parameters; needs exactly three&lt;/code>
这个
将协调器注册为 RPC 服务器检查它的所有方法是否适合 RPC (有3个输入) ;
我们知道RPC并没有调用 Done。&lt;/p>
&lt;p>另外，根据你终止工作进程的策略，你可能会看到一些形式的错误。
&lt;code> dialing:dial unix /var/tmp/5840-mr-501: connect: connection refused&lt;/code>
每个测试可以看到一些这样的消息; 当协调器退出后，工作者无法与协调器 RPC 服务器联系时，就会出现这些消息。&lt;/p>
&lt;h2 id="a-few-rules">A few rules&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Map 阶段应该将中间键分成 nReduce 个 reduce 任务的桶，其中 nReduce 是 reduce 任务的数量 &amp;ndash; 这是 main/mrcoordinator.go 传递给 MakeCoordinator() 的参数。每个 Mapper 应该为 Reduce 任务创建 nReduce 个中间文件以供使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Worker 的实现应该将第 X 个 reduce 任务的输出放入文件 mr-out-X 中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mr-out-X 文件应该包含一个 Reduce 函数输出的行。这一行应该用 Go 的 &amp;ldquo;%v %v&amp;rdquo; 格式生成，调用时传入键和值。在 main/mrsequential.go 中找到被注释为 &amp;ldquo;这是正确的格式&amp;rdquo; 的行。如果你的实现与这个格式相差太远，测试脚本会失败。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>你可以修改 mr/worker.go、mr/coordinator.go 和 mr/rpc.go。你可以临时修改其他文件进行测试，但确保你的代码与原始版本一起工作；我们将使用原始版本进行测试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Worker 应该将中间 Map 输出放在当前目录中的文件中，以便稍后的 Reduce 任务读取它们作为输入。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>main/mrcoordinator.go 期望 mr/coordinator.go 实现一个 Done() 方法，在 MapReduce 作业完全完成时返回 true；此时，mrcoordinator.go 将退出。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当作业完全完成时，工作进程应该退出。实现这一点的一个简单方法是使用 call() 的返回值：如果工作节点无法联系到协调器，它可以假设协调器已经退出，因为作业已经完成，所以工作节点也可以终止。根据你的设计，你可能还会发现有一个“请退出”的伪任务对协调器给工作节点很有帮助。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="hints">Hints&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://pdos.csail.mit.edu/6.824/labs/guidance.html" target="_blank" rel="noopener">指南页面&lt;/a>上有一些关于开发和调试的提示。&lt;/li>
&lt;li>开始的一种方法是修改 mr/worker.go 中的 Worker()，向协调器发送一个 RPC 请求任务。然后修改协调器以响应一个尚未启动的 Map 任务的文件名。然后修改工作节点以读取该文件并调用应用程序的 Map 函数，就像在 mrsequential.go 中一样。&lt;/li>
&lt;li>应用程序的 Map 和 Reduce 函数是在运行时使用 Go 插件包加载的，文件的名称以 .so 结尾。&lt;/li>
&lt;li>如果你改变了 mr/ 目录中的任何内容，你可能需要重新构建你使用的任何 MapReduce 插件，例如使用 go build -buildmode=plugin ../mrapps/wc.go。&lt;/li>
&lt;li>这个实验依赖于&lt;strong>工作节点共享文件系统&lt;/strong>。当所有工作节点运行在同一台机器上时，这很简单，但如果工作节点在不同的机器上运行，则需要像 GFS 这样的全局文件系统。&lt;/li>
&lt;li>中间文件的一个合理命名约定是 mr-X-Y，其中 X 是 Map 任务编号，Y 是 reduce 任务编号。&lt;/li>
&lt;li>工作节点的 Map 任务代码将需要一种方法来将&lt;strong>中间键/值对存储在文件中&lt;/strong>，以便在 reduce 任务期间正确读取回来。一种可能性是使用 Go 的 encoding/json 包。要将键/值对以 JSON 格式写入到打开的文件中：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">enc&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewEncoder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">kv&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">enc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">kv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>并读取回来：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dec&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewDecoder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">kv&lt;/span> &lt;span class="nx">KeyValue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">kv&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">kva&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">kva&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">kv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>你的工作节点的 Map 部分可以使用 ihash(key) 函数（在 worker.go 中）来选择给定键的 reduce 任务。&lt;/li>
&lt;li>你可以从 mrsequential.go 中偷一些代码来读取 Map 输入文件，对 Map 和 Reduce 之间的中间键/值对进行排序，并将 Reduce 输出存储在文件中。&lt;/li>
&lt;li>作为一个 RPC 服务器的协调器将是并发的；不要忘记锁定共享数据。&lt;/li>
&lt;li>使用 Go 的竞争检测器，使用 go run -race。test-mr.sh 在开头有一条注释，告诉你如何用 -race 运行它。当我们评估你的实验时，我们不会使用竞争检测器。&lt;strong>尽管如此，如果你的代码有竞争条件，即使没有竞争检测器，也有很大可能会在我们测试时失败&lt;/strong>。&lt;/li>
&lt;li>工作节点有时需要等待，例如在最后一个 Map 完成之前不能开始 Reduce。一种可能性是让工作节点定期向协调器请求工作，在每个请求之间使用 time.Sleep() 进行睡眠。另一种可能性是让协调器中相应的 RPC 处理程序具有等待循环，可以使用 time.Sleep() 或 sync.Cond 进行等待。Go 在自己的线程中运行每个 RPC 的处理程序，因此一个处理程序在等待时不会阻止协调器处理其他 RPC。&lt;/li>
&lt;li>协调器不能可靠地区分崩溃的工作节点、仍然存活但由于某种原因停滞不前的工作节点以及执行但速度太慢以至于无用的工作节点。你能做的最好的事情是让协调器等待一段时间，然后放弃并将任务重新分配给另一个工作节点。对于这个实验，让协调器等待十秒；之后，&lt;strong>协调器应该假设工作节点已经死亡&lt;/strong>（当然，它可能没有）。&lt;/li>
&lt;li>如果选择实现备份任务（第 3.6 节），请注意我们测试你的代码在工作节点执行任务而不崩溃时不安排多余的任务。备份任务应该只在一段相对较长的时间（例如，10 秒）之后才被安排。&lt;/li>
&lt;li>为了测试崩溃恢复，你可以使用 mrapps/crash.go 应用程序插件。它会在 Map 和 Reduce 函数中随机退出。&lt;/li>
&lt;li>为了确保在崩溃的情况下没有人观察到部分写入的文件，MapReduce 论文提到了使用临时文件并在完全写入后以原子方式重命名它的技巧。你可以使用 ioutil.TempFile（或者如果你正在运行 Go 1.17 或更高版本，则可以使用 os.CreateTemp）来创建临时文件，并使用 os.Rename 来原子地重命名它。&lt;/li>
&lt;li>test-mr.sh 在子目录 mr-tmp 中运行所有进程，所以如果出了问题，你想查看中间文件或输出文件，请查看那里。可以随意暂时修改 test-mr.sh，在失败的测试后退出，这样脚本就不会继续测试（并覆盖输出文件）。&lt;/li>
&lt;li>test-mr-many.sh 连续多次运行 test-mr.sh，这样做可以帮助你发现低概率的错误。它接受一个参数，指定运行测试的次数。你不应该并行运行多个 test-mr.sh 实例，因为协调器会重用相同的套接字，导致冲突。&lt;/li>
&lt;li>Go RPC 只发送字段名称以大写字母开头的结构字段。子结构体也必须具有大写的字段名称。&lt;/li>
&lt;li>在调用 RPC 的 call() 函数时，应答结构体应包含所有默认值。RPC 调用应该像这样：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">reply&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">SomeType&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">reply&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>在调用之前不设置任何 reply 字段。如果传递具有非默认字段的 reply 结构体，则 RPC 系统可能会静默返回不正确的值。&lt;/li>
&lt;/ul>
&lt;h2 id="挑战">挑战&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>实现你自己的 MapReduce 应用程序（参见 mrapps/* 中的示例），例如，分布式 Grep（MapReduce 论文第 2.3 节）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>让你的 MapReduce 协调器和工作节点在不同的机器上运行，就像在实际中一样。你需要设置你的 RPC 以通过 TCP/IP 进行通信，而不是 Unix 套接字（参见 Coordinator.server() 中的注释行），并使用共享文件系统进行文件读写。例如，你可以 ssh 进入麻省理工学院的多个 Athena 集群机器，它们使用 AFS 共享文件；或者你可以租用几个 AWS 实例，并使用 S3 进行存储。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>lab2 key value server</title><link>https://ysyyhhh.github.io/blog/lab2-key-value-server/</link><pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/lab2-key-value-server/</guid><description/></item><item><title>MapReduce: Simplified Data Processing on Large Clusters</title><link>https://ysyyhhh.github.io/blog/mapreduce-simplified-data-processing-on-large-clusters/</link><pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/mapreduce-simplified-data-processing-on-large-clusters/</guid><description>&lt;p>MapReduce: 一种用于大规模数据处理的简化并行计算模型&lt;/p>
&lt;p>引用: Jeffrey Dean and Sanjay Ghemawat. 2008. MapReduce: simplified data processing on large clusters. Commun. ACM 51, 1 (January 2008), 107–113. &lt;a href="https://doi.org/10.1145/1327452.1327492" target="_blank" rel="noopener">https://doi.org/10.1145/1327452.1327492&lt;/a>&lt;/p>
&lt;p>论文: [MapReduce: Simplified Data Processing on Large Clusters](&lt;a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener">https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf&lt;/a>&lt;/p>
&lt;h2 id="摘要">摘要&lt;/h2>
&lt;p>MapReduce 是一个用于处理和生成大数据集的编程模型和相关实现。&lt;/p>
&lt;p>用户需要指定一个 map 函数来处理键/值对，生成一组中间键/值对，还有一个 reduce 函数来合并与同一个中间键相关联的所有中间值。&lt;/p>
&lt;p>许多现实世界的任务都可以用这个模型来表达，就像论文中所示的那样。以&lt;strong>这种函数式风格编写的程序会自动并行化&lt;/strong>，并在一大群廉价机器上执行。运行时系统负责处理输入数据的分区细节，调度程序在一组机器上的执行，处理机器故障，并管理所需的机器间通信。&lt;/p>
&lt;p>这使得没有任何并行和分布式系统经验的程序员可以轻松利用大型分布式系统的资源。&lt;/p>
&lt;p>我们的 MapReduce 实现运行在一大群廉价机器上，而且具有高度可扩展性：典型的 MapReduce 计算在成千上万台机器上处理着数百 TB 的数据。程序员发现这个系统易于使用：已经实现了数百个 MapReduce 程序，并且每天有上千个 MapReduce 作业在 Google 的集群上执行。&lt;/p>
&lt;h2 id="1-介绍">1. 介绍&lt;/h2>
&lt;p>在过去的五年里，作者和谷歌的许多其他人实现了数百种专用计算，处理大量原始数据，例如爬取的文档、网页请求日志等，以计算各种派生数据，例如倒排索引、网页文档的图结构的各种表示、每个主机爬取的页面数量摘要，给定日中最常见的查询集等等。大多数&lt;strong>这样的计算在概念上都很简单&lt;/strong>。但是，输入数据通常很大，计算必须分布在数百甚至数千台机器上才能在合理的时间内完成。&lt;strong>如何并行化计算、分布数据以及处理故障等问题，使原本简单的计算变得复杂&lt;/strong>，需要大量的复杂代码来解决这些问题。&lt;/p>
&lt;p>针对这种复杂性，我们设计了一个新的抽象，&lt;strong>允许我们表达我们试图执行的简单计算，但隐藏了并行化、容错、数据分布和负载平衡等混乱的细节在一个库&lt;/strong>中。我们的抽象受到Lisp和许多其他函数式语言中存在的map和reduce原语的启发。&lt;/p>
&lt;p>我们意识到，我们的大多数计算涉及将map操作应用于输入中的每个逻辑“记录”，以计算一组中间键/值对，然后将reduce操作应用于所有共享相同键的值，以适当地组合派生数据。我们使用具有&lt;strong>用户指定的map和reduce操作的函数模型，可以轻松地并行化大型计算，并使用重新执行作为容错的主要机制&lt;/strong>。&lt;/p>
&lt;p>这项工作的主要贡献是一个简单而强大的接口，可以实现大规模计算的自动并行化和分发，结合了该接口的一个实现，在大规模PC集群上实现了高性能。&lt;/p>
&lt;ul>
&lt;li>第2节描述了基本编程模型并给出了几个示例。&lt;/li>
&lt;li>第3节描述了针对我们基于集群的计算环境定制的MapReduce接口的实现。&lt;/li>
&lt;li>第4节描述了我们发现有用的编程模型的几个细化。&lt;/li>
&lt;li>第5节对我们的实现在各种任务中的性能进行了测量。&lt;/li>
&lt;li>第6节探讨了在谷歌内部使用MapReduce的情况，包括我们将其用作重写生产索引系统的基础的经验。&lt;/li>
&lt;li>第7节讨论了相关和未来的工作。&lt;/li>
&lt;/ul>
&lt;h2 id="2-编程模型">2. 编程模型&lt;/h2>
&lt;p>编程模型计算接受一组输入键/值对，并产生一组输出键/值对。MapReduce库的用户将计算表示为两个函数：Map和Reduce。&lt;/p>
&lt;p>用户编写的Map函数接受一个输入对，并生成一组中间键/值对。MapReduce库将所有与相同中间键I关联的中间值组合在一起，并将它们传递给Reduce函数。&lt;/p>
&lt;p>Reduce函数也由用户编写，接受一个中间键I和该键的一组值。它将这些值合并在一起，形成可能更小的一组值。通常，每次调用Reduce都只产生零个或一个输出值。中间值通过迭代器提供给用户的reduce函数。这使我们能够处理太大而无法放入内存的值列表。&lt;/p>
&lt;h3 id="21-示例">2.1 示例&lt;/h3>
&lt;p>下面考虑在大量文档集合中计算每个单词出现次数的问题。用户将编写类似以下伪代码的代码:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">文档名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">文档内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">each&lt;/span> &lt;span class="n">word&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EmitIntermediate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">单词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">与key关联的值的迭代器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">each&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">ParseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AsString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Map函数将文档名和内容作为输入，并为每个单词w生成一组中间键/值对。对于每个单词，我们发出一个中间键/值对，其中键是单词，值是字符串“1”。&lt;/p>
&lt;p>reduce函数将为特定单词发出的所有计数相加在一起。&lt;/p>
&lt;p>此外，用户编写代码来填写一个mapreduce规范对象，其中包含输入和输出文件的名称，以及可选的调优参数。&lt;/p>
&lt;p>然后，用户调用MapReduce函数，将规范对象传递给它。用户的代码与MapReduce库（用C++实现）链接在一起。&lt;/p>
&lt;p>此示例的完整程序文本:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 本节包含一个程序，用于统计命令行指定的一组输入文件中每个唯一单词的出现次数。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;mapreduce/mapreduce.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 用户的map函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">WordCounter&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Mapper&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MapInput&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 跳过前导空白
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isspace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 寻找单词结尾
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">isspace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">REGISTER_MAPPER&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">WordCounter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 用户的reduce函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Adder&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Reducer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Reduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ReduceInput&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 遍历所有具有相同键的条目，并将值相加
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">int64&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">StringToInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">NextValue&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 发出输入键（input-&amp;gt;key()）的总和
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IntToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">REGISTER_REDUCER&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Adder&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ParseCommandLineFlags&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MapReduceSpecification&lt;/span> &lt;span class="n">spec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将输入文件列表存储到 &amp;#34;spec&amp;#34; 中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MapReduceInput&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_input&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">set_format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">set_filepattern&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">set_mapper_class&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;WordCounter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 指定输出文件:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// /gfs/test/freq-00000-of-00100
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// /gfs/test/freq-00001-of-00100
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">MapReduceOutput&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">set_filebase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/gfs/test/freq&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">set_num_tasks&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">set_format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">set_reducer_class&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Adder&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 可选: 在map任务中执行部分求和以节省网络带宽
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 组合器函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">set_combiner_class&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Adder&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 调优参数: 最多使用2000台机器和每个任务100 MB的内存
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set_machines&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set_map_megabytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">spec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set_reduce_megabytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 现在运行它
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">MapReduceResult&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">MapReduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">spec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">abort&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 完成: &amp;#39;result&amp;#39; 结构包含有关计数器、花费时间、使用的机器数量等的信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="22-类型">2.2 类型&lt;/h3>
&lt;p>即使先前的伪代码是以字符串输入和输出为基础编写的，从概念上讲，用户提供的Map和Reduce函数具有关联的类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">map&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">k1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">v1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">v2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reduce&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">k2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v2&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就是说，输入的键和值和输出的键和值来自不同的领域。此外，&lt;strong>中间键和值来自与输出键和值&lt;/strong>相同的领域。&lt;/p>
&lt;p>我们的 C++ 实现将字符串传递给用户定义的函数，并将其留给用户代码在字符串和适当类型之间进行转换。&lt;/p>
&lt;h3 id="23-更多示例">2.3 更多示例&lt;/h3>
&lt;p>以下是几个简单的有趣程序的示例，可以很容易地表达为 MapReduce 计算。&lt;/p>
&lt;p>分布式 Grep：如果匹配提供的模式，则Map函数发出一行。Reduce函数是一个恒等函数，只是将提供的中间数据复制到输出。&lt;/p>
&lt;p>URL 访问频率计数：Map函数处理 Web 页面请求的日志并输出 〈URL，1〉。Reduce函数将同一 URL 的所有值相加，并发出一个 〈URL，总计数〉 对。&lt;/p>
&lt;p>反向 Web-Link 图：Map函数为在名为源的页面中找到的指向目标 URL 的每个链接输出 〈目标，源〉 对。Reduce函数将与给定目标 URL 关联的所有源 URL 的列表串联在一起，并发出：〈目标，列表（源）〉&lt;/p>
&lt;p>每个主机的术语向量：术语向量汇总了出现在文档或一组文档中的最重要的单词，作为 〈word，frequency〉 对的列表。Map函数为每个输入文档（其中主机名从文档的 URL 中提取）发出一个 〈主机名，术语向量〉 对。Reduce函数为给定主机传递了所有每文档术语向量。它将这些术语向量相加，丢弃不经常出现的术语，然后发出一个最终的 〈主机名，术语向量〉 对。&lt;/p>
&lt;p>倒排索引：Map函数解析每个文档，并发出一系列 〈单词，文档 ID〉 对。Reduce函数接受给定单词的所有对，对相应的文档 ID 进行排序，并发出一个 〈单词，文档 ID 列表〉 对。所有输出对的集合形成一个简单的倒排索引。很容易扩展这个计算以跟踪单词位置。&lt;/p>
&lt;p>分布式排序：Map函数从每个记录中提取键，并发出一个 〈键，记录〉 对。Reduce函数保持所有对不变地发出。此计算依赖于第 4.1 节描述的分区设施和第 4.2 节描述的排序属性。&lt;/p>
&lt;h2 id="3-实施">3 实施&lt;/h2>
&lt;p>MapReduce 接口的许多不同实现是可能的。正确的选择取决于环境。例如，一个实现可能适用于小型共享内存机器，另一个适用于大型 NUMA 多处理器，还有一个适用于更大的网络机器集合。&lt;/p>
&lt;p>本节描述了一个针对谷歌广泛使用的计算环境的实现：大量使用廉价个人计算机连接在一起，采用交换式以太网 [4]。在我们的环境中：&lt;/p>
&lt;ol>
&lt;li>机器通常是运行 Linux 的双处理器 x86 处理器，每台机器配备 2-4GB 内存。&lt;/li>
&lt;li>采用廉价的网络硬件 - 通常是 100 兆位/秒或 1 千兆位/秒的机器级别，但总体双向分割带宽要低得多。&lt;/li>
&lt;li>一个集群由数百或数千台机器组成，因此机器故障很常见。&lt;/li>
&lt;li>存储由廉价的 IDE 硬盘直接连接到个别机器上提供。内部开发的分布式文件系统 [8] 用于管理存储在这些硬盘上的数据。文件系统使用复制在不可靠的硬件上提供可用性和可靠性。&lt;/li>
&lt;li>用户向调度系统提交作业。每个作业由一组任务组成，并由调度程序Map到集群中的一组可用机器。&lt;/li>
&lt;/ol>
&lt;h3 id="31-执行概述">3.1 执行概述&lt;/h3>
&lt;p>Map 调用通过自动分区输入数据到一组 M 个分片的方式分布在多台机器上。输入分片可以由不同的机器并行处理。Reduce 调用通过使用分区函数（例如，hash(key) mod R）将中间键空间分成 R 个部分进行分区。分区数量（R）和分区函数由用户指定。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-19-02-07_huc63602efe41666f6224ca8061e20c955_107810_b3d405394d84175d8e9509595bbf7ce1.webp 400w,
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-19-02-07_huc63602efe41666f6224ca8061e20c955_107810_2746d748292773c2f94329f8af4cc75d.webp 760w,
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-19-02-07_huc63602efe41666f6224ca8061e20c955_107810_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-19-02-07_huc63602efe41666f6224ca8061e20c955_107810_b3d405394d84175d8e9509595bbf7ce1.webp"
width="760"
height="512"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
上图显示了我们实现的 MapReduce 操作的整体流程。当用户程序调用 MapReduce 函数时，将发生以下动作序列（图中的编号标签对应下面列表中的编号）：&lt;/p>
&lt;ol>
&lt;li>用户程序中的 MapReduce 库首先将输入文件分成 M 个片段，通常每个片段为 16 MB 到 64 MB（用户可以通过可选参数控制）。然后，在一组机器上启动许多程序副本。&lt;/li>
&lt;li>程序的其中一个副本是特殊的 - &lt;strong>主节点。其余的是工作节点，由主节点分配工作。有&lt;/strong> M 个Map任务和 R 个Reduce任务要分配。主节点选择空闲的工作节点，并为每个分配一个Map任务或Reduce任务。&lt;/li>
&lt;li>被分配Map任务的工作节点读取相应输入分片的内容。它&lt;strong>从输入数据中解析出键/值对，并将每对传递给用户定义的 Map 函数&lt;/strong>。由 Map 函数产生的中间键/值对在内存中进行缓冲。&lt;/li>
&lt;li>&lt;strong>定期&lt;/strong>，缓冲的对会被写入本地磁盘，并由分区函数分成 R 个区域。这些缓冲对的位置被传回给主节点，负责将这些位置转发给Reduce工作节点。&lt;/li>
&lt;li>当Reduce工作节点收到主节点关于这些位置的通知时，它&lt;strong>使用RPC从Map工作节点的本地磁盘读取缓冲数据&lt;/strong>。当Reduce工作节点读取了所有中间数据时，它会根据中间键对数据进行排序，以便将相同键的所有出现组合在一起。**排序是必要的，因为通常许多不同的键Map到同一个Reduce任务。**如果中间数据量太大无法放入内存，则使用外部排序。&lt;/li>
&lt;li>Reduce工作节点遍历排序后的中间数据，并对每个唯一的中间键进行处理，&lt;strong>将键和相应的中间值集合传递给用户的 Reduce 函数&lt;/strong>。Reduce函数的输出附加到此Reduce分区的最终输出文件中。&lt;/li>
&lt;li>当所有Map任务和Reduce任务完成时，主节点唤醒用户程序。此时，用户程序中的 MapReduce 调用返回给用户代码。&lt;/li>
&lt;/ol>
&lt;p>成功完成后，mapreduce 执行的输出可用于 R 个输出文件中（&lt;strong>每个Reduce任务一个文件&lt;/strong>，文件名由用户指定）。&lt;/p>
&lt;p>通常，&lt;strong>用户不需要将这些 R 个输出文件合并为一个文件&lt;/strong> - 他们通常将这些文件作为另一个 MapReduce 调用的输入，或者从另一个能够处理被分成多个文件的输入的分布式应用程序中使用它们。&lt;/p>
&lt;h3 id="32-主数据结构">3.2 主数据结构&lt;/h3>
&lt;p>主节点保持着几个数据结构。对于每个Map任务和Reduce任务，它存储状态（空闲、进行中或已完成），以及工作机器的标识（对于非空闲任务）。&lt;/p>
&lt;p>主节点是中间文件区域的位置从Map任务传播到Reduce任务的通道。&lt;/p>
&lt;p>因此，对于每个已完成的Map任务，主节点存储由该Map任务产生的 R 个中间文件区域的位置和大小。&lt;/p>
&lt;p>当Map任务完成时，会接收到此位置和大小信息的更新。这些信息被逐步推送给具有正在进行的Reduce任务的工作节点。&lt;/p>
&lt;h3 id="33-容错性">3.3 容错性&lt;/h3>
&lt;p>由于 MapReduce 库旨在使用数百或数千台机器处理大量数据，因此该库必须能够优雅地容忍机器故障。&lt;/p>
&lt;h4 id="工作节点故障">工作节点故障&lt;/h4>
&lt;p>主节点&lt;strong>定期对每个工作节点进行 ping&lt;/strong>。如果一段时间内没有从工作节点接收到响应，主节点将该工作节点标记为失败。&lt;/p>
&lt;blockquote>
&lt;p>任何状态的Map任务被重置
由该工作节点完成的&lt;strong>任何Map任务&lt;/strong>都将被重置回初始空闲状态，因此可以被重新调度到其他工作节点上。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>进行中的Reduce被重置
类似地，由失败的工作节点&lt;strong>进行中&lt;/strong>的任何Map任务或Reduce任务也将被重置为空闲状态，并且有资格重新调度。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>已完成的Reduce任务不需要被重置&lt;/p>
&lt;/blockquote>
&lt;p>由于其输出存储在失败机器的本地磁盘上，因此&lt;strong>已完成的Map任务在失败时会被重新执行&lt;/strong>，并且因此无法访问。
&lt;strong>已完成的Reduce任务无需重新执行&lt;/strong>，因为其输出存储在全局文件系统中。&lt;/p>
&lt;p>当工作节点 A 首先执行Map任务，然后稍后由工作节点 B（因为 A 失败）执行时，&lt;strong>执行Reduce任务的所有工作节点&lt;/strong>都会收到重新执行的通知。
尚未从工作节点 A 读取数据的任何Reduce任务将从工作节点 B 读取数据。&lt;/p>
&lt;p>MapReduce 对大规模工作节点故障具有弹性。
例如，在一个 MapReduce 操作期间，运行中的集群上进行网络维护导致每次有 80 台机器成为几分钟内无法访问。MapReduce &lt;strong>主节点简单地重新执行了不可访问的工作节点机器完成的工作&lt;/strong>，并继续向前推进，最终完成了 MapReduce 操作。&lt;/p>
&lt;h4 id="主节点故障">主节点故障&lt;/h4>
&lt;p>主节点定期写入上述主数据结构的周期性检查点是很简单的。如果主任务死亡，则可以从最后一个检查点状态启动新的副本。&lt;/p>
&lt;p>然而，考虑到只有一个主节点，它的故障是不太可能的；因此，我们当前的实现在主节点故障时会中止 MapReduce 计算。客户端可以检查此条件，并在需要时重试 MapReduce 操作。&lt;/p>
&lt;h4 id="故障存在时的语义">故障存在时的语义&lt;/h4>
&lt;p>当用户提供的Map和Reduce运算符是其输入值的确定性函数时，我们的分布式实现产生的输出与整个程序的非故障顺序执行所产生的输出相同。&lt;/p>
&lt;p>我们依赖于Map和Reduce任务输出的原子提交来实现此属性。每个进行中的任务&lt;strong>将其输出写入私有临时文件&lt;/strong>。&lt;/p>
&lt;p>一个Reduce任务产生一个这样的文件，而&lt;strong>一个Map任务产生 R 个这样的文件（每个Reduce任务一个）&lt;/strong>。&lt;/p>
&lt;p>当Map任务完成时，工作节点向主节点发送一条消息，并在消息中包含 R 个临时文件的名称。如果主节点收到已经完成的Map任务的完成消息，则会忽略该消息。否则，它会将 R 个文件的名称记录在主数据结构中。&lt;/p>
&lt;p>当Reduce任务完成时，Reduce工作节点&lt;strong>将其临时输出文件原子地重命名为最终输出文件&lt;/strong>。如果相同的Reduce任务在多个机器上执行，则&lt;strong>对同一最终输出文件将执行多个重命名调用&lt;/strong>。我们依赖底层文件系统提供的原子重命名操作来保证最终的文件系统状态仅包含由Reduce任务的一次执行产生的数据。&lt;/p>
&lt;p>我们的大多数Map和Reduce运算符是确定性的，而我们的语义在这种情况下等同于顺序执行，这使得程序员很容易理解其程序的行为。当Map或Reduce运算符是非确定性的时，我们提供了更弱但仍合理的语义。&lt;/p>
&lt;p>在非确定性运算符存在的情况下，特定Reduce任务 R1 的输出等同于顺序执行非确定性程序产生的 R1 的输出。然而，不同Reduce任务 R2 的输出可能对应于&lt;strong>由不同顺序执行非确定性程序产生的 R2 的输出&lt;/strong>。&lt;/p>
&lt;p>考虑Map任务 M 和Reduce任务 R1 和 R2。设 e(Ri) 是执行 Ri 的已提交的执行（正好有一个这样的执行）。较弱的语义出现是因为 e(R1) 可能已读取由 M 的一个执行产生的输出，而 e(R2) 可能已读取由 M 的不同执行产生的输出。&lt;/p>
&lt;h3 id="34-本地性">3.4 本地性&lt;/h3>
&lt;p>在我们的计算环境中，网络带宽是相对稀缺的资源。我们通过利用输入数据（由 GFS [8] 管理）存储在构成我们集群的机器的本地磁盘上的事实来节省网络带宽。&lt;/p>
&lt;p>GFS 将每个文件划分为 64 MB 的块，并在不同的机器上存储每个块的多个副本（通常为 3 个副本）。&lt;/p>
&lt;p>MapReduce 主节点考虑输入文件的位置信息，并尝试在包含相应输入数据副本的机器上安排Map任务。如果失败，它将尝试在靠近该任务输入数据副本的地方安排Map任务（例如，在与包含数据的机器相同网络交换机上的工作机器）。
当在集群中的大部分工作节点上运行大型 MapReduce 操作时，大多数输入数据都是本地读取的，不会消耗网络带宽。&lt;/p>
&lt;h3 id="35-任务粒度">3.5 任务粒度&lt;/h3>
&lt;p>我们将映射阶段细分为 M 个部分，将Reduce阶段细分为 R 个部分，如上所述。&lt;/p>
&lt;p>理想情况下，M 和 R 应远大于工作节点的数量。让每个工作节点执行许多不同的任务可以改善动态负载平衡，并且在工作节点失败时加快恢复速度：它已完成的许多Map任务可以分散到所有其他工作节点上。&lt;/p>
&lt;p>在我们的实现中，M 和 R 的大小存在实际的限制，因为主节点必须根据上述描述做出 O(M + R) 的调度决策，并在内存中保持 O(M * R) 的状态。（然而，内存使用的常数因子很小：状态的 O(M * R) 部分大约包含每个Map任务/Reduce任务对的一个字节的数据。）&lt;/p>
&lt;p>此外，R 通常受用户约束，因为每个Reduce任务的输出最终都会在单独的输出文件中结束。&lt;/p>
&lt;p>在实践中，我们倾向于选择 M，使每个单独的任务大约为 16 MB 到 64 MB 的输入数据（这样上面描述的本地性优化效果最佳），并且我们将 R 设为我们预期使用的工作节点数量的小倍数。&lt;/p>
&lt;p>我们经常使用 M = 200,000 和 R = 5,000 来执行 MapReduce 计算，使用 2,000 个工作节点。&lt;/p>
&lt;h3 id="36-备用任务">3.6 备用任务&lt;/h3>
&lt;p>延长 MapReduce 操作总时间的常见原因之一是“拖延者”：一个机器在计算中完成 &lt;strong>最后几个映射或Reduce任务中的一个&lt;/strong> 时花费异常长的时间。&lt;/p>
&lt;p>拖延者可能出现的原因很多。&lt;/p>
&lt;ul>
&lt;li>一个有坏硬盘的机器可能会经常发生可纠正错误，从而将其读取性能从 30 MB/s 减慢到 1 MB/s。&lt;/li>
&lt;li>集群调度系统可能已将其他任务调度到该机器上，导致由于竞争 CPU、内存、本地磁盘或网络带宽而更慢地执行 MapReduce 代码。&lt;/li>
&lt;li>我们最近遇到的一个问题是机器初始化代码中的一个错误导致处理器缓存被禁用：受影响的机器上的计算速度下降了一百多倍。&lt;/li>
&lt;/ul>
&lt;p>我们有一个通用机制来缓解拖延者的问题。&lt;/p>
&lt;ul>
&lt;li>当 MapReduce 操作&lt;strong>即将完成时&lt;/strong>，主节点会&lt;strong>安排剩余正在进行的任务的备用执行&lt;/strong>。&lt;/li>
&lt;li>只要&lt;strong>主要执行或备用执行完成&lt;/strong>，任务就被标记为已完成。&lt;/li>
&lt;li>我们已经调整了这个机制，使其通常将操作使用的&lt;strong>计算资源增加不超过几个百分点&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>我们发现这显著缩短了完成大型 MapReduce 操作所需的时间。例如，第 5.3 节中描述的排序程序在禁用备用任务机制时需要花费的时间要长 44%。&lt;/p>
&lt;h2 id="4优化">4.优化&lt;/h2>
&lt;p>虽然简单地编写映射和Reduce函数提供的基本功能对大多数需求已足够，但我们发现一些扩展很有用。这些在本节中描述。&lt;/p>
&lt;h3 id="41-分区函数">4.1 分区函数&lt;/h3>
&lt;p>MapReduce 的用户指定他们希望的Reduce任务/输出文件数量（R）。使用中间键上的分区函数将数据分区到这些任务中。&lt;/p>
&lt;p>提供了一个默认的分区函数，使用哈希（例如“hash(key) mod R”）。这往往会产生相当均衡的分区。&lt;/p>
&lt;p>但是，在某些情况下，通过键的某些其他函数对数据进行分区是有用的。例如，有时输出键是 URL，我们希望所有单个主机的条目都最终出现在同一个输出文件中。&lt;/p>
&lt;p>为了支持这种情况，MapReduce 库的用户可以提供一个特殊的分区函数。例如，使用“hash(Hostname(urlkey)) mod R”作为分区函数将导致同一主机的所有 URL 最终出现在同一个输出文件中。&lt;/p>
&lt;h3 id="42-排序保证">4.2 排序保证&lt;/h3>
&lt;p>我们保证在给定分区内，中间键/值对按照递增的键顺序处理。&lt;/p>
&lt;p>这个排序保证使得生成每个分区的排序输出文件变得容易，当输出文件格式需要支持通过键进行高效的随机访问查找，或者输出的用户发现按排序数据很方便时，这是很有用的。&lt;/p>
&lt;h3 id="43-组合器功能">4.3 组合器功能&lt;/h3>
&lt;p>在某些情况下，每个Map任务产生的&lt;strong>中间键中存在重复&lt;/strong>，并且用户指定的Reduce函数是&lt;strong>可交换和可结合&lt;/strong>的。&lt;/p>
&lt;p>这种情况的一个很好的例子是第 2.1 节中的单词计数示例。由于单词频率往往遵循 Zipf 分布，每个Map任务将产生数百或数千个形式为 &amp;lt;the, 1&amp;gt; 的记录。&lt;/p>
&lt;p>所有这些计数都将通过网络发送到单个Reduce任务，然后由Reduce函数相加以产生一个数字。我们&lt;strong>允许用户指定一个可选的组合器函数&lt;/strong>，在将数据发送到网络之前对其进行部分合并。&lt;/p>
&lt;p>组合器函数在执行Map任务的每台机器上执行。通常情况下，相同的代码用于实现组合器和Reduce函数。&lt;/p>
&lt;p>Reduce函数和组合器函数之间唯一的区别是 MapReduce 库如何处理函数的输出。Reduce函数的输出写入最终输出文件。组合器函数的输出写入一个&lt;strong>中间文件&lt;/strong>，该文件将被发送到Reduce任务。&lt;/p>
&lt;p>部分合并显着加速了某些类别的 MapReduce 操作。
2.1示例中使用了组合器函数&lt;/p>
&lt;h3 id="44-输入和输出类型">4.4 输入和输出类型&lt;/h3>
&lt;p>MapReduce 库提供了对几种不同格式的输入数据进行读取的支持。&lt;/p>
&lt;p>例如，“文本”模式输入将每一行视为一个键/值对：键是文件中的偏移量，值是行的内容。另一个常见的支持格式存储按键排序的键/值对序列。&lt;/p>
&lt;p>每种输入类型的实现都知道如何将自己分割成适当的范围以作为单独的Map任务进行处理（例如，文本模式的范围分割确保范围分割仅发生在行边界处）。&lt;/p>
&lt;p>用户可以通过&lt;strong>提供简单的读取器接口的实现来添加对新输入类型的支持&lt;/strong>，尽管大多数用户只使用少量预定义的输入类型之一。&lt;/p>
&lt;p>读取器不一定需要提供从文件读取的数据。例如，可以轻松定义一个从数据库或内存中映射的数据结构中读取记录的读取器。&lt;/p>
&lt;p>类似地，我们&lt;strong>支持一组输出类型&lt;/strong>，以产生不同格式的数据，用户代码可以轻松地添加对新输出类型的支持。&lt;/p>
&lt;h3 id="45-副作用">4.5 副作用&lt;/h3>
&lt;p>在某些情况下，MapReduce 的用户发现从他们的Map和/或Reduce操作中&lt;strong>产生辅助文件作为附加输出&lt;/strong>是很方便的。&lt;/p>
&lt;p>我们&lt;strong>依赖于应用程序编写者使这些副作用具有原子性和幂等性&lt;/strong>。通常，应用程序将写入临时文件，&lt;strong>并在完全生成后原子地&lt;/strong>将此文件重命名。&lt;/p>
&lt;p>我们&lt;strong>不支持由单个任务产生的多个输出文件的原子两阶段提交&lt;/strong>。因此，产生具有跨文件一致性要求的多个输出文件的任务应该是确定性的。在实践中，这种限制从未成为问题。&lt;/p>
&lt;h3 id="46-跳过错误记录">4.6 跳过错误记录&lt;/h3>
&lt;p>有时用户代码中存在错误，导致 Map 或 Reduce 函数在某些记录上出现确定性崩溃。这种错误会阻止 MapReduce 操作完成。&lt;/p>
&lt;p>通常的做法是修复错误，但有时这是不可行的；也许错误是由于不可用的第三方库中的 bug。&lt;/p>
&lt;p>此外，有时可以忽略一些记录，例如在大型数据集上进行统计分析时。我们提供了一种可选的执行模式，其中 MapReduce 库会&lt;strong>检测哪些记录导致确定性崩溃，并跳过这些记录以继续向前推进&lt;/strong>。&lt;/p>
&lt;p>每个工作进程都安装了一个信号处理程序，用于捕获段错误和总线错误。在调用用户的 Map 或 Reduce 操作之前，MapReduce 库会将参数的序列号存储在一个全局变量中。如果用户代码生成信号，信号处理程序会发送一个“最后一口气”的 UDP 数据包，其中包含序列号到 MapReduce 主节点。&lt;/p>
&lt;p>当主节点在特定记录上看到多次失败时，它表示应该在下一个重新执行相应的 Map 或 Reduce 任务时跳过该记录。&lt;/p>
&lt;h3 id="47-本地执行">4.7 本地执行&lt;/h3>
&lt;p>调试 Map 或 Reduce 函数中的问题可能会很棘手，因为实际的计算发生在一个分布式系统中，通常在数千台机器上进行，并由主节点动态地进行工作分配决策。&lt;/p>
&lt;p>为了帮助进行调试、分析和小规模测试，我们开发了 MapReduce 库的替代实现，它在本地机器上顺序执行 MapReduce 操作的所有工作。为用户提供了控制，以便计算可以限制在特定的Map任务上。&lt;/p>
&lt;p>用户使用特殊标志调用其程序，然后可以轻松地使用任何有用的调试或测试工具（例如 gdb）。&lt;/p>
&lt;h3 id="48-状态信息">4.8 状态信息&lt;/h3>
&lt;p>主节点运行一个内部 HTTP 服务器，并为人类消费者导出一组状态页面。&lt;/p>
&lt;p>状态页面显示计算的进度，例如已完成多少任务、正在进行多少任务、输入字节数、中间数据字节数、输出字节数、处理速率等。&lt;/p>
&lt;p>页面还包含每个任务生成的标准错误和标准输出文件的链接。用户可以使用这些数据来预测计算需要多长时间，以及是否应该向计算中添加更多资源。这些页面还可以用于确定计算是否比预期的慢得多。&lt;/p>
&lt;p>此外，顶级状态页面显示了哪些工作节点失败，以及它们在失败时正在处理哪些映射和缩减任务。在尝试诊断用户代码中的错误时，这些信息非常有用。&lt;/p>
&lt;h3 id="49-计数器">4.9 计数器&lt;/h3>
&lt;p>MapReduce 库提供了一个计数器功能，用于&lt;strong>计算各种事件的发生次数&lt;/strong>。&lt;/p>
&lt;p>例如，用户代码可能希望计算处理的总单词数或索引的德语文档数等。&lt;/p>
&lt;p>要使用此功能，用户代码创建一个命名计数器对象，然后在 Map 和/或 Reduce 函数中适当地递增计数器。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Counter&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">uppercase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uppercase&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetCounter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;uppercase&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">contents&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">each&lt;/span> &lt;span class="n">word&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">contents&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IsCapitalized&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uppercase&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Increment&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EmitIntermediate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>来自各个工作机器的计数器值会&lt;strong>定期传播到主节点（通过 ping 响应搭载）&lt;/strong>。&lt;/p>
&lt;p>主节点汇总成功的映射和缩减任务的计数器值，并在 MapReduce 操作完成时将它们返回给用户代码。
当前的计数器值也显示在主节点状态页面上，以便人类观察实时计算的进度。&lt;/p>
&lt;p>在聚合计数器值时，&lt;strong>主节点消除相同映射或缩减任务的重复执行的影响&lt;/strong>，以避免重复计数。（重复执行可能源自我们对备用任务的使用以及由于失败而重新执行任务。）&lt;/p>
&lt;p>MapReduce 库自动维护了一些计数器值，例如处理的输入键/值对数和生成的输出键/值对数。&lt;/p>
&lt;p>用户发现计数器功能对于检查 MapReduce 操作的行为非常有用。例如，在某些 MapReduce 操作中，用户代码可能希望确保生成的输出对数恰好等于处理的输入对数，或者处理的德语文档的比例在总处理的文档数中的可容忍比例内。&lt;/p>
&lt;h2 id="5-性能">5 性能&lt;/h2>
&lt;p>在这一部分，我们将衡量在一个大型机群上运行的两个计算的MapReduce性能。&lt;/p>
&lt;ul>
&lt;li>一个计算搜索大约1TB的数据，寻找特定的模式。&lt;/li>
&lt;li>另一个计算对大约1TB的数据进行排序。&lt;/li>
&lt;/ul>
&lt;p>这两个程序代表了MapReduce用户编写的真实程序的一个大的子集 - 一个类别的程序将数据从一种表示形式转换为另一种表示形式，另一个类别从大数据集中提取少量有趣的数据。&lt;/p>
&lt;h3 id="51-机群配置">5.1 机群配置&lt;/h3>
&lt;p>所有程序都在一个包含大约1800台机器的机群上执行。每台机器配备两个2GHz的Intel Xeon处理器，并启用超线程技术，4GB内存，两个160GB IDE硬盘，以及一个千兆以太网连接。这些机器排列成一个两级树形交换网络，根节点拥有约100-200 Gbps的聚合带宽。所有机器都位于同一个托管设施，因此任何一对机器之间的往返时间都不到一毫秒。&lt;/p>
&lt;p>在4GB内存中，大约有1-1.5GB被集群上运行的其他任务所占用。这些程序是在一个周末下午执行的，当时CPU、磁盘和网络大部分时间都是空闲的。&lt;/p>
&lt;h3 id="52-grep">5.2 Grep&lt;/h3>
&lt;p>grep程序扫描10^10个100字节的记录，搜索一个相对罕见的三字符模式（该模式在92337条记录中出现）。输入被分成大约64MB的片段（M = 15000），整个输出放在一个文件中（R = 1）。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-20-59-39_hu032a4766b39d1ed5906607200701ac36_91532_c03a4a786a830643a05ed96ec4f9e640.webp 400w,
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-20-59-39_hu032a4766b39d1ed5906607200701ac36_91532_e9b9befc2f9010c298cf44bbeb5b236e.webp 760w,
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-20-59-39_hu032a4766b39d1ed5906607200701ac36_91532_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-20-59-39_hu032a4766b39d1ed5906607200701ac36_91532_c03a4a786a830643a05ed96ec4f9e640.webp"
width="760"
height="458"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
上图显示了随时间推移计算的进展情况。&lt;/p>
&lt;p>Y轴显示了扫描输入数据的速率。随着越来越多的机器被分配给这个MapReduce计算，速率逐渐提高，当分配了1764个工作节点时，达到了30GB/s以上的峰值。随着映射任务的完成，速率开始下降，并且在计算进行到大约80秒时降为零。整个计算大约需要150秒完成。这包括约一分钟的启动开销。这种开销是由于将程序传播到所有工作机器，以及与GFS交互以打开1000个输入文件集并获取所需信息以进行位置优化而造成的延迟。&lt;/p>
&lt;h3 id="53-排序">5.3 排序&lt;/h3>
&lt;p>sort程序对1010个100字节的记录进行排序（约1TB的数据）。该程序是模仿TeraSort基准测试[10]设计的。&lt;/p>
&lt;p>排序程序由不到50行的用户代码组成。三行Map函数从文本行中提取一个10字节的排序键并发出键和原始文本行作为中间键/值对。我们使用内置的Identity函数作为Reduce运算符。这个函数将中间键/值对不改变地作为输出键/值对。最终排序后的输出被写入一组2路复制的GFS文件（即，程序的输出为2TB）。与之前一样，输入数据被分割成64MB的片段（M = 15000）。我们将排序后的输出分成4000个文件（R = 4000）。分区函数使用键的初始字节将其分隔成R个片段之一。我们的分区函数对这个基准测试具有键的分布的内置知识。在一般的排序程序中，我们会添加一个预处理的MapReduce操作，该操作将收集键的样本并使用样本键的分布来计算最终排序传递的分割点。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-02-00_hua9a2c4f15df4d7b2d5e5e79a577d399a_87031_b345b946d5f65308bb9774bf3ec996ad.webp 400w,
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-02-00_hua9a2c4f15df4d7b2d5e5e79a577d399a_87031_624bd2ed20c3165d08c15caec5bdeeeb.webp 760w,
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-02-00_hua9a2c4f15df4d7b2d5e5e79a577d399a_87031_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-02-00_hua9a2c4f15df4d7b2d5e5e79a577d399a_87031_b345b946d5f65308bb9774bf3ec996ad.webp"
width="760"
height="441"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
图显示了排序程序正常执行的进度。左上角的图表显示了读取输入的速率。速率峰值约为13 GB/s，并在大约200秒内迅速下降，因为所有的映射任务在200秒之前都已完成。请注意，输入速率小于grep。这是因为排序映射任务将大约一半的时间和I/O带宽用于将中间输出写入其本地磁盘。相应的grep的中间输出尺寸可以忽略不计。
左中的图表显示了数据从映射任务发送到减少任务的网络速率。这种洗牌在第一个映射任务完成后立即开始。图表中的第一个驼峰是约为1700个减少任务的第一批（整个MapReduce分配了约1700台机器，并且每台机器最多执行一个减少任务）。计算约300秒后，这些第一批减少任务中的一些完成，我们开始为剩余的减少任务洗牌数据。所有的洗牌在计算约600秒后完成。
左下的图表显示了排序数据由减少任务写入最终输出文件的速率。在第一个洗牌周期结束和写入周期开始之间有一个延迟，因为机器正在忙于排序中间数据。一段时间后，写入速率维持在约2-4 GB/s。所有写入在计算约850秒后完成。
包括启动开销，整个计算需要891秒。这与TeraSort基准测试[18]的当前最佳报告结果1057秒相似。
需要注意的几点：输入速率高于洗牌速率和输出速率，因为我们的局部性优化 - 大多数数据从本地磁盘读取，绕过了我们相对带宽受限的网络。洗牌速率高于输出速率，因为输出阶段写入了排序数据的两个副本（我们为了可靠性和可用性原因制作了输出的两个副本）。我们写入两个副本，因为这是我们底层文件系统提供的可靠性和可用性机制。如果底层文件系统使用纠删码[14]而不是复制，那么写入数据的网络带宽要求将会降低。&lt;/p>
&lt;h3 id="54-备份任务的影响">5.4 备份任务的影响&lt;/h3>
&lt;p>在图(b)中，我们展示了禁用备份任务的排序程序执行。执行流程与图3(a)中显示的类似，唯一不同的是存在一个非常长的尾部，在那里几乎没有任何写入活动发生。
在960秒后，除了5个减少任务外，所有任务都已完成。然而，这最后几个慢性病者直到300秒后才完成。整个计算需要1283秒，比经过的时间增加了44%。&lt;/p>
&lt;h3 id="55-机器故障">5.5 机器故障&lt;/h3>
&lt;p>在图(c)中，我们展示了排序程序的执行，我们在计算几分钟后故意杀死了1746个工作进程中的200个。底层集群调度程序立即在这些机器上重新启动了新的工作进程（因为只有进程被杀死，机器仍然正常运行）。&lt;/p>
&lt;p>工作进程的死亡表现为负的输入速率，因为一些之前完成的映射工作消失了（因为对应的映射工作者被杀死了），需要重新做。这个映射工作的重新执行发生得相对迅速。整个计算包括启动开销在内在933秒内完成（仅比正常执行时间增加了5%）。&lt;/p>
&lt;h2 id="6-经验">6 经验&lt;/h2>
&lt;p>我们在2003年2月编写了MapReduce库的第一个版本，并在2003年8月进行了重大改进，包括局部性优化、动态负载平衡跨工作机器的任务执行等。自那时起，我们惊讶地发现MapReduce库在我们处理的问题类型上具有广泛的适用性。&lt;/p>
&lt;p>它已经在Google内部的各个领域广泛应用，包括：&lt;/p>
&lt;ul>
&lt;li>大规模机器学习问题，&lt;/li>
&lt;li>Google新闻和Froogle产品的聚类问题，&lt;/li>
&lt;li>提取用于生成流行查询报告（例如Google Zeitgeist）的数据，&lt;/li>
&lt;li>为新实验和产品从网页中提取属性（例如从大量网页中提取地理位置以进行本地化搜索），&lt;/li>
&lt;li>大规模图计算。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-04-13_hucc00e8da7fd183260595548f1e4310d8_37077_582c034a0e3d7541c732ff88c0362386.webp 400w,
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-04-13_hucc00e8da7fd183260595548f1e4310d8_37077_565a7eef56928718c1cf63e51b77c64d.webp 760w,
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-04-13_hucc00e8da7fd183260595548f1e4310d8_37077_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-04-13_hucc00e8da7fd183260595548f1e4310d8_37077_582c034a0e3d7541c732ff88c0362386.webp"
width="760"
height="757"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
图4显示了随着时间的推移，我们在主要源代码管理系统中检入的单独MapReduce程序数量的显著增长，从2003年初的0增加到截至2004年9月底近900个独立实例。MapReduce之所以如此成功，是因为它使得编写一个简单的程序，并在半个小时内在一千台机器上高效运行成为可能，极大地加快了开发和原型周期。此外，它允许没有分布式和/或并行系统经验的程序员轻松利用大量资源。在每个作业结束时，MapReduce库记录了作业使用的计算资源的统计信息。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-04-28_hu5da7b1e3ce81d76e0bf52bfacb097572_100682_f294739f123f28d60ee7efda1461d269.webp 400w,
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-04-28_hu5da7b1e3ce81d76e0bf52bfacb097572_100682_290401552d51776df516abea43bd083c.webp 760w,
/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-04-28_hu5da7b1e3ce81d76e0bf52bfacb097572_100682_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/mapreduce-simplified-data-processing-on-large-clusters/img/2024-03-05-21-04-28_hu5da7b1e3ce81d76e0bf52bfacb097572_100682_f294739f123f28d60ee7efda1461d269.webp"
width="760"
height="596"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
在表1中，我们展示了Google在2004年8月运行的一些MapReduce作业的统计信息子集。&lt;/p>
&lt;h3 id="61-大规模索引">6.1 大规模索引&lt;/h3>
&lt;p>迄今为止，我们对MapReduce的最重要的使用之一是完全重写了用于Google网页搜索服务的生产索引系统。索引系统将由我们的爬取系统检索到的大量文档作为输入，存储为一组GFS文件。这些文档的原始内容超过20TB的数据。索引过程作为五到十个MapReduce操作的序列运行。使用MapReduce（而不是之前版本索引系统中的特定分布式操作）带来了几个好处：&lt;/p>
&lt;ul>
&lt;li>索引代码更简单、更小、更容易理解，因为处理容错、分布和并行化的代码被隐藏在MapReduce库中。例如，计算的一个阶段的代码量从约3800行C++代码减少到使用MapReduce表达时约为700行。&lt;/li>
&lt;li>MapReduce库的性能足够好，我们可以将概念上无关的计算分开，而不是将它们混合在一起以避免对数据的额外传递。这使得改变索引过程变得容易。例如，在旧的索引系统中需要几个月的变更，在新系统中只需要几天就能实现。&lt;/li>
&lt;li>索引过程的操作变得更加容易，因为大部分由机器故障、慢机器和网络故障引起的问题都由MapReduce库自动处理，无需操作员干预。此外，通过向索引集群添加新机器来改进索引过程的性能也很容易。&lt;/li>
&lt;/ul>
&lt;h2 id="7-相关工作">7 相关工作&lt;/h2>
&lt;p>许多系统提供了受限制的编程模型，并利用这些限制自动并行化计算。例如，可以使用并行前缀计算在N个处理器上以log N时间计算N个元素数组的所有前缀[6, 9, 13]。根据我们在大型现实世界计算中的经验，MapReduce可以被视为对其中一些模型的简化和提炼。更重要的是，我们提供了一个可容忍故障的实现，可以扩展到数千个处理器。相比之下，大多数并行处理系统只在较小的规模上实现，并将处理机器故障的细节留给程序员。&lt;/p>
&lt;p>批量同步编程[17]和一些MPI原语[11]提供了更高级别的抽象，使程序员更容易编写并行程序。这些系统与MapReduce之间的一个关键区别在于，MapReduce利用受限编程模型来自动并行化用户程序，并提供透明的容错机制。&lt;/p>
&lt;p>我们的局部性优化受到了诸如主动磁盘[12, 15]等技术的启发，其中计算被推送到靠近本地磁盘的处理元素，以减少跨I/O子系统或网络发送的数据量。我们在普通处理器上运行，其中直接连接了少量磁盘，而不是直接在磁盘控制器处理器上运行，但总体方法是相似的。&lt;/p>
&lt;p>我们的备份任务机制类似于Charlotte系统[3]中采用的急切调度机制。简单的急切调度的一个缺点是，如果一个给定的任务导致重复的故障，整个计算将无法完成。我们通过跳过错误记录的机制来解决一些这样的问题。&lt;/p>
&lt;p>MapReduce实现依赖于一种内部集群管理系统，该系统负责在大量共享机器上分发和运行用户任务。尽管本文的重点不在此，但集群管理系统在精神上与其他系统如Condor [16]类似。&lt;/p>
&lt;p>MapReduce库中的排序设施与NOW-Sort [1]的操作类似。源机器（映射工作器）对要排序的数据进行分区，并将其发送到R个减少工作者之一。每个减少工作者在本地排序其数据（如果可能的话在内存中）。当然，NOW-Sort没有用户可定义的Map和Reduce函数，这使得我们的库具有广泛的适用性。&lt;/p>
&lt;p>River [2]提供了一个编程模型，其中进程通过在分布式队列上发送数据进行通信。与MapReduce类似，River系统试图在异构硬件或系统扰动引入的非均匀性的情况下提供良好的平均性能。River通过仔细调度磁盘和网络传输来实现平衡的完成时间。MapReduce采用了一种不同的方法。通过限制编程模型，MapReduce框架能够将问题划分为大量的细粒度任务。这些任务动态地调度在可用工作者上，以便更快的工作者处理更多的任务。受限编程模型还允许我们在作业结束时调度任务的冗余执行，这在存在非均匀性（例如慢速或卡住的工作者）时极大地减少了完成时间。&lt;/p>
&lt;p>BAD-FS [5]与MapReduce有着非常不同的编程模型，与MapReduce不同，它的目标是跨广域网络执行作业。然而，它们有两个基本的相似之处。一是这两个系统都使用冗余执行来从故障引起的数据丢失中恢复。二是它们都使用了局部感知调度来减少在拥塞的网络链路上传输的数据量。&lt;/p>
&lt;p>TACC [7]是一个旨在简化高可用网络服务构建的系统。与MapReduce类似，它依赖于重新执行作为实现容错的机制。&lt;/p>
&lt;h2 id="8-结论">8 结论&lt;/h2>
&lt;p>MapReduce编程模型在Google被成功地用于许多不同的目的。我们将这一成功归因于几个原因。&lt;/p>
&lt;ul>
&lt;li>首先，该模型易于使用，即使是对于没有并行和分布式系统经验的程序员，因为它隐藏了并行化、容错、局部优化和负载平衡的细节。&lt;/li>
&lt;li>其次，大量的问题都可以很容易地表达为MapReduce计算。例如，MapReduce用于生成Google生产的网络搜索服务的数据，用于排序，数据挖掘，机器学习以及许多其他系统。&lt;/li>
&lt;li>第三，我们开发了一个MapReduce的实现，可以扩展到包含数千台机器的大型集群。该实现有效地利用了这些机器资源，因此适用于Google遇到的许多大型计算问题。&lt;/li>
&lt;/ul>
&lt;p>我们从这项工作中学到了几件事情。&lt;/p>
&lt;ul>
&lt;li>首先，限制编程模型使得并行化和分布计算变得容易，并使得这样的计算具有容错性。&lt;/li>
&lt;li>其次，网络带宽是一种稀缺资源。因此，我们系统中的许多优化都旨在减少在网络上传输的数据量：局部优化允许我们从本地磁盘读取数据，将中间数据写入本地磁盘的单个副本可以节省网络带宽。&lt;/li>
&lt;li>第三，冗余执行可以减少慢速机器的影响，并处理机器故障和数据丢失。&lt;/li>
&lt;/ul></description></item><item><title>Abstraction vs implementation</title><link>https://ysyyhhh.github.io/blog/abstraction-vs-implementation/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/abstraction-vs-implementation/</guid><description>&lt;h2 id="ispc-language">ISPC language&lt;/h2>
&lt;p>SPMD: Single Program Multiple Data
一种花哨的方式来说，就是一种并行编程的范式，它的特点是：在编程时，我们只需要写一个程序，然后在运行时，这个程序会被复制多份，每一份都会被分配到不同的处理器上去执行，这样就实现了并行。&lt;/p>
&lt;p>用ISPC实现sinx&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//assume N % programCount == 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">programCount&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">programIndex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">denom&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">number&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">denom&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sign&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用C++来调用
调用ISPC的东西是个程序实例的集合, gang.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;sinx.ispc.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">terms&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//init x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//execute
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">ispc&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">terms&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-12-02_huf0efc3661c3a8dbb19222d4c78427dcd_64558_6645a5b3ae3ddd05822a97581964c7a1.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-12-02_huf0efc3661c3a8dbb19222d4c78427dcd_64558_a5fc4d7e11a6077f1c92e8e21cf17691.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-12-02_huf0efc3661c3a8dbb19222d4c78427dcd_64558_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-12-02_huf0efc3661c3a8dbb19222d4c78427dcd_64558_6645a5b3ae3ddd05822a97581964c7a1.webp"
width="377"
height="390"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>ispc中不需要手动设置programCount,programIndex&lt;/p>
&lt;p>programCount: &lt;strong>number of simultaneous program&lt;/strong> instances in the gang (uniform value)&lt;/p>
&lt;p>programIndex: &lt;strong>id of the current program&lt;/strong> instance in the gang(a non-uniform value)&lt;/p>
&lt;p>uniform value: 一个值在gang中的所有实例中都是一样的&lt;/p>
&lt;p>如果在ispc中直接使用sinx 并不会更快.&lt;/p>
&lt;p>因为有一些相同的工作会被重复做很多次.
通过分离他们,可以减少重复计算的次数,从而提高效率.&lt;/p>
&lt;p>一个设想的实现方法如下:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-20-55_hu8ffcb6cb31f8f6bbebe6700f4e47b705_244038_6c839c2c7db48b5c09baf72171af45ca.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-20-55_hu8ffcb6cb31f8f6bbebe6700f4e47b705_244038_c5c93d956e779e277324ce9a6f829f09.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-20-55_hu8ffcb6cb31f8f6bbebe6700f4e47b705_244038_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-20-55_hu8ffcb6cb31f8f6bbebe6700f4e47b705_244038_6c839c2c7db48b5c09baf72171af45ca.webp"
width="728"
height="526"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>ISPC是为了更容易编写SIMD代码而设计的, 只需要通过特殊的宏或编译指示就可以使用SIMD指令.&lt;/p>
&lt;p>programCount 就是 向量宽度&lt;/p>
&lt;p>SPMD programming &lt;strong>abstraction&lt;/strong>&lt;/p>
&lt;p>ISPC compiler generates SIMD &lt;strong>implementation&lt;/strong>&lt;/p>
&lt;p>version2版本的代码,这是分块进行而不是交错的.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">programCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">programIndex&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//assume N % programCount == 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">denom&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">number&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">denom&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sign&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-26-19_hu7938bd2c1271d40663fbfcd32562e0ce_196751_489fcd0f2eb24701e06c213cf432a3a7.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-26-19_hu7938bd2c1271d40663fbfcd32562e0ce_196751_58e4e2bf0e53ad2ba318e1a2ae95c491.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-26-19_hu7938bd2c1271d40663fbfcd32562e0ce_196751_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-26-19_hu7938bd2c1271d40663fbfcd32562e0ce_196751_489fcd0f2eb24701e06c213cf432a3a7.webp"
width="723"
height="530"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>交错通常比分块更好,因为分块会导致数据的访问不连续. 当计算量不均匀时,分块会导致一些处理器的负载过重,而另一些处理器的负载过轻.&lt;/p>
&lt;p>并且因为是同时进行的, 交错可以访问邻近的数据,这样可以增加cache的命中率.&lt;/p>
&lt;p>根本原因:
矢量加载指令(寄存器)是一次加载多个数据,如果在很短的时间内,要加载的数据是连续的,那么就可以一次加载多个数据,如果数据是不连续的,那么就需要多次加载,这样就会降低效率.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-30-56_hu772df7a64f68035bf40a24f2e3f74143_347068_3384da9ebeed146a97cfc55595a67d0b.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-30-56_hu772df7a64f68035bf40a24f2e3f74143_347068_1575106681211a7a5c741cec621dd52d.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-30-56_hu772df7a64f68035bf40a24f2e3f74143_347068_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-30-56_hu772df7a64f68035bf40a24f2e3f74143_347068_3384da9ebeed146a97cfc55595a67d0b.webp"
width="760"
height="562"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>如果有个聪明的编译器,它可以自动将分块的代码转换为交错的代码,这样就可以兼顾两者的优点.&lt;/p>
&lt;p>foreach就可以实现这个功能,让程序员不需要关心这些细节.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foreach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">denom&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">number&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">denom&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sign&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ISPC的错误例子:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nf">sumall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foreach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>错误:编译器会报错,因为sum是一个uniform value,它在所有的实例中都是一样的,但是在foreach中,每个实例都会对sum进行修改,这样就会导致错误.&lt;/p>
&lt;p>修正这个错误:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nf">sumall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uniform&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniform&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">partial_sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foreach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">partial_sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">reduce_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">partial_sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>reduce_add原语: 允许将一组不同的值合并为一个值,这个值在所有的实例中都是一样的.&lt;/p>
&lt;p>编译后的细节
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-41-11_hu30d7f4b1ac4472348ddd5783aa0a2e21_362539_c0b3c7b02a87cd0eafa04c9f4beee5c6.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-41-11_hu30d7f4b1ac4472348ddd5783aa0a2e21_362539_55edfb833370beeedb04607514558ee7.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-41-11_hu30d7f4b1ac4472348ddd5783aa0a2e21_362539_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-41-11_hu30d7f4b1ac4472348ddd5783aa0a2e21_362539_c0b3c7b02a87cd0eafa04c9f4beee5c6.webp"
width="741"
height="536"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>ISPC tasks: 基本上就是一个线程,但是它可以被分配到不同的处理器上去执行.&lt;/p>
&lt;h2 id="三种并行编程范式-和-三种-machine-architecture">三种并行编程范式 和 三种 machine architecture&lt;/h2>
&lt;p>聚焦于 communication 和 cooperation&lt;/p>
&lt;p>使用pthread时要call operate system
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-12_hu424ec0e5f725e78cd54c25ee6a2805b4_197701_83380472fb20f875d83bf8891c0f6c14.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-12_hu424ec0e5f725e78cd54c25ee6a2805b4_197701_ed04f98ce04c7e8e1fd1bf25ece5ef46.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-12_hu424ec0e5f725e78cd54c25ee6a2805b4_197701_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-46-12_hu424ec0e5f725e78cd54c25ee6a2805b4_197701_83380472fb20f875d83bf8891c0f6c14.webp"
width="737"
height="539"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>而在ISPC中,只需要call compiler&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-25_hu743500d3f46eda111182bb13825ddd61_215881_52792a10df8d3bb4c80ec3a9d0e8c19a.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-25_hu743500d3f46eda111182bb13825ddd61_215881_030e1987c8ce29fd60d9d581425c576f.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-46-25_hu743500d3f46eda111182bb13825ddd61_215881_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-46-25_hu743500d3f46eda111182bb13825ddd61_215881_52792a10df8d3bb4c80ec3a9d0e8c19a.webp"
width="727"
height="516"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="three-models-of-communicationabstraction">Three models of communication(abstraction)&lt;/h3>
&lt;h4 id="1shared-address-space">1.Shared address space&lt;/h4>
&lt;p>asst3中会用到&lt;/p>
&lt;p>多个线程之间通过互斥锁来进行通信&lt;/p>
&lt;p>在硬件中, Dance-hall model
所有处理器在同一侧.&lt;/p>
&lt;p>Symmetric Multiprocessor(SMP) system 就是如此&lt;/p>
&lt;p>最简单的方式是总线, 但这样无法扩展,因为总线的带宽是有限的.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-53-08_hub47389cf4f6ee62c3a24da3ed64647bd_284773_83f92147b67d52d347c9e764be414a7b.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-53-08_hub47389cf4f6ee62c3a24da3ed64647bd_284773_cc407f2eb03a52fbae43d3cfe589a807.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-53-08_hub47389cf4f6ee62c3a24da3ed64647bd_284773_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-53-08_hub47389cf4f6ee62c3a24da3ed64647bd_284773_83f92147b67d52d347c9e764be414a7b.webp"
width="719"
height="515"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
但实际中:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-16_huf5246cd0b880f843a34d54e8a9ceaf60_364206_72f74a1364f215b213f08c01860aa3b0.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-16_huf5246cd0b880f843a34d54e8a9ceaf60_364206_edb55a08e1aefae545f268c2c8d26a2d.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-16_huf5246cd0b880f843a34d54e8a9ceaf60_364206_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-55-16_huf5246cd0b880f843a34d54e8a9ceaf60_364206_72f74a1364f215b213f08c01860aa3b0.webp"
width="700"
height="525"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-34_hua87b13fdf1ea4f4894dd6309e2108996_336002_c2b29e4255b71be3da91f5e5bf6035ad.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-34_hua87b13fdf1ea4f4894dd6309e2108996_336002_62a5aae783f2810b1b06c98e682c54c6.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-07-21-55-34_hua87b13fdf1ea4f4894dd6309e2108996_336002_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-07-21-55-34_hua87b13fdf1ea4f4894dd6309e2108996_336002_c2b29e4255b71be3da91f5e5bf6035ad.webp"
width="713"
height="527"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>还有一种访问本地内存的方式,就是通过cache,这样就可以减少对总线的访问,从而提高效率.
Non-Uniform Memory Access(NUMA) system
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-14-34_hud613f70bd8ccce87e35300c481917997_435369_f41680dad25a8c31bbd97860f05c5172.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-14-34_hud613f70bd8ccce87e35300c481917997_435369_fb2fbd3e109a81339371b7401c85f29f.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-14-34_hud613f70bd8ccce87e35300c481917997_435369_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-14-34_hud613f70bd8ccce87e35300c481917997_435369_f41680dad25a8c31bbd97860f05c5172.webp"
width="760"
height="410"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但它为程序员引入的复杂性是很大的,因为程序员需要手动的将数据放到本地内存中,这样才能提高效率.&lt;/p>
&lt;p>shared address space的优点:&lt;/p>
&lt;ol>
&lt;li>程序员不需要关心数据的传输&lt;/li>
&lt;li>程序员不需要关心数据的分布&lt;/li>
&lt;/ol>
&lt;h4 id="2message-passing">2.Message passing&lt;/h4>
&lt;p>aasst4中会用到&lt;/p>
&lt;p>由于实现缓存一致性需要额外的成本，因此在大型系统中，共享内存的实现是不可行的。在这种情况下，消息传递是一种更好的选择。&lt;/p>
&lt;p>在消息传递中，每个处理器都有自己的私有内存，而且没有共享内存。要在处理器之间传递数据，必须使用显式的消息传递原语。&lt;/p>
&lt;p>不需要任何硬件支持，因此可以在任何系统上实现。只需要网络。&lt;/p>
&lt;p>可以构建大型系统，因为没有共享内存的限制。&lt;/p>
&lt;p>这些原语允许程序员在处理器之间传递数据，但是程序员必须显式地指定数据的传输。这种方式的缺点是，程序员需要关心数据的传输，这样就会增加程序员的负担。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-18-37_hu42065f6b748829e4ad2ed8749e657be7_703756_ddc00b5301d4dc84d1e271fe7930a3e9.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-18-37_hu42065f6b748829e4ad2ed8749e657be7_703756_d491feaa04b414c21f714294089e1a0f.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-18-37_hu42065f6b748829e4ad2ed8749e657be7_703756_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-18-37_hu42065f6b748829e4ad2ed8749e657be7_703756_ddc00b5301d4dc84d1e271fe7930a3e9.webp"
width="760"
height="513"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h4 id="3data-parallel">3.Data parallel&lt;/h4>
&lt;p>asst2中会用到&lt;/p>
&lt;p>上面两种方式可以在任何硬件上实现。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-22-41_hu29009ffeff66b4988989ee35eddf94af_620179_c09df96c7d1eb7e807d4e08bd88b7d7a.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-22-41_hu29009ffeff66b4988989ee35eddf94af_620179_45b583dd334a3ef06cb1eba15c98eb10.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-22-41_hu29009ffeff66b4988989ee35eddf94af_620179_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-22-41_hu29009ffeff66b4988989ee35eddf94af_620179_c09df96c7d1eb7e807d4e08bd88b7d7a.webp"
width="760"
height="440"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Data parallel对程序员来说是最简单的，因为程序员不需要关心数据的传输，也不需要关心数据的分布。但是，它只能在特定的硬件上实现，因为它需要硬件支持。&lt;/p>
&lt;p>过去我们使用SIMD，现在使用SPMD。&lt;/p>
&lt;p>并行程序的问题&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-28-16_hu69dfe58954025daef8c252774f7a0fae_426166_3f56fdd1ed92ca29942ada1ecd451f8a.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-28-16_hu69dfe58954025daef8c252774f7a0fae_426166_35f3911aeb8171c6b3bb3b1641022573.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-28-16_hu69dfe58954025daef8c252774f7a0fae_426166_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-28-16_hu69dfe58954025daef8c252774f7a0fae_426166_3f56fdd1ed92ca29942ada1ecd451f8a.webp"
width="760"
height="562"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>这样的并行会得到不确定的结果。&lt;/p>
&lt;p>那么如何有原则性地使用并行呢？&lt;/p>
&lt;p>有一个抽象概念是stream，可以避免并行竞争问题。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-30-44_hu3d9b4b708f4c384b1f7b7d012771095e_675645_3c7739822199ef3aa5013f2a499cb65b.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-30-44_hu3d9b4b708f4c384b1f7b7d012771095e_675645_2e3d9be1885abeb0b8a5ba073e2faa56.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-30-44_hu3d9b4b708f4c384b1f7b7d012771095e_675645_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-30-44_hu3d9b4b708f4c384b1f7b7d012771095e_675645_3c7739822199ef3aa5013f2a499cb65b.webp"
width="760"
height="519"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>两个函数间的用法：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-31-24_hu7ad04064968c85894cc57d0d9c48a049_715623_64ef6cbf5a00d5a6bf1599d935d086d9.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-31-24_hu7ad04064968c85894cc57d0d9c48a049_715623_48da98c2f403b1682277c9fc2c8145bc.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-31-24_hu7ad04064968c85894cc57d0d9c48a049_715623_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-31-24_hu7ad04064968c85894cc57d0d9c48a049_715623_64ef6cbf5a00d5a6bf1599d935d086d9.webp"
width="760"
height="559"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>当如果使用stream，就必须创建tmp。不得不把临时数据写入浪费的带宽中。&lt;/p>
&lt;p>所以我们希望也许有一些新的运算符可以做更加高级的操作。&lt;/p>
&lt;p>gather: 将数据从不同的stream中收集到一个stream中。
scatter: 将数据从一个stream中分散到不同的stream中。&lt;/p>
&lt;p>intel包括了gather，但不包括scatter。
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-39-33_huac084b4facbe1a325680980b61a6f2eb_748223_5e0630b9c73daaa7936463d125ffd07c.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-39-33_huac084b4facbe1a325680980b61a6f2eb_748223_88196d1ffbb5e688aa133fefcc71da82.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-39-33_huac084b4facbe1a325680980b61a6f2eb_748223_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-39-33_huac084b4facbe1a325680980b61a6f2eb_748223_5e0630b9c73daaa7936463d125ffd07c.webp"
width="760"
height="568"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-42-00_hu1e128ac41b625201ee01db386b0f9bf6_668641_08b839ae4cc614773c96da758214b653.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-42-00_hu1e128ac41b625201ee01db386b0f9bf6_668641_fd727307d9b3eec91fb5789f8d13a106.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-42-00_hu1e128ac41b625201ee01db386b0f9bf6_668641_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-42-00_hu1e128ac41b625201ee01db386b0f9bf6_668641_08b839ae4cc614773c96da758214b653.webp"
width="760"
height="557"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h4 id="总结">总结&lt;/h4>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/abstraction-vs-implementation/img/2023-10-14-14-44-11_hu191eb3d20f4c2a32765dba803ce24f69_671529_e7cdb83e3678f5e26c23091fd4def508.webp 400w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-44-11_hu191eb3d20f4c2a32765dba803ce24f69_671529_7c9a647964f71be563c9183aefe4e725.webp 760w,
/blog/abstraction-vs-implementation/img/2023-10-14-14-44-11_hu191eb3d20f4c2a32765dba803ce24f69_671529_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/abstraction-vs-implementation/img/2023-10-14-14-44-11_hu191eb3d20f4c2a32765dba803ce24f69_671529_e7cdb83e3678f5e26c23091fd4def508.webp"
width="760"
height="512"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>这些并不是完全独立的，而是可以组合使用的。&lt;/p>
&lt;p>通常在实践中为了得到最好的性能，会使用以上所有的方式。&lt;/p>
&lt;p>多核芯片内部通常是shared address space，但小规模情况下使用message passing。&lt;/p></description></item><item><title>asst1</title><link>https://ysyyhhh.github.io/blog/asst1/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/asst1/</guid><description>&lt;p>&lt;a href="https://www.cnblogs.com/kalicener/p/16824312.html" target="_blank" rel="noopener">参考&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/stanford-cs149/asst1" target="_blank" rel="noopener">任务&lt;/a>&lt;/p>
&lt;h2 id="program-1-parallel-fractal-generation-using-threads-20-pointshttpsgithubcomstanford-cs149asst1program-1-parallel-fractal-generation-using-threads-20-points">&lt;a href="https://github.com/stanford-cs149/asst1#program-1-parallel-fractal-generation-using-threads-20-points" target="_blank" rel="noopener">Program 1: Parallel Fractal Generation Using Threads (20 points)&lt;/a>&lt;/h2>
&lt;p>提示:
需要先看CMU15-418/CS149的L2再完成Pro1&lt;/p>
&lt;p>任务描述:
用多线程画mandelbrot fractal.&lt;/p>
&lt;p>代码中给出了串行的实现, 你需要实现多线程的版本.&lt;/p>
&lt;p>多线程版本中只需要修改 &lt;code>workerThreadStart&lt;/code>函数.
不需要手动创建线程, 也不需要手动join线程.
直接调用mandelbrotThread().&lt;/p>
&lt;h3 id="11--12-计算在23456781632个线程下的加速比">1.1 &amp;amp; 1.2, 计算在2,3,4,5,6,7,8,16,32个线程下的加速比&lt;/h3>
&lt;h4 id="编写并观察">编写并观察&lt;/h4>
&lt;p>workerThreadStart函数的实现:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">345&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">workerThreadStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">WorkerArgs&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// TODO FOR CS149 STUDENTS: Implement the body of the worker
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// thread here. Each thread should make a call to mandelbrotSerial()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// to compute a part of the output image. For example, in a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// program that uses two threads, thread 0 could compute the top
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// half of the image and thread 1 could compute the bottom half.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// printf(&amp;#34;Hello world from thread %d\n&amp;#34;, args-&amp;gt;threadId);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CycleTimer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">currentSeconds&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 每个线程负责的行数(除不尽的部分由最后一个线程负责)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">numThreads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">startRow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">numRows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">numThreads&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果是最后一个线程，那么就要把除不尽的部分也算上
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">numRows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">numThreads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Thread %d startRow: %d, numRows: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startRow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numRows&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mandelbrotSerial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">startRow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numRows&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">maxIterations&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CycleTimer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">currentSeconds&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Thread %d time: %.3f ms&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>线程数&lt;/th>
&lt;th>加速比&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1.97&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>1.63&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>2.31&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>2.37&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>3.08&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>3.15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>3.74&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>5.14&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可以观察到，加速比和线程数并不是线性相关.&lt;/p>
&lt;h4 id="猜测原因">猜测原因&lt;/h4>
&lt;p>猜测可能的原因有:&lt;/p>
&lt;ul>
&lt;li>线程通信的开销&lt;/li>
&lt;li>每个线程分配的任务不均匀&lt;/li>
&lt;/ul>
&lt;h3 id="13-查看每个线程的执行时间验证猜想">1.3 查看每个线程的执行时间,验证猜想&lt;/h3>
&lt;p>当线程数为4时, 每个线程的执行时间如下:
Thread 0 time: 63.974 ms
Thread 3 time: 65.563 ms
Thread 2 time: 259.972 ms
Thread 1 time: 260.669 ms&lt;/p>
&lt;p>当线程数为8时, 每个线程的执行时间如下:
Thread 0 time: 13.702 ms
Thread 7 time: 16.831 ms
Thread 1 time: 57.324 ms
Thread 6 time: 61.069 ms
Thread 5 time: 113.431 ms
Thread 2 time: 115.753 ms
Thread 4 time: 164.736 ms
Thread 3 time: 166.306 ms&lt;/p>
&lt;p>可以看到,中间线程分配的任务更多,执行时间更长.
因此在增加线程数时,加速比并不是线性增加的.&lt;/p>
&lt;h3 id="14">1.4&lt;/h3>
&lt;p>任务描述:&lt;/p>
&lt;ul>
&lt;li>解决上面的问题,使得加速比更接近线性.
&lt;ul>
&lt;li>如: 8线程时的加速比需要在7~8之间.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>解决方法需要具有适用性, 适用所有的线程数.&lt;/li>
&lt;/ul>
&lt;p>tips:
有一个非常简单的静态赋值可以实现这个目标，并且线程之间不需要通信/同步.&lt;/p>
&lt;h4 id="解决方案">解决方案&lt;/h4>
&lt;p>思路:
根据代码可知, 每行的计算是独立的, 因此可以将每行分配给不同的线程.
但由上面的实验可知,中间行的计算量比较大.&lt;/p>
&lt;p>因此我们不应该直接平均切分行, 而是以线程数量为步长,线程交叉依次分配行.
即 第i个线程分配k*n+i行.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">workerThreadStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">WorkerArgs&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// TODO FOR CS149 STUDENTS: Implement the body of the worker
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// thread here. Each thread should make a call to mandelbrotSerial()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// to compute a part of the output image. For example, in a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// program that uses two threads, thread 0 could compute the top
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// half of the image and thread 1 could compute the bottom half.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// printf(&amp;#34;Hello world from thread %d\n&amp;#34;, args-&amp;gt;threadId);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CycleTimer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">currentSeconds&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> 方案1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> // 每个线程负责的行数(除不尽的部分由最后一个线程负责)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> int baseHeight = args-&amp;gt;height / args-&amp;gt;numThreads;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> int startRow = args-&amp;gt;threadId * baseHeight;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> int numRows = baseHeight;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> int yu = args-&amp;gt;height % args-&amp;gt;numThreads;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> // 均匀分配剩余行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> if (args-&amp;gt;threadId &amp;lt; yu)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> numRows++;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> startRow += std::min(args-&amp;gt;threadId, yu);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> printf(&amp;#34;Thread %d startRow: %d, numRows: %d\n&amp;#34;, args-&amp;gt;threadId, startRow, numRows);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> mandelbrotSerial(args-&amp;gt;x0, args-&amp;gt;y0, args-&amp;gt;x1, args-&amp;gt;y1,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> args-&amp;gt;width, args-&amp;gt;height,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> startRow, numRows,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> args-&amp;gt;maxIterations, args-&amp;gt;output);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 方案2, 依次分配行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">numThreads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mandelbrotSerial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">maxIterations&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CycleTimer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">currentSeconds&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Thread %d time: %.3f ms&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">threadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果:&lt;/p>
&lt;p>Thread 3 time: 88.842 ms
Thread 1 time: 89.680 ms
Thread 0 time: 89.717 ms
Thread 7 time: 90.280 ms
Thread 5 time: 90.715 ms
Thread 6 time: 90.743 ms
Thread 2 time: 91.049 ms
Thread 4 time: 92.982 ms
[mandelbrot thread]: [93.318] ms
Wrote image file mandelbrot-thread.ppm
(7.10x speedup from 8 threads)&lt;/p>
&lt;p>上面的解决方案使得每个线程的执行时间基本相同,因此加速比接近线性.
在8线程时,加速比为7.1.&lt;/p>
&lt;h3 id="15-16线程和8线程的加速比">1.5 16线程和8线程的加速比&lt;/h3>
&lt;p>现在16线程是否明显优于8线程? 给出是或否的原因.
(6.45x speedup from 16 threads)
16线程并没有明显由于8线程,反而还更慢.
原因:&lt;/p>
&lt;ul>
&lt;li>电脑本身是4核, 超线程后是8线程.&lt;/li>
&lt;li>16线程时线程切换反而导致开销增加.&lt;/li>
&lt;/ul>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>pro1的目的是为了认识到并行计算的overhead, 以及多线程在计算上也应该是依次交替分配的. 不能简单的平均分配.&lt;/p>
&lt;p>pro1是通过垂直分割来实现并行计算.
而向量化是通过水平分割来实现并行计算.&lt;/p>
&lt;h2 id="program-2-vectorizing-code-using-simd-intrinsics">program-2-vectorizing-code-using-simd-intrinsics&lt;/h2>
&lt;p>前提: L2
任务描述：
使用SIMD指令(CS149intrin.h提供的),来实现clampedExpVector函数.&lt;/p>
&lt;p>示例函数:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">absVector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">zero&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_mask&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNegative&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotNegative&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Note: Take a careful look at this loop indexing. This example
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// code is not guaranteed to work when (N % VECTOR_WIDTH) != 0.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Why is that the case?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="n">VECTOR_WIDTH&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// All ones
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// All zeros
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskIsNegative&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Load vector of values from contiguous memory addresses
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vload_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// x = values[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Set mask according to predicate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vlt_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maskIsNegative&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zero&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// if (x &amp;lt; 0) {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Execute instruction using mask (&amp;#34;if&amp;#34; clause)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vsub_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zero&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNegative&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// output[i] = -x;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Inverse maskIsNegative to generate &amp;#34;else&amp;#34; mask
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskIsNotNegative&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_mask_not&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maskIsNegative&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// } else {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Execute instruction (&amp;#34;else&amp;#34; clause)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vload_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotNegative&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// output[i] = x; }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Write results back to memory
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vstore_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例函数absVector并不能适用于所有情况,原因如下:
当n%VECTOR_WIDTH != 0时, 会越界.&lt;/p>
&lt;h3 id="12-实现clampedexpvector函数">1&amp;amp;2 实现clampedExpVector函数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">clampedExpVector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exponents&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// CS149 STUDENTS TODO: Implement your vectorized version of
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// clampedExpSerial() here.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Your solution should work for any value of
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// N and VECTOR_WIDTH, not just when VECTOR_WIDTH divides N
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_int&lt;/span> &lt;span class="n">zeroInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">oneInt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">oneInt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">zeroInt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">one&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nine&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">9.999999f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">VECTOR_WIDTH&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_mask&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsZero&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// All ones
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// All zeros
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskIsZero&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 防止在最后一次循环时，i+VECTOR_WIDTH超出N
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">VECTOR_WIDTH&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">maskAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">N&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// float x = values[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vload_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// int y = exponents[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vload_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exponents&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// if (y == 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_veq_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maskIsZero&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zeroInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// output[i] = 1.f;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vstore_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_mask_not&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maskIsZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 消除最后一次循环时，i+VECTOR_WIDTH超出N的情况
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_mask_and&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// float result = x;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// int count = y - 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__cs149_vec_int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_cs149_vsub_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">oneInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 哪些count&amp;gt;0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__cs149_mask&lt;/span> &lt;span class="n">countMark&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_cs149_vgt_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">countMark&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zeroInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// while (count &amp;gt; 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">_cs149_cntbits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">countMark&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// result *= x;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vmult_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">countMark&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// count--;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vsub_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">oneInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">countMark&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 哪些count&amp;gt;0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vgt_int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">countMark&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zeroInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">countMark&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// if (result &amp;gt; 9.999999f)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__cs149_mask&lt;/span> &lt;span class="n">gtNineMask&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_cs149_vgt_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gtNineMask&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nine&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// { reult = 9.999999f;}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vmove_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nine&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gtNineMask&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// output[i] = result;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_cs149_vstore_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskIsNotZero&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过init_ones来防止在有n%vectorWith!=0时 越界.&lt;/p>
&lt;ul>
&lt;li>在最开始的maskAll时设置&lt;/li>
&lt;li>在取反码后也要设置一次&lt;/li>
&lt;/ul>
&lt;p>count循环:
通过设置一个mask来标记哪些count&amp;gt;0, 从而实现循环.&lt;/p>
&lt;p>修改vectorWidth为2, 4, 8, to 16来回答:
Does the vector utilization increase, decrease or stay the same as VECTOR_WIDTH changes? Why?&lt;/p>
&lt;p>vectorWidth为2时, 结果如下:
****************** Printing Vector Unit Statistics *******************
Vector Width: 2
Total Vector Instructions: 162728
Vector Utilization: 77.0%
Utilized Vector Lanes: 250653
Total Vector Lanes: 325456&lt;/p>
&lt;p>vectorWidth为4时, 结果如下:
****************** Printing Vector Unit Statistics *******************
Vector Width: 3
Total Vector Instructions: 119440
Vector Utilization: 72.2%
Utilized Vector Lanes: 258879
Total Vector Lanes: 358320&lt;/p>
&lt;p>vectorWidth为8时, 结果如下:
****************** Printing Vector Unit Statistics *******************
Vector Width: 8
Total Vector Instructions: 51628
Vector Utilization: 66.0%
Utilized Vector Lanes: 272539
Total Vector Lanes: 413024&lt;/p>
&lt;p>vectorWidth为16时, 结果如下:
****************** Printing Vector Unit Statistics *******************
Vector Width: 16
Total Vector Instructions: 26968
Vector Utilization: 64.2%
Utilized Vector Lanes: 277188
Total Vector Lanes: 431488&lt;/p>
&lt;p>可以发现, 随着vectorWidth的增加, vectorUtilization也在减少.&lt;/p>
&lt;p>原因:
有多个条件语句,当vectorWidth增加时, 每次在某个条件中不执行的指令也会增加.&lt;/p>
&lt;h3 id="3-实现arraysumvector">3 实现arraySumVector&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float&lt;/span> &lt;span class="nf">arraySumVector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// CS149 STUDENTS TODO: Implement your vectorized version of arraySumSerial here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_vset_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">VECTOR_WIDTH&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_mask&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__cs149_vec_float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// All ones
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">maskAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 防止在最后一次循环时，i+VECTOR_WIDTH超出N
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">VECTOR_WIDTH&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">maskAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_cs149_init_ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">N&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// float x = values[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vload_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// sum += x;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_vadd_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">maskAll&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// log2(VECTOR_WIDTH)内解决
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">log2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VECTOR_WIDTH&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用_cs149_hadd_float函数，将sum中的每两个元素相加
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 再使用_cs149_interleave_float函数，将sum中的每两个元素交叉放置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 重复log2(VECTOR_WIDTH)次
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">_cs149_hadd_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_cs149_interleave_float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将sum中的第一个元素赋值给result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设VECTOR_WIDTHs始终是N的因子.&lt;/p>
&lt;p>可以实现在O(N/VECTOR_WIDTH + log2(VECTOR_WIDTH))的时间内完成计算.&lt;/p>
&lt;p>最后的log2实现方式.
提示中给了两个函数
hadd: 将每两个元素相加
interleave: 将每两个元素交叉放置&lt;/p>
&lt;p>因此我们可以类似与归并排序的方式,将sum中的每两个元素相加,再将每两个元素交叉放置.
重复log2(VECTOR_WIDTH)次后,第一个元素就是结果.&lt;/p>
&lt;h2 id="program-3-ispc">program-3 ISPC&lt;/h2>
&lt;p>前提: L3&lt;/p>
&lt;h3 id="part1-ispc-basic">part1 ISPC basic&lt;/h3>
&lt;p>任务:学习ISPC基本概念和编写.&lt;/p>
&lt;p>ISPC是一种编译器,可以将C代码编译为SIMD指令.&lt;/p>
&lt;h3 id="part2-ispc-task">part2 ISPC task&lt;/h3>
&lt;p>任务描述:
观察ISPCtask执行的结果&lt;/p>
&lt;h4 id="1">1&lt;/h4>
&lt;p>启动mandelbrot_ispc &amp;ndash;tasks&lt;/p>
&lt;p>结果:
[mandelbrot serial]: [424.881] ms
Wrote image file mandelbrot-serial.ppm
[mandelbrot ispc]: [97.180] ms
Wrote image file mandelbrot-ispc.ppm
[mandelbrot multicore ispc]: [48.986] ms
Wrote image file mandelbrot-task-ispc.ppm
(4.37x speedup from ISPC)
(8.67x speedup from task ISPC)&lt;/p>
&lt;p>因为设置了两个task所以大约是两倍的加速比 对于 ISPC&lt;/p>
&lt;h4 id="2">2&lt;/h4>
&lt;p>修改mandelbrot_ispc_withtasks()中的task数量,
you should be able to achieve performance that exceeds the sequential version of the code by over 32 times!
How did you determine how many tasks to create?
Why does the number you chose work best?&lt;/p>
&lt;p>根据机器的最大超线程数量设置
我设置了16个task, 因为我的机器是4核8线程, 16个task可以使得每个线程都有两个task.&lt;/p>
&lt;h4 id="3">3&lt;/h4>
&lt;p>what happens when you launch 10,000 ISPC tasks? What happens when you launch 10,000 threads?&lt;/p>
&lt;p>向量加速&lt;/p>
&lt;p>思考题:
Q: Why are there two different mechanisms (foreach and launch) for expressing independent, parallelizable work to the ISPC system?
A:foreach是将一个任务分配给多个线程,而launch是将多个任务分配给多个线程.&lt;/p>
&lt;p>Q: Couldn&amp;rsquo;t the system just partition the many iterations of foreach across all cores and also emit the appropriate SIMD code for the cores?
A:&lt;/p>
&lt;h2 id="program-4-iterative-sqrt-15-points">program-4 Iterative sqrt (15 points)&lt;/h2>
&lt;p>用sqrt复习ISPC的基本概念&lt;/p>
&lt;h3 id="1-1">1&lt;/h3>
&lt;p>运行结果:
[sqrt serial]: [1316.793] ms
[sqrt ispc]: [301.134] ms
[sqrt task ispc]: [52.439] ms
(4.37x speedup from ISPC)
(25.11x speedup from task ISPC)
4.37x speedup due to SIMD
25.11 / 4.37 = 5.74x speedup due to multi-core&lt;/p>
&lt;h3 id="2-1">2&lt;/h3>
&lt;p>构造数组使得加速比最大.&lt;/p>
&lt;p>全部数为2.998.
思路:
因为每个元素相同可以让计算更均匀,2.998可以充分调动cpu
结构:
(5.60x speedup from ISPC)
(30.39x speedup from task ISPC)&lt;/p>
&lt;h3 id="3-1">3&lt;/h3>
&lt;p>构造数组使得加速比最小.&lt;/p>
&lt;p>全部数为1
思路:
1的sqrt计算迭代最少.&lt;/p>
&lt;p>结果:
(2.50x speedup from ISPC)
(3.08x speedup from task ISPC)&lt;/p>
&lt;h2 id="program-5-blas-saxpy-10-points">program-5 BLAS saxpy (10 points)&lt;/h2>
&lt;h3 id="1-2">1&lt;/h3>
&lt;p>运行观察加速比
[saxpy ispc]: [25.098] ms [11.874] GB/s [1.594] GFLOPS
[saxpy task ispc]: [18.438] ms [16.164] GB/s [2.169] GFLOPS
(1.36x speedup from use of tasks)&lt;/p>
&lt;p>因为需要访问内存所以加速比不高.&lt;/p>
&lt;h3 id="2-2">2&lt;/h3>
&lt;p>Even though saxpy loads one element from X, one element from Y, and writes one element to result the multiplier by 4 is correct. Why is this the case? (Hint, think about how CPU caches work.)&lt;/p>
&lt;p>当程序写入结果的一个元素时，它首先将包含这个元素的缓存行提取到缓存中。这需要一个内存操作。然后，当不需要这个缓存行时，它将从缓存中闪现出来，这需要另一个内存操作。&lt;/p></description></item><item><title>asst2</title><link>https://ysyyhhh.github.io/blog/asst2/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/asst2/</guid><description>&lt;h2 id="c-sync">C++ Sync&lt;/h2>
&lt;h3 id="thread的使用">thread的使用&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">my_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">thread_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello from spawned thread %d of %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">my_func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">my_func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The main thread is running concurrently with spawned threads.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Spawned threads have terminated at this point.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mutex">mutex&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;chrono&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;map&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">g_pages&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">g_pages_mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">save_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// simulate a long page fetch
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">this_thread&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sleep_for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;fake content&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">guard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g_pages_mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">g_pages&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">save_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;http://foo&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">save_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;http://bar&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// safe to access g_pages without lock now, as the threads are joined
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">pair&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">g_pages&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">pair&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; =&amp;gt; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">pair&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">http://bar &lt;span class="o">=&lt;/span>&amp;gt; fake content
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http://foo &lt;span class="o">=&lt;/span>&amp;gt; fake content
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="condition_variable">condition_variable&lt;/h3>
&lt;p>线程调用 wait (lock)来指示它希望等待来自另一个线程的通知。&lt;/p>
&lt;p>注意，互斥对象(包装在 std: : only _ lock 中)被传递给 wait ()调用。当通知线程时，条件变量将获得锁。&lt;/p>
&lt;p>这意味着当调用 wait ()返回时，调用线程是锁的当前持有者。锁通常用于保护线程现在需要检查的共享变量，以确保它正在等待的条件为真。&lt;/p>
&lt;p>创建 N 个线程。N-1个线程等待来自线程0的通知，然后在接到通知后，自动递增一个受共享互斥锁保护的计数器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Wrapper class around a counter, a condition variable, and a mutex.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ThreadState&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">condition_variable_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">counter_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_waiting_threads_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ThreadState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num_waiting_threads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">condition_variable_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mutex_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_waiting_threads_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_waiting_threads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">ThreadState&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">condition_variable_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">mutex_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">signal_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ThreadState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">thread_state&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Acquire mutex to make sure the shared counter is read in a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// consistent state.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">counter_&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">num_waiting_threads_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Release the mutex before calling `notify_all()` to make sure
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// waiting threads have a chance to make progress.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">condition_variable_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Re-acquire the mutex to read the shared counter again.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">wait_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ThreadState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">thread_state&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// A lock must be held in order to wait on a condition variable.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// This lock is atomically released before the thread goes to sleep
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// when `wait()` is called. The lock is atomically re-acquired when
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// the thread is woken up using `notify_all()`.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">condition_variable_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Increment the shared counter with the lock re-acquired to inform the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// signaling thread that this waiting thread has successfully been
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// woken up.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">counter_&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Lock re-acquired after wait()...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Signaling thread spins until each waiting thread increments a shared
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * counter after being woken up from the `wait()` method.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">condition_variable_example&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;==============================================================&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Starting %d threads for signal-and-waiting...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ThreadState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">thread_state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_threads&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signal_fn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wait_fn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;==============================================================&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">thread_state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="part_a">part_a&lt;/h2>
&lt;h3 id="step-1-实现tasksystemparallelspawn">step 1 实现TaskSystemParallelSpawn&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">TaskSystemParallelSpawn&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 students will modify the implementation of this
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// method in Part A. The implementation provided below runs all
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// tasks sequentially on the calling thread.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">taskId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 交叉分配任务
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">taskId&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fetch_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">task_id&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runnable&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">taskId&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fetch_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// printf(&amp;#34;done\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Q:How will you assign tasks to your worker threads? Should you consider static or dynamic assignment of tasks to threads?
A:交叉分配任务，动态分配任务&lt;/p>
&lt;p>Q:How will you ensure that all tasks are executed exactly once?
A:使用原子变量taskId&lt;/p>
&lt;h3 id="step-2-实现--tasksystemparallelthreadpoolspinning">step 2 实现 TaskSystemParallelThreadPoolSpinning&lt;/h3>
&lt;p>step1 的overhead主要是创建线程的开销(尤其是计算量低的任务上)，因此使用线程池可以减少开销&lt;/p>
&lt;p>要求: 在TestSystem 创建时,或者在run时创建线程池&lt;/p>
&lt;p>Q1: 作为一个开始的实现，我们建议您将worker threads设计为连续循环，始终检查它们是否有更多的工作要执行。(进入 while 循环直到条件为真的线程通常称为“spinning”)
那么worker thread 如何确定有work要执行呢？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">ITaskSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 student implementations may decide to perform setup
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// operations (such as thread pool construction) here.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Implementations are free to add new class member variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// (requiring changes to tasksys.h).
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">exit_flag_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="o">::~&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exit_flag_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">thread&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">TaskSystemParallelThreadPoolSpinning&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 students will modify the implementation of this
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// method in Part A. The implementation provided below runs all
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// tasks sequentially on the calling thread.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// printf(&amp;#34;run\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">runnable_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_tasks_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_tasks_done_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">num_tasks_done_&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">this_thread&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">yield&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Q:为什么要使用yield
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// A:因为如果不使用yield，那么线程会一直占用CPU，导致其他线程无法运行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Q:那我直接死循环呢
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// A:死循环会导致CPU占用率100%，导致其他线程无法运行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Q2:确保 run ()实现所需的同步行为是非常重要的。如何更改 run ()的实现以确定批量任务启动中的所有任务都已完成？
A:使用原子变量num_tasks_done_，每个任务完成时，num_tasks_done_加一，当num_tasks_done_等于num_total_tasks时，所有任务完成&lt;/p>
&lt;h3 id="step-3-实现-tasksystemparallelthreadpoolsleeping">step 3 实现 TaskSystemParallelThreadPoolSleeping&lt;/h3>
&lt;p>Step2的缺点：
当线程“spin”等待某些操作时，它们会利用 CPU 核心的执行资源。&lt;/p>
&lt;ul>
&lt;li>例如，工作线程可能会循环等待新任务到达。&lt;/li>
&lt;li>另一个例子是，主线程可能会循环等待辅助线程完成所有任务，这样它就可以从 run ()调用返回。&lt;/li>
&lt;/ul>
&lt;p>这可能会影响性能，因为即使这些线程没有做有用的工作，也会使用 CPU 资源来运行这些线程。&lt;/p>
&lt;p>在任务的这一部分中，我们希望您通过让线程处于休眠状态来提高任务系统的效率，直到它们所等待的条件得到满足。&lt;/p>
&lt;p>您的实现可以选择使用条件变量来实现此行为。条件变量是一个同步原语，它允许线程在等待条件存在时休眠(不占用 CPU 处理资源)。其他线程向等待唤醒的线程发出“信号”，以查看它们所等待的条件是否已经满足。例如，如果没有工作要做，您的工作线程可能会处于休眠状态(这样它们就不会从尝试执行有用工作的线程那里占用 CPU 资源)。另一个例子是，调用 run ()的主应用程序线程可能希望在等待批量任务启动中的所有任务由工作线程完成时休眠。(否则，一个旋转的主线程将从工作线程那里夺走 CPU 资源!)有关 C + + 中条件变量的更多信息，请参见我们的 C + + 同步教程。&lt;/p>
&lt;p>您在这部分作业中的实现可能需要考虑棘手的race conditions 。您需要考虑许多可能的线程行为交错&lt;/p>
&lt;p>您可能需要考虑编写额外的测试用例来测试您的系统。赋值入门代码包括评分脚本用于评分代码性能的工作负载，但是我们也将使用一组更广泛的工作负载来测试您的实现的正确性，而我们在入门代码中并没有提供这些工作负载！&lt;/p>
&lt;p>The assignment starter code includes the workloads that the grading script will use to grade the performance of your code, but we will also test the correctness of your implementation using a wider set of workloads that we are not providing in the starter code!&lt;/p>
&lt;p>tasksys.h&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * TaskSystemParallelThreadPoolSleeping: This class is the student&amp;#39;s
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * optimized implementation of a parallel task execution engine that uses
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * a thread pool. See definition of ITaskSystem in
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * itasksys.h for documentation of the ITaskSystem interface.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TaskSystemParallelThreadPoolSleeping&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ITaskSystem&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">name&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TaskID&lt;/span> &lt;span class="nf">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">deps&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sync&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_tasks_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">exit_flag_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">num_tasks_done_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tasks_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable_&lt;/span>&lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">queue_condition_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">all_done_condition_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_waiting_threads_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">num_tasks_remaining_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">all_done_mutex_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>tasksys.cpp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * ================================================================
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Parallel Thread Pool Sleeping Task System Implementation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * ================================================================
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Parallel + Thread Pool + Sleep&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">task_id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">exit_flag_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">task_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 等待任务
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">queue_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lk&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">exit_flag_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">tasks_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tasks_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runnable_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_tasks_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_tasks_remaining_&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">num_tasks_remaining_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通知主线程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// printf(&amp;#34;notify_all_done\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">all_done_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">notify_one&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通知其他线程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// printf(&amp;#34;notify_all\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">queue_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">notify_one&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">ITaskSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 student implementations may decide to perform setup
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// operations (such as thread pool construction) here.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Implementations are free to add new class member variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// (requiring changes to tasksys.h).
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">exit_flag_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::~&lt;/span>&lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 student implementations may decide to perform cleanup
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// operations (such as thread pool shutdown construction) here.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Implementations are free to add new class member variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// (requiring changes to tasksys.h).
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">exit_flag_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">queue_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">thread&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">TaskSystemParallelThreadPoolSleeping&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// TODO: CS149 students will modify the implementation of this
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// method in Parts A and B. The implementation provided below runs all
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// tasks sequentially on the calling thread.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runnable_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_tasks_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_tasks_remaining_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks_mutex_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通知其他线程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">queue_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// printf(&amp;#34;run\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">num_tasks_remaining_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lk2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">all_done_mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">all_done_condition_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lk2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// printf(&amp;#34;all done\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// printf(&amp;#34;all done\n&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果分析:&lt;/p>
&lt;p>sleep对spin的提升效果不明显，可能是因为任务太少，线程切换的开销比较大.&lt;/p>
&lt;p>运行结果:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Running task system grading harness... &lt;span class="o">(&lt;/span>&lt;span class="m">11&lt;/span> total tests&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - Detected CPU with &lt;span class="m">16&lt;/span> execution contexts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - Task system configured to use at most &lt;span class="m">8&lt;/span> &lt;span class="nv">threads&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: super_super_light...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: super_super_light
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 5.281 5.788 0.91 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 95.221 92.995 1.02 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 10.877 10.446 1.04 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 6.943 42.705 0.16 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: super_light...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: super_light
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 37.497 37.844 0.99 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 108.136 108.805 0.99 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 10.777 13.615 0.79 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 10.274 44.686 0.23 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: ping_pong_equal...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: ping_pong_equal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 603.419 606.739 0.99 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 167.412 178.638 0.94 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 105.983 123.525 0.86 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 108.243 148.316 0.73 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: ping_pong_unequal...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: ping_pong_unequal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 1126.19 1109.329 1.02 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 259.271 260.822 0.99 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 199.088 198.013 1.01 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 198.777 214.293 0.93 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: recursive_fibonacci...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: recursive_fibonacci
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 1052.273 1128.069 0.93 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 156.014 172.113 0.91 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 156.31 171.337 0.91 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 156.462 166.476 0.94 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: math_operations_in_tight_for_loop...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: math_operations_in_tight_for_loop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 411.426 423.96 0.97 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 537.747 532.353 1.01 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 99.286 104.844 0.95 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 95.817 239.76 0.40 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: math_operations_in_tight_for_loop_fewer_tasks...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: math_operations_in_tight_for_loop_fewer_tasks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 413.681 415.961 0.99 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 514.021 505.234 1.02 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 108.644 117.702 0.92 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 106.84 260.724 0.41 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: math_operations_in_tight_for_loop_fan_in...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: math_operations_in_tight_for_loop_fan_in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 212.534 211.52 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 76.402 76.09 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 37.203 39.662 0.94 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 36.523 57.039 0.64 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: math_operations_in_tight_for_loop_reduction_tree...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: math_operations_in_tight_for_loop_reduction_tree
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 208.076 207.488 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 45.054 45.227 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 33.079 33.9 0.98 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 34.502 38.389 0.90 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: spin_between_run_calls...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: spin_between_run_calls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 353.553 382.373 0.92 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 180.401 197.119 0.92 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 205.374 222.315 0.92 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 214.819 197.579 1.09 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing test: mandelbrot_chunked...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reference binary: ./runtasks_ref_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Results &lt;span class="k">for&lt;/span>: mandelbrot_chunked
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STUDENT REFERENCE PERF?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> 257.289 256.815 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> 34.395 34.058 1.01 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> 34.241 34.922 0.98 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> 35.191 35.273 1.00 &lt;span class="o">(&lt;/span>OK&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">================================================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Overall performance results
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Serial&lt;span class="o">]&lt;/span> : All passed Perf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Always Spawn&lt;span class="o">]&lt;/span> : All passed Perf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Spin&lt;span class="o">]&lt;/span> : All passed Perf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Parallel + Thread Pool + Sleep&lt;span class="o">]&lt;/span> : All passed Perf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="part_b">part_b&lt;/h2>
&lt;p>在任务的 B 部分中，您将扩展您的 A 部分任务系统实现，以支持可能依赖于以前任务的任务的异步启动。这些任务间依赖关系创建了任务执行库必须遵守的调度约束。&lt;/p>
&lt;p>ITaskSystem 接口还有一个方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">virtual&lt;/span> &lt;span class="n">TaskID&lt;/span> &lt;span class="nf">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IRunnable&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">deps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>RunAsyncWithDeps ()类似于 run () ，因为它也用于执行 num &lt;em>total&lt;/em> asks 任务的批量启动。但是，它与 run ()在许多方面有所不同&amp;hellip;&lt;/p>
&lt;h3 id="asynchronous-task-launch">Asynchronous Task Launch&lt;/h3>
&lt;p>首先，使用 runAsyncWithDeps ()创建的任务由任务系统与调用线程异步执行。&lt;/p>
&lt;p>这意味着 runAsyncWithDeps ()应该立即返回给调用方，即使任务尚未完成执行。&lt;/p>
&lt;p>该方法返回与此批量任务启动关联的唯一标识符。&lt;/p>
&lt;p>调用线程可以通过调用 sync ()来确定大容量任务启动的实际完成时间。&lt;/p>
&lt;p>&lt;code>virtual void sync() = 0;&lt;/code>&lt;/p>
&lt;p>只有当与之前所有批量任务启动关联的任务完成时，sync ()才返回给调用方。例如，考虑以下代码:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// assume taskA and taskB are valid instances of IRunnable...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">noDeps&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// empty vector
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ITaskSystem&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TaskSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bulk launch of 4 tasks
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">noDeps&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bulk launch of 8 tasks
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">noDeps&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// at this point tasks associated with launchA and launchB
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// may still be running
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">sync&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// at this point all 12 tasks associated with launchA and launchB
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// are guaranteed to have terminated
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如上面的注释中所述，在线程调用sync() runAsyncWithDeps() ) 的任务已完成。 准确地说， runAsyncWithDeps()告诉您的任务系统执行新的批量任务启动，但您的实现可以灵活地在下次调用sync()之前随时执行这些任务。 请注意，此规范意味着无法保证您的实现在从 launchB 启动任务之前先执行 launchA 中的任务！&lt;/p>
&lt;h3 id="support-for-explicit-dependencies">Support for Explicit Dependencies&lt;/h3>
&lt;p>runAsyncWithDeps()的第二个关键细节是它的第三个参数：TaskID 标识符向量，必须引用之前使用runAsyncWithDeps()启动的批量任务。 该向量指定当前批量任务启动中的任务所依赖的先前任务。 因此，在依赖向量中给出的启动中的所有任务完成之前，您的任务运行时无法开始执行当前批量任务启动中的任何任务！ 例如，考虑以下示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">noDeps&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// empty vector
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">depOnA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskID&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">depOnBC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ITaskSystem&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TaskSystem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_threads&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">noDeps&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">depOnA&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">launchA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">depOnA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchC&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">depOnA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">depOnBC&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">launchB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">depOnBC&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">launchC&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TaskID&lt;/span> &lt;span class="n">launchD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runAsyncWithDeps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">taskD&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">depOnBC&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">sync&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码有四个批量任务启动（taskA：128 个任务，taskB：2 个任务，taskC：6 个任务，taskD：32 个任务）。 请注意，任务 B 和任务 C 的启动取决于任务 A。 taskD 的批量启动 ( launchD ) 取决于launchB和launchC的结果。 因此，虽然您的任务运行时可以按任意顺序（包括并行）处理与launchB和launchC关联的任务，但这些启动中的所有任务必须在launchA的任务完成后开始执行，并且它们必须在运行时开始之前完成从launchD执行任何任务。&lt;/p>
&lt;p>我们可以通过任务图直观地说明这些依赖关系。 任务图是有向无环图 (DAG)，其中图中的节点对应于批量任务启动，从节点 X 到节点 Y 的边表示 Y 对 X 输出的依赖关系。上述代码的任务图是：
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="https://github.com/jeremyephron/asst2/raw/master/figs/task_graph.png" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>请注意，如果您在具有八个执行上下文的 Myth 计算机上运行上面的示例，则并行调度launchB和launchC中的任务的能力可能非常有用，因为单独的批量任务启动都不足以使用所有执行机器的资源。&lt;/p>
&lt;h3 id="task">Task&lt;/h3>
&lt;p>您必须从 A 部分扩展任务系统实现，才能正确实现TaskSystem::runAsyncWithDeps()和TaskSystem::sync() 。 与 A 部分一样，我们为您提供以下入门提示：&lt;/p>
&lt;ul>
&lt;li>It may be helpful to think about the behavior of runAsyncWithDeps() as pushing a record corresponding to the bulk task launch, or perhaps records corresponding to each of the tasks in the bulk task launch onto a &amp;ldquo;work queue&amp;rdquo;. Once the record to work to do is in the queue, runAsyncWithDeps() can return to the caller.&lt;/li>
&lt;li>The trick in this part of the assignment is performing the appropriate bookkeeping to track dependencies. What must be done when all the tasks in a bulk task launch complete? (This is the point when new tasks may become available to run.)&lt;/li>
&lt;li>It can be helpful to have two data structures in your implementation: (1) a structure representing tasks that have been added to the system via a call to runAsyncWithDeps(), but are not yet ready to execute because they depend on tasks that are still running (these tasks are &amp;ldquo;waiting&amp;rdquo; for others to finish) and (2) a &amp;ldquo;ready queue&amp;rdquo; of tasks that are not waiting on any prior tasks to finish and can safely be run as soon as a worker thread is available to process them.&lt;/li>
&lt;li>You need not worry about integer wrap around when generating unique task launch ids. We will not hit your task system with over 2^31 bulk task launches.&lt;/li>
&lt;li>You can assume all programs will either call only run() or only runAsyncWithDeps(); that is, you do not need to handle the case where a run() call needs to wait for all proceeding calls to runAsyncWithDeps() to finish.&lt;/li>
&lt;/ul>
&lt;p>在part_b/子目录中实现B部分实现，以与正确的参考实现（ part_b/runtasks_ref_* ）进行比较。&lt;/p></description></item><item><title>L2</title><link>https://ysyyhhh.github.io/blog/l2/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/l2/</guid><description>&lt;h2 id="并行程序">并行程序&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">denom&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">terms&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">denom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sign&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">denom&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">number&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>转换成汇编后大致如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ld&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">addr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mul&lt;/span> &lt;span class="no">ri&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mul&lt;/span> &lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">可以看到每次循环都是独立的。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">对于最简单的是顺序执行。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">通过超线程(超标量处理器具有从单个指令流中提取多个指令的能力)可以提高性能。有时称指令级并行性。(&lt;/span>&lt;span class="nf">ILP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">Instruction&lt;/span> &lt;span class="no">Level&lt;/span> &lt;span class="no">Parallelism&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">但在这些汇编指令中必须顺序执行。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">因此实现指令级并行性是一个挑战。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">但即使是纯顺序执行的代码,也有很多方式使其运行更快(基于写代码的方式和编译器的智能程度).&lt;/span> &lt;span class="nf">Pentium&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="err">比如先取多条指令等&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">(有个黑匣子会预测分支,预测错误的话就会清空流水线,浪费时间)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">解决方法:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">1.&lt;/span> &lt;span class="err">通过&lt;/span>&lt;span class="nf">pthread编写并行性的程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">2.&lt;/span> &lt;span class="err">假设有一种语言可以表示并行性,编译器可以自动并行化程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">如:&lt;/span> &lt;span class="nf">forall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="no">i&lt;/span> &lt;span class="no">from&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">n-1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">自动并行化可能的解决方法:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">1.&lt;/span> &lt;span class="err">直接分为&lt;/span>&lt;span class="nf">k个线程&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">每个线程处理&lt;/span>&lt;span class="no">n&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="no">k个循环.&lt;/span> &lt;span class="err">然后将结果合并&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">2.&lt;/span> &lt;span class="err">在硬件上执行.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">有一堆性能较低但具有并行性的处理器时,&lt;/span> &lt;span class="err">也需要更多电力/时间来驱动很多信号从一端到另一端.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## CPU &amp;amp;&amp;amp; GPU
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">GPU将核心的概念带到了极致&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">抛弃了所有的分支预测&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">只是控制逻辑而不完成计算&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">对于上面的程序有垂直和水平两种分割方式:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">-&lt;/span> &lt;span class="err">垂直:&lt;/span> &lt;span class="err">每个线程处理一个循环&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">-&lt;/span> &lt;span class="err">水平:&lt;/span> &lt;span class="err">同时处理多个循环,&lt;/span> &lt;span class="err">如先同时进行所有的第一个乘法&lt;/span>&lt;span class="na">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## SIMD Single Instruction Multiple Data
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">假设我正在执行的多次操作之间没有依赖关系,都能够并行运行.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">a&lt;/span> &lt;span class="no">single&lt;/span> &lt;span class="no">instruction&lt;/span> &lt;span class="no">is&lt;/span> &lt;span class="no">applied&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">multiple&lt;/span> &lt;span class="no">data&lt;/span> &lt;span class="no">elements&lt;/span> &lt;span class="no">simultaneously.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">即:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">同时对8个数值和另一个地方的8个数值取出并进行加法.&lt;/span> &lt;span class="err">有时这些数值可以被称作向量.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">使用&lt;/span>&lt;span class="nf">AVX&lt;/span> &lt;span class="no">intrinsics的向量化程序&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">```&lt;/span>&lt;span class="nf">c&lt;/span>&lt;span class="err">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">void&lt;/span> &lt;span class="no">sinx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="no">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="no">terms&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">float&lt;/span>&lt;span class="p">*&lt;/span> &lt;span class="no">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">float&lt;/span>&lt;span class="p">*&lt;/span> &lt;span class="no">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="no">i&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="c1">; i &amp;lt; N; i+=8) {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">__m256&lt;/span> &lt;span class="no">origx&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_load_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;amp;&lt;/span>&lt;span class="no">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">i&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">__m256&lt;/span> &lt;span class="no">value&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">origx&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">__m256&lt;/span> &lt;span class="no">number&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">origx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">origx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">origx&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">float&lt;/span> &lt;span class="no">sign&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">__m256&lt;/span> &lt;span class="no">denom&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_set1_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="no">j&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="c1">; j &amp;lt; terms; j++) {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//value += sign * number / denom;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">__m256&lt;/span> &lt;span class="no">tmp&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_div_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">denom&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">tmp&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">tmp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">_mm256_set1_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">sign&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">value&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_add_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">tmp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">sign&lt;/span> &lt;span class="p">*&lt;/span>&lt;span class="err">=&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//denom *= (2*j+3)*(2*j+2);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">denom&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">denom&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">_mm256_set1_ps&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="no">j&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)*(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="no">j&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)))&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//number *= x[i] * x[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">number&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">_mm256_mul_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">origx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">origx&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="err">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">_mm256_store_ps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;amp;&lt;/span>&lt;span class="no">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">value&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//result[i] = value;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="err">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译成汇编后大致如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">vloadps&lt;/span> &lt;span class="no">xmm0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">addr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">vmulps&lt;/span> &lt;span class="no">xmm1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">xmm0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">xmm0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">vmulps&lt;/span> &lt;span class="no">xmm2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">xmm1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">xmm0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="no">vstoreps&lt;/span> &lt;span class="no">addr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">xmm2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">xmm0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>AVX代表高级矢量扩展, 256代表每次可以处理256位的数据, 也就是8个float.
有多个版本:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-md" data-lang="md">&lt;span class="line">&lt;span class="cl">AVX: 128位 = 4 &lt;span class="ge">* 4 *&lt;/span> 8 = 32字节
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AVX2: 256位 = 8 &lt;span class="ge">* 4 *&lt;/span> 8 = 32字节
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AVX512: 512位 = 16 &lt;span class="ge">* 4 *&lt;/span> 8 = 64字节
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>XMM寄存器是特殊的32字节 256位寄存器, 有16个, 从xmm0到xmm15. 用于支持vectorized SIMD指令.&lt;/p>
&lt;p>那么有没有办法让编译器自动将代码向量化呢?&lt;/p>
&lt;ul>
&lt;li>有,GCC的-O3选项可以自动向量化代码.&lt;/li>
&lt;/ul>
&lt;p>但只有非常结构化,精心编写的代码才能被自动向量化.&lt;/p>
&lt;h3 id="条件">条件&lt;/h3>
&lt;p>如果加入条件判断,如何向量化?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>SIMD可能的做法:
设置一个掩码, 用于标记哪些元素需要执行哪些不需要执行.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-md" data-lang="md">&lt;span class="line">&lt;span class="cl">x &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">0:&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">x &lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="s">-x:&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">翻转:&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">x &lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="s">x:&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">0&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span> &lt;span class="na">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但大多时候只保留了一半的效率,因为每次有可能只有一半的数据需要执行.
不过这很好的保证了一致性,因为分支结束后又回到了同一个执行路径.
即保持一致性,远离分歧.&lt;/p>
&lt;p>coherent execution: 所有的线程都执行相同的指令.&lt;/p>
&lt;p>divergent: a lack of instruction stream coherence.&lt;/p>
&lt;p>对于生成这些矢量操作,要么有聪明的编译器,要么就是有耐心的程序员.&lt;/p>
&lt;h3 id="simd-execution-on-many-modern-gpus">SIMD execution on many modern GPUs&lt;/h3>
&lt;p>SPMD: Single Program Multiple Data&lt;/p>
&lt;p>GPU给的不是SIMD,而是SPMD. 单个程序,多个数据. 意味着程序的不同部分可以执行不同的指令.&lt;/p>
&lt;p>在这之下,还是用SIMD来实现大部分逻辑,采用异构的方式来实现并行.&lt;/p>
&lt;p>但有n个加法, 即两个包含n个值的向量相加.
实际上不是所有单位都在等待计算.而是会先计算出如何分配到块中,底层块的实际大小是32, 32values而不是32byte. 这个被称作SIMD宽度,一般是8-32.&lt;/p>
&lt;h3 id="gpu和cpu的差别">GPU和CPU的差别&lt;/h3>
&lt;p>CPU i7:&lt;/p>
&lt;ul>
&lt;li>4核&lt;/li>
&lt;li>8 SIMD ALUs per core&lt;/li>
&lt;li>每秒大概几千次浮点运算&lt;/li>
&lt;/ul>
&lt;p>GPU: RTX 1080&lt;/p>
&lt;ul>
&lt;li>20 cores&lt;/li>
&lt;li>32 SIMD ALUs per core&lt;/li>
&lt;li>每秒大概8m次浮点运算&lt;/li>
&lt;/ul>
&lt;p>GPU的核心摒弃了分支预测等只用做control,因此可以有更多的ALU.填充进来.&lt;/p>
&lt;p>大概是80:1的原始计算能力差异.&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>三种方法实现并行计算&lt;/p>
&lt;p>多核CPU:&lt;/p>
&lt;ul>
&lt;li>线程级实现并行&lt;/li>
&lt;/ul>
&lt;p>SIMD:&lt;/p>
&lt;ul>
&lt;li>指令级并行&lt;/li>
&lt;li>通过向量化指令实现&lt;/li>
&lt;li>但依赖于事先知道执行的指令优先级顺序&lt;/li>
&lt;/ul>
&lt;p>Superscaler:
exploit ILP within an instruction stream&lt;/p>
&lt;h2 id="paart2-accessing-memory">paart2 accessing memory&lt;/h2>
&lt;p>Memory latency: 从CPU到内存的时间&lt;/p>
&lt;ul>
&lt;li>example: DRAM访问时间 100 cycles, 100ns&lt;/li>
&lt;/ul>
&lt;p>Memory bandwidth: 从内存到CPU的时间&lt;/p>
&lt;ul>
&lt;li>example: 20GB/s 其实不是很快&lt;/li>
&lt;/ul>
&lt;p>Stall: CPU等待内存的时间
当cpu试图进行读取而内存不可用时，就会停等知道内存可用.&lt;/p>
&lt;p>缓存就是为了解决Stall的问题.&lt;/p>
&lt;p>在多级缓存中,靠近核心的缓存是私有的.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l2/img/2023-10-05-16-43-06_hu18c235196594db696f84796cb1ead687_215427_6a724ed12fad9a3240b03da2a1c0ff6b.webp 400w,
/blog/l2/img/2023-10-05-16-43-06_hu18c235196594db696f84796cb1ead687_215427_9ceee60bd8fdd3eb63114e89b322d0b0.webp 760w,
/blog/l2/img/2023-10-05-16-43-06_hu18c235196594db696f84796cb1ead687_215427_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l2/img/2023-10-05-16-43-06_hu18c235196594db696f84796cb1ead687_215427_6a724ed12fad9a3240b03da2a1c0ff6b.webp"
width="760"
height="424"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
这样可以通过写入读出L2缓存的数据来实现通讯,而不需要经过DRAM.&lt;/p>
&lt;p>缓存对延迟和带宽都有帮助.&lt;/p>
&lt;h3 id="prefecthing-reduces-stalls">Prefecthing reduces stalls&lt;/h3>
&lt;p>硬件通常通过预取来&lt;strong>减少延迟&lt;/strong>.
即预测下一次可能会访问的数据,并将其提前读取到缓存中.
不过可能会造成信息泄露&lt;/p>
&lt;p>使用预取的效果:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l2/img/2023-10-05-16-47-27_hu9e755d86af4542e2c891b6ef523b2239_504134_f5783346b6eafcc279c7b7eadc75a246.webp 400w,
/blog/l2/img/2023-10-05-16-47-27_hu9e755d86af4542e2c891b6ef523b2239_504134_e1a197eee3ba4938657b7931766d1231.webp 760w,
/blog/l2/img/2023-10-05-16-47-27_hu9e755d86af4542e2c891b6ef523b2239_504134_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l2/img/2023-10-05-16-47-27_hu9e755d86af4542e2c891b6ef523b2239_504134_f5783346b6eafcc279c7b7eadc75a246.webp"
width="760"
height="556"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="multi-threading-reduces-stalls">Multi-threading reduces stalls&lt;/h3>
&lt;p>让多个线程交替进行, 如asst1/prog2的实现&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l2/img/2023-10-05-16-53-05_hu018724600a89671805482e5e14021481_143403_2c3960edeb7b7146e69b7397f368eed9.webp 400w,
/blog/l2/img/2023-10-05-16-53-05_hu018724600a89671805482e5e14021481_143403_ae5cc04b79da4d5c206e7798358b5dff.webp 760w,
/blog/l2/img/2023-10-05-16-53-05_hu018724600a89671805482e5e14021481_143403_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l2/img/2023-10-05-16-53-05_hu018724600a89671805482e5e14021481_143403_2c3960edeb7b7146e69b7397f368eed9.webp"
width="760"
height="284"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
这也是超线程的实现,在一个核心中多路复用多个指令流.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l2/img/2023-10-05-16-52-35_hu6c2acc8845dfbfbe4383d0d236adfe16_560224_3bc248fc2800b46d51b509a0fd52a08a.webp 400w,
/blog/l2/img/2023-10-05-16-52-35_hu6c2acc8845dfbfbe4383d0d236adfe16_560224_f27aeda0e160298c73ea9b46e9eef185.webp 760w,
/blog/l2/img/2023-10-05-16-52-35_hu6c2acc8845dfbfbe4383d0d236adfe16_560224_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l2/img/2023-10-05-16-52-35_hu6c2acc8845dfbfbe4383d0d236adfe16_560224_3bc248fc2800b46d51b509a0fd52a08a.webp"
width="760"
height="563"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>对于CPU&amp;amp;GPU, 谁来组织线程是不同的做法.(操作系统 or 硬件)&lt;/p>
&lt;p>通常情况下内存要比其他因素更加限制速度&lt;/p></description></item><item><title>L4 Parallel Programing basics</title><link>https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/</guid><description>&lt;p>主要用三种方式实现并行程序(没有进行真正的优化)&lt;/p>
&lt;p>例子 n-body simulation&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-08-15_hue48a4921cc49cf57e882ed55cfa33ec8_653223_300d6e55ae7158eb7f77967a00820153.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-08-15_hue48a4921cc49cf57e882ed55cfa33ec8_653223_6c1a606d891b45c87635608e28e74a79.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-08-15_hue48a4921cc49cf57e882ed55cfa33ec8_653223_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-08-15_hue48a4921cc49cf57e882ed55cfa33ec8_653223_300d6e55ae7158eb7f77967a00820153.webp"
width="760"
height="566"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>创建并行程序的过程&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-12-34_hu8ca133d8fdd22bace72d28bc0e9f928f_717995_d7d48a19c6b8d98d4bb025be7407106a.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-12-34_hu8ca133d8fdd22bace72d28bc0e9f928f_717995_becf2ea517713a91c8190995e7cc73a3.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-12-34_hu8ca133d8fdd22bace72d28bc0e9f928f_717995_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-12-34_hu8ca133d8fdd22bace72d28bc0e9f928f_717995_d7d48a19c6b8d98d4bb025be7407106a.webp"
width="760"
height="569"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="1-decomposition">1. Decomposition&lt;/h3>
&lt;p>主要思想: 创造至少足够的任务让所有的处理单元都有事情做&lt;/p>
&lt;p>Amdahl&amp;rsquo;s Law: 串行部分的比例越大, 并行程序的加速比就越小,因为增加处理单元的数量并不能减少串行部分的时间&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-17-14_hu6b8d57c08ba6ce2d6ea30fe8baefa3d4_659251_0e9ae484b47d7b98ce1bcb4d1368d085.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-17-14_hu6b8d57c08ba6ce2d6ea30fe8baefa3d4_659251_f894a7fc4c613f87e7daa182688bfbb2.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-17-14_hu6b8d57c08ba6ce2d6ea30fe8baefa3d4_659251_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-17-14_hu6b8d57c08ba6ce2d6ea30fe8baefa3d4_659251_0e9ae484b47d7b98ce1bcb4d1368d085.webp"
width="760"
height="570"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-25-06_hu46e8e5fd6fd42d95218680164502ccdb_474311_26ca6d976940fa163bdb00a72d487ab2.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-25-06_hu46e8e5fd6fd42d95218680164502ccdb_474311_7d794c4862846294ba020113fcbd3a99.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-25-06_hu46e8e5fd6fd42d95218680164502ccdb_474311_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-25-06_hu46e8e5fd6fd42d95218680164502ccdb_474311_26ca6d976940fa163bdb00a72d487ab2.webp"
width="760"
height="562"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>分解的任务更多是程序员的工作, 编译器还无法很好的帮助我们&lt;/p>
&lt;h3 id="2assignment">2.Assignment&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-27-56_huac3192b45d26432b1fbf3a13b42c3714_518393_f4b6891d6e8836e5b078c7b6aec5aadd.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-27-56_huac3192b45d26432b1fbf3a13b42c3714_518393_65d2c13a7bb828fa5c068bca90139c7a.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-27-56_huac3192b45d26432b1fbf3a13b42c3714_518393_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-27-56_huac3192b45d26432b1fbf3a13b42c3714_518393_f4b6891d6e8836e5b078c7b6aec5aadd.webp"
width="760"
height="568"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>需要考虑让每个处理单元尽可能减少沟通.&lt;/p>
&lt;p>有一种方法是随机分配,但会最大化沟通
还有一个极端是全部由一个处理单元完成,但是这样就没有并行了&lt;/p>
&lt;p>这是另一个挑战&lt;/p>
&lt;p>分配可以静态也可以动态发生&lt;/p>
&lt;p>静态: 在程序开始时就确定好.
动态: 在程序运行时分配
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-32-26_hue221ecbb5d082188d974279744465ae6_739363_469ecdbd4a9b8454fd47173ba40269f8.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-32-26_hue221ecbb5d082188d974279744465ae6_739363_b3390ceebc8efeab9b8139e9845c32b3.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-32-26_hue221ecbb5d082188d974279744465ae6_739363_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-32-26_hue221ecbb5d082188d974279744465ae6_739363_469ecdbd4a9b8454fd47173ba40269f8.webp"
width="760"
height="562"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>静态分配的问题:&lt;/p>
&lt;ul>
&lt;li>无法适应不同的输入(如:工作量不均匀)&lt;/li>
&lt;li>无法适应不同的处理单元数量&lt;/li>
&lt;/ul>
&lt;p>动态分配: 通过消息传递来实现, 每个处理单元都有一个队列, 用来存放需要处理的任务(tasks). 当一个处理单元完成了一个任务, 就从队列中取出一个任务来处理
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-41-07_hu6c85e4ef3ddfa256fd5b280b3f1947d5_610384_1ec3e9269d1b9769ff7549ca3e7ff991.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-41-07_hu6c85e4ef3ddfa256fd5b280b3f1947d5_610384_435b8b910d0cf444fe612cbec0958114.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-41-07_hu6c85e4ef3ddfa256fd5b280b3f1947d5_610384_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-41-07_hu6c85e4ef3ddfa256fd5b280b3f1947d5_610384_1ec3e9269d1b9769ff7549ca3e7ff991.webp"
width="760"
height="526"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>缺点:
队列需要同步, 会有额外的开销&lt;/p>
&lt;h3 id="3-orchestration-编排阶段">3. Orchestration 编排阶段&lt;/h3>
&lt;p>编排的目标是:
减少沟通和同步的成本, preserve &lt;strong>locality&lt;/strong> of data reference, reduce overhead.&lt;/p>
&lt;h3 id="4mapping">4.mapping&lt;/h3>
&lt;p>这是程序员最不需要关心的, 交给编译器就好了
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-19-48-55_hu7d458683065d371a53e4f3bbced0dc5b_674886_dd70cb98c5d235d4af085a8b85d717eb.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-48-55_hu7d458683065d371a53e4f3bbced0dc5b_674886_d0427d53091c240e55a9032cbafa5c74.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-19-48-55_hu7d458683065d371a53e4f3bbced0dc5b_674886_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-19-48-55_hu7d458683065d371a53e4f3bbced0dc5b_674886_dd70cb98c5d235d4af085a8b85d717eb.webp"
width="760"
height="574"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="example">example&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-28-08_hu4bc1ad631611432311f7608937c4d974_532911_378f26ab2469867248ef1ea890a944f5.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-28-08_hu4bc1ad631611432311f7608937c4d974_532911_2b961a92c582af81689691d4ee62333d.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-28-08_hu4bc1ad631611432311f7608937c4d974_532911_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-28-08_hu4bc1ad631611432311f7608937c4d974_532911_378f26ab2469867248ef1ea890a944f5.webp"
width="760"
height="568"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>顺序程序:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-29-38_huef0e497a0a3be02bd46e8912ca469521_552238_b0a20d7e5de93d8bfdaa4a330e9fd80e.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-29-38_huef0e497a0a3be02bd46e8912ca469521_552238_eb0f8d018192eebde00a35c3f9fa78f1.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-29-38_huef0e497a0a3be02bd46e8912ca469521_552238_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-29-38_huef0e497a0a3be02bd46e8912ca469521_552238_b0a20d7e5de93d8bfdaa4a330e9fd80e.webp"
width="760"
height="579"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>那么如何并行执行呢?&lt;/p>
&lt;h3 id="step1-identify-dependenciesproblem-decomposition">Step1: identify dependencies(problem decomposition)&lt;/h3>
&lt;p>因为会迭代很多次,所以会引起不同迭代次数的数据竞争.&lt;/p>
&lt;p>有一种划分方法是沿着对角线:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-32-11_hua770f7c3378cf5e52779686442875f74_850357_eac19ef97378e0332e37b6120c1b7460.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-32-11_hua770f7c3378cf5e52779686442875f74_850357_11f821c7ea9de7edb4def82251e9efdf.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-32-11_hua770f7c3378cf5e52779686442875f74_850357_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-32-11_hua770f7c3378cf5e52779686442875f74_850357_eac19ef97378e0332e37b6120c1b7460.webp"
width="760"
height="617"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>不足之处是:&lt;/p>
&lt;ul>
&lt;li>有些对角线很短, 负载不均衡&lt;/li>
&lt;li>需要额外的计算(对角线下标)&lt;/li>
&lt;/ul>
&lt;p>另一种方法是滚动数组:
用两个数组, 一个用来存放当前迭代的结果, 一个用来存放上一次迭代的结果&lt;/p>
&lt;p>这样计算时不会有数据竞争.&lt;/p>
&lt;p>但很多人不希望有额外的内存开销.&lt;/p>
&lt;p>事实上使用的是红黑排序.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-37-00_hub6902c6359b72f71195b1f839828355e_586963_5d8ef9fd25d94e005487943ac9894f81.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-37-00_hub6902c6359b72f71195b1f839828355e_586963_34f7f339aea72b213c8a668102485760.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-37-00_hub6902c6359b72f71195b1f839828355e_586963_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-37-00_hub6902c6359b72f71195b1f839828355e_586963_5d8ef9fd25d94e005487943ac9894f81.webp"
width="760"
height="566"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>每次迭代只更新红色的部分, 然后再翻转.
这样就不需要复制数组了.&lt;/p>
&lt;h3 id="step2-assign-tasks">Step2: assign tasks&lt;/h3>
&lt;p>我们不把每一个元素作为一个任务,而是把每一行作为一个任务.&lt;/p>
&lt;p>同时:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-41-36_hubdceb7f300441a8766ba1431277c7cc4_755276_711347c7e817fe638550eebcc34b2faf.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-41-36_hubdceb7f300441a8766ba1431277c7cc4_755276_accd9f6717d58f6ab57f5c5748534b83.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-41-36_hubdceb7f300441a8766ba1431277c7cc4_755276_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-41-36_hubdceb7f300441a8766ba1431277c7cc4_755276_711347c7e817fe638550eebcc34b2faf.webp"
width="760"
height="569"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>红黑排序有一个同步的步骤: 必须等待所有的红色部分都计算完毕, 才能开始计算黑色部分.&lt;/p>
&lt;p>为了最小化沟通, 相邻行作为捆包是更好的选择, 这样只在更新边界时需要沟通.&lt;/p>
&lt;h3 id="三种实现方法">三种实现方法&lt;/h3>
&lt;h4 id="data-parallel-expression-of-solver">Data-parallel expression of solver&lt;/h4>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-45-17_hu05b94560b10f4189a08c6cb5f48bfd71_676413_6071d1eabf8eb456c38c7ab568c29c85.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-45-17_hu05b94560b10f4189a08c6cb5f48bfd71_676413_bd6ad13f2f63aba99999c5aa7836e481.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-45-17_hu05b94560b10f4189a08c6cb5f48bfd71_676413_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-45-17_hu05b94560b10f4189a08c6cb5f48bfd71_676413_6071d1eabf8eb456c38c7ab568c29c85.webp"
width="760"
height="568"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>这个的特点是系统做了很多工作, 程序只需要指定哪里需要并行.&lt;/p>
&lt;h4 id="shared-address-space-code">shared-address-space code&lt;/h4>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-07_hud4acc75f44d57621c38bcef37ecf69ad_501385_5ac6b61cbfefc82f7f4c733828aa1374.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-07_hud4acc75f44d57621c38bcef37ecf69ad_501385_4fee6b612cf87991254c9c57b904ce52.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-07_hud4acc75f44d57621c38bcef37ecf69ad_501385_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-07_hud4acc75f44d57621c38bcef37ecf69ad_501385_5ac6b61cbfefc82f7f4c733828aa1374.webp"
width="760"
height="576"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>version1 :
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-41_hu397a5c725eab7f2ec6ba703b751c7761_745157_533e533992488749606b9438d64b007c.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-41_hu397a5c725eab7f2ec6ba703b751c7761_745157_0b75e1a598b6dc90f1d0988f46b9c18f.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-41_hu397a5c725eab7f2ec6ba703b751c7761_745157_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-49-41_hu397a5c725eab7f2ec6ba703b751c7761_745157_533e533992488749606b9438d64b007c.webp"
width="760"
height="577"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但是有个锁会使得程序变慢
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-51-52_hue0bce16ea2bc879cd28793bae80b6fdb_858650_008576a8562e19a9b68a706920f134f5.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-51-52_hue0bce16ea2bc879cd28793bae80b6fdb_858650_162d8768bd53d226b92aa1e3c8b841ae.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-51-52_hue0bce16ea2bc879cd28793bae80b6fdb_858650_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-51-52_hue0bce16ea2bc879cd28793bae80b6fdb_858650_008576a8562e19a9b68a706920f134f5.webp"
width="760"
height="564"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>version2:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-53-12_hu36b9d35db431827e24b4b081d064641f_693240_d83b71c546167384983d9a1ef9afcab6.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-53-12_hu36b9d35db431827e24b4b081d064641f_693240_0b8c610136d7c28529574edd2eba5bbd.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-53-12_hu36b9d35db431827e24b4b081d064641f_693240_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-53-12_hu36b9d35db431827e24b4b081d064641f_693240_d83b71c546167384983d9a1ef9afcab6.webp"
width="760"
height="574"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>有三个barrier来保证红黑顺序
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-54-07_hudaa8f328867329c6ba35530421eebfde_512012_66c627513b8313419cea65ed7635bd4f.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-54-07_hudaa8f328867329c6ba35530421eebfde_512012_b8e8413bb73b3bc460895c08c728e194.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-54-07_hudaa8f328867329c6ba35530421eebfde_512012_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-54-07_hudaa8f328867329c6ba35530421eebfde_512012_66c627513b8313419cea65ed7635bd4f.webp"
width="760"
height="545"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
为什么是三个呢?&lt;/p>
&lt;p>每一部分都要被分割&lt;/p>
&lt;p>最后一个是为了diff的分割
第一个是为了myDiff的分割
第二个是为了diff的分割&lt;/p>
&lt;p>所以可以使用diff数组&lt;/p>
&lt;p>version3:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-57-40_hu0d1996844693b134151c8d82ee5425bd_617614_38e643162361d034d8e8ed437c443f84.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-57-40_hu0d1996844693b134151c8d82ee5425bd_617614_5ce102c5ce45f0dbc1dac41b6096bf7b.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-57-40_hu0d1996844693b134151c8d82ee5425bd_617614_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-57-40_hu0d1996844693b134151c8d82ee5425bd_617614_38e643162361d034d8e8ed437c443f84.webp"
width="760"
height="566"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>barrier的问题:
barrier还是有点笨重, 这会强制所有线程到一个起跑线
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-20-59-07_huaecac9eeb7b6b74f7510d557e9b6e26a_572209_41fd0f188cd297c382afe2bc81211c7e.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-59-07_huaecac9eeb7b6b74f7510d557e9b6e26a_572209_8f25e59fa55106ba0b7456f62971f92b.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-20-59-07_huaecac9eeb7b6b74f7510d557e9b6e26a_572209_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-20-59-07_huaecac9eeb7b6b74f7510d557e9b6e26a_572209_41fd0f188cd297c382afe2bc81211c7e.webp"
width="760"
height="584"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但如果有更精确的信息, 只需要等待依赖的线程就好了&lt;/p>
&lt;h4 id="message-passing-code">message-passing code&lt;/h4>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-21-00-57_hue70b1faf829cca87f081e5bc424c7628_594886_3dcdaa90f3dc0b6edb968742fde6788b.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-00-57_hue70b1faf829cca87f081e5bc424c7628_594886_5f9edad42ee570536dbb24cbbf0e2313.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-00-57_hue70b1faf829cca87f081e5bc424c7628_594886_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-21-00-57_hue70b1faf829cca87f081e5bc424c7628_594886_3dcdaa90f3dc0b6edb968742fde6788b.webp"
width="760"
height="574"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>需要有额外的划分,来存储相邻处理器的数据&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-21-02-04_hu4c6d7b1bda54071ab3467deea4424d30_799693_194c426e9f4bd30f2c0f56092d87ed1d.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-02-04_hu4c6d7b1bda54071ab3467deea4424d30_799693_201679da15e21745058c91d98624422d.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-02-04_hu4c6d7b1bda54071ab3467deea4424d30_799693_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-21-02-04_hu4c6d7b1bda54071ab3467deea4424d30_799693_194c426e9f4bd30f2c0f56092d87ed1d.webp"
width="760"
height="579"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>同时,在最后计算diff时,需要等待所有的处理器都计算完毕.
这里选中了一个processor zero来计算diff, 其他的处理器都发送自己的diff给它.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-21-04-12_hu40d62451cdfd210f1a8f99acfc52e78e_920652_34bd425bc4ebe88a31f4957864cd7fe4.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-04-12_hu40d62451cdfd210f1a8f99acfc52e78e_920652_a4c392a2099e53a7ae0b5f3bc237eb21.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-04-12_hu40d62451cdfd210f1a8f99acfc52e78e_920652_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-21-04-12_hu40d62451cdfd210f1a8f99acfc52e78e_920652_34bd425bc4ebe88a31f4957864cd7fe4.webp"
width="760"
height="562"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但沟通时有可能发生死锁. 因为每个处理器都在等待其他处理器的消息, 但是自己的消息又没有发送出去.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-21-06-02_huc087edeeaded9dcd70e781a8caf24d42_565877_7664ca781070f75ef349661a85c63958.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-06-02_huc087edeeaded9dcd70e781a8caf24d42_565877_68b90074dc227e55c1a49326a35e5e23.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-06-02_huc087edeeaded9dcd70e781a8caf24d42_565877_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-21-06-02_huc087edeeaded9dcd70e781a8caf24d42_565877_7664ca781070f75ef349661a85c63958.webp"
width="760"
height="574"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>所以需要分奇偶来发送&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l4-parallel-programing-basics/img/2023-10-14-21-07-24_hu36e0868a51b260305696d6733ba21ec5_677923_a6befff3da24916d55d41b8bb71c4d75.webp 400w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-07-24_hu36e0868a51b260305696d6733ba21ec5_677923_1053a357a9c5aa6773e8e220d458f49a.webp 760w,
/blog/l4-parallel-programing-basics/img/2023-10-14-21-07-24_hu36e0868a51b260305696d6733ba21ec5_677923_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l4-parallel-programing-basics/img/2023-10-14-21-07-24_hu36e0868a51b260305696d6733ba21ec5_677923_a6befff3da24916d55d41b8bb71c4d75.webp"
width="760"
height="590"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p></description></item><item><title>L5 Work distribution and scheduling</title><link>https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/</guid><description>&lt;h2 id="三种分配策略的总结">三种分配策略的总结&lt;/h2>
&lt;h3 id="静态分配">静态分配&lt;/h3>
&lt;p>优点:&lt;/p>
&lt;ul>
&lt;li>几乎没有运行时的开销(关于分配)&lt;/li>
&lt;/ul>
&lt;p>缺点:&lt;/p>
&lt;ul>
&lt;li>不总是均匀的分配任务&lt;/li>
&lt;/ul>
&lt;p>什么时候使用:&lt;/p>
&lt;ul>
&lt;li>(最简单的例子) 当知道每个任务的工作量相当的时候&lt;/li>
&lt;li>当每个任务的工作量是可预测的,但不一定相等的时候&lt;/li>
&lt;/ul>
&lt;p>半静态分配&lt;/p>
&lt;ul>
&lt;li>场景: 当工作量会随时间发生改变,当变化比较慢时.(任务量不可预测)&lt;/li>
&lt;li>做法: 定期的重新分配任务
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-17-21_huc4d2be410d647016a3206e85b20b8291_1107621_5880584d2300544cd55841de43263248.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-17-21_huc4d2be410d647016a3206e85b20b8291_1107621_68fb3d31df2ca327d35ff36a5b6491e8.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-17-21_huc4d2be410d647016a3206e85b20b8291_1107621_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-17-21_huc4d2be410d647016a3206e85b20b8291_1107621_5880584d2300544cd55841de43263248.webp"
width="760"
height="574"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;h3 id="动态分配">动态分配&lt;/h3>
&lt;p>场景: 当每个任务的工作量或者任务的数量是不可预测的时候&lt;/p>
&lt;p>每个计算单元都要去获取任务&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-25-21_hua6a3c077cced5abdb9b7bbaa576a7ec8_874748_13253e7a7b20fe3aefc71947e01ae37c.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-25-21_hua6a3c077cced5abdb9b7bbaa576a7ec8_874748_7546cdc1ebd3007df3f8be6534e94e4f.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-25-21_hua6a3c077cced5abdb9b7bbaa576a7ec8_874748_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-25-21_hua6a3c077cced5abdb9b7bbaa576a7ec8_874748_13253e7a7b20fe3aefc71947e01ae37c.webp"
width="760"
height="552"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但这样的实现, 每次的任务可能会很少,
会使得更多的开销在争夺锁(获取任务的锁)上面.&lt;/p>
&lt;p>有一个办法是一次性计算更多的任务.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-26-57_huf835b5eac9d37b49ce3c30a88aace822_752046_764dee7c21fd261f1ea42dd03deaac94.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-26-57_huf835b5eac9d37b49ce3c30a88aace822_752046_d2c2f29cd40410d16e80729d86a1a85a.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-26-57_huf835b5eac9d37b49ce3c30a88aace822_752046_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-15-17-26-57_huf835b5eac9d37b49ce3c30a88aace822_752046_764dee7c21fd261f1ea42dd03deaac94.webp"
width="760"
height="535"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但分配更多的任务可能会导致负载不平衡.&lt;/p>
&lt;p>因此需要在分配任务数量上要找一个平衡, 不花费过多的时间在争夺锁上, 也不会导致负载不平衡.&lt;/p>
&lt;p>&lt;strong>Schedule long tasks first&lt;/strong>
但如果有一个大任务在最后，将出现如下情况：
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-53-07_hu91d4bd1fcd6b2d3a4a21166e27be8ac1_532596_a319b7fbc769ba12a45b529df1c65503.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-53-07_hu91d4bd1fcd6b2d3a4a21166e27be8ac1_532596_dbd94cdf2d21f71697636c8d4408b78a.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-53-07_hu91d4bd1fcd6b2d3a4a21166e27be8ac1_532596_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-53-07_hu91d4bd1fcd6b2d3a4a21166e27be8ac1_532596_a319b7fbc769ba12a45b529df1c65503.webp"
width="760"
height="567"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>因此，如果知道有一个大任务，可以提前处理，而不是放到最后一个.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-56-01_hubaef0c3f89c826d5b1d5dd6890516517_550046_ac355852c6e4b1b13a70e8840c1e0592.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-56-01_hubaef0c3f89c826d5b1d5dd6890516517_550046_ec03d531275ed3b43bc45e5ddf89fe21.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-56-01_hubaef0c3f89c826d5b1d5dd6890516517_550046_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-08-56-01_hubaef0c3f89c826d5b1d5dd6890516517_550046_ac355852c6e4b1b13a70e8840c1e0592.webp"
width="760"
height="566"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h4 id="work-stealing">Work stealing&lt;/h4>
&lt;p>当一个计算单元没有任务的时候, 从其他计算单元那里偷取任务.&lt;/p>
&lt;p>实现的一些问题:&lt;/p>
&lt;p>1.从哪个线程开始偷取任务呢?
有随机的, 也有从最后一个开始偷取的.&lt;/p>
&lt;p>2.应该偷取多少任务呢?
应该偷取尽可能多一些,这样可以减少偷取任务的次数.&lt;/p>
&lt;p>3.怎样检测一个计算单元是否有任务呢?
可能会循环遍历,&lt;/p>
&lt;p>4.使用本地队列(分布式队列)会更快(在有互斥锁的情况下)&lt;/p>
&lt;p>还有一种方式是使用特殊的数据结构来存储任务间的依赖关系, 从而可以在任务完成的时候, 自动的调度下一个任务.
缺点是额外开销
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-32-31_hu882ba279ae3cd004bfdf46a1a891da1b_594941_ef134a9b1bd58c72a760187990732c21.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-32-31_hu882ba279ae3cd004bfdf46a1a891da1b_594941_c2a7dd664f517f7aea7b9a0f8edb78b1.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-32-31_hu882ba279ae3cd004bfdf46a1a891da1b_594941_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-32-31_hu882ba279ae3cd004bfdf46a1a891da1b_594941_ef134a9b1bd58c72a760187990732c21.webp"
width="760"
height="564"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="常见的并行编程模式">常见的并行编程模式&lt;/h2>
&lt;p>循环
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-42-32_hua668693ef93510a897eb16b96202656c_595050_512dd4ec637d5bdea75de7f988ef7ae6.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-42-32_hua668693ef93510a897eb16b96202656c_595050_d23d15f8a4c93c3c3ca1dbe1f069c539.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-42-32_hua668693ef93510a897eb16b96202656c_595050_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-42-32_hua668693ef93510a897eb16b96202656c_595050_512dd4ec637d5bdea75de7f988ef7ae6.webp"
width="760"
height="571"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>创建显示线程
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-43-32_hu787070f973929fd30cb38c336bbde5e3_506261_1bd6943adefdb492091091335d4f6790.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-43-32_hu787070f973929fd30cb38c336bbde5e3_506261_fd4d25059248640d13177979d28dfbe2.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-43-32_hu787070f973929fd30cb38c336bbde5e3_506261_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-43-32_hu787070f973929fd30cb38c336bbde5e3_506261_1bd6943adefdb492091091335d4f6790.webp"
width="760"
height="575"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>递归时的并行&lt;/p>
&lt;p>递归可以编写出简单的代码, 但是递归的并行化是比较困难的.&lt;/p>
&lt;p>因为递归的并行化需要在递归的每一层都要进行并行化, 并且需要在每一层都要进行同步.&lt;/p>
&lt;p>但只要有独立的子问题, 就可以创造很多潜在的并行性.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-45-15_hue5ded81e796c68dee0b0618a6e0920dd_758799_83e684b20ad601fbffd05f681e98b070.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-45-15_hue5ded81e796c68dee0b0618a6e0920dd_758799_f656576fbd7c80b31534d8c55418bd72.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-45-15_hue5ded81e796c68dee0b0618a6e0920dd_758799_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-45-15_hue5ded81e796c68dee0b0618a6e0920dd_758799_83e684b20ad601fbffd05f681e98b070.webp"
width="760"
height="576"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="fork-join-pattern">Fork-Join pattern&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-47-18_hu0f4ed4729d5da33b2852ec7891c96ad1_815835_a69bafaace4900b4f73d3c5cf6d9df30.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-47-18_hu0f4ed4729d5da33b2852ec7891c96ad1_815835_56c44942eb8197b75e566cfc48810c8c.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-47-18_hu0f4ed4729d5da33b2852ec7891c96ad1_815835_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-47-18_hu0f4ed4729d5da33b2852ec7891c96ad1_815835_a69bafaace4900b4f73d3c5cf6d9df30.webp"
width="760"
height="567"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>cilk_spawn: 会创建一个新的线程, 并且在新的线程中执行函数, 并且不会阻塞当前的线程.&lt;/p>
&lt;p>cilk_sync: 会等待所有的子线程执行完毕, 并且会阻塞当前的线程.&lt;/p>
&lt;p>每个函数的结尾隐式的调用了cilk_sync.&lt;/p>
&lt;p>example:
有一个主线程+fork的线程.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-49-40_hu6b2a13e8c61edb007acb8c68ac6cc24d_722419_3330ee920e588071cd2cc18ca84067e5.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-49-40_hu6b2a13e8c61edb007acb8c68ac6cc24d_722419_9e9c62ec66af9b2387fa7b6c712555a7.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-49-40_hu6b2a13e8c61edb007acb8c68ac6cc24d_722419_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-49-40_hu6b2a13e8c61edb007acb8c68ac6cc24d_722419_3330ee920e588071cd2cc18ca84067e5.webp"
width="760"
height="573"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>快排的例子:
在规模较小的时候, 使用串行的快排. 这样可以减少线程的创建和销毁的开销.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-53-13_hub5a36810580b89ed0b40df5af3f5878e_872565_77c644f2c45c972574415e31fe8b84ab.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-53-13_hub5a36810580b89ed0b40df5af3f5878e_872565_9e81ba5d6c1f18ad17e02f7b2e7199ab.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-53-13_hub5a36810580b89ed0b40df5af3f5878e_872565_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-09-53-13_hub5a36810580b89ed0b40df5af3f5878e_872565_77c644f2c45c972574415e31fe8b84ab.webp"
width="760"
height="560"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>不要忽略了抽象和实现的区别.&lt;/strong>
spawn不是生成一个具体的线程, 而是声明这里有一个可以并行的任务.&lt;/p>
&lt;p>任务的数量至少需要比硬件线程多,但也不能大于100倍.
8倍是一个比较好的选择.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-01-49_huac690f525b910e3151d41f9e83b20825_725705_68336c190f129e2e078badf9a4caf4bc.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-01-49_huac690f525b910e3151d41f9e83b20825_725705_3b3a6a1947f775d0efca7c18769e335e.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-01-49_huac690f525b910e3151d41f9e83b20825_725705_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-01-49_huac690f525b910e3151d41f9e83b20825_725705_68336c190f129e2e078badf9a4caf4bc.webp"
width="760"
height="500"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="cilk的实现">Cilk的实现&lt;/h2>
&lt;p>假设我们要去实现clik_spawn 和 cilk_sync
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-04-28_huef2c8d13f3726a6bfffc8a2b7080cdd9_608019_2241e98cd40fefed3853c0a484c7dd60.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-04-28_huef2c8d13f3726a6bfffc8a2b7080cdd9_608019_cf4047faa49cace03c1989649aefba72.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-04-28_huef2c8d13f3726a6bfffc8a2b7080cdd9_608019_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-04-28_huef2c8d13f3726a6bfffc8a2b7080cdd9_608019_2241e98cd40fefed3853c0a484c7dd60.webp"
width="760"
height="566"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>线程池的实现(CILB):&lt;/p>
&lt;p>thread1 需要找到一种方法来发现有新的任务可以执行.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-15-52_hu6062ae083bda93fd6d07b13dc77a746e_457683_347386d8c0afd36698d48e122a0c1825.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-15-52_hu6062ae083bda93fd6d07b13dc77a746e_457683_b919d83502c83d6232a5d7d03bf95db5.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-15-52_hu6062ae083bda93fd6d07b13dc77a746e_457683_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-15-52_hu6062ae083bda93fd6d07b13dc77a746e_457683_347386d8c0afd36698d48e122a0c1825.webp"
width="760"
height="593"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>所以thread 0不能简单的调用foo, 它的作用是执行foo.&lt;/p>
&lt;p>但需要在执行foo前,把特殊的东西放入工作队列中.&lt;/p>
&lt;p>此时如果另一个线程突然变得空闲, 它就可以从工作队列中获取任务.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-26-10_hu0eab66eeb24e199a2ed3f547cb3fdbbd_614646_2713f0abd710a06c367e46d38effce5b.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-26-10_hu0eab66eeb24e199a2ed3f547cb3fdbbd_614646_df1c7581b35efeb6316a776aaa66ab1c.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-26-10_hu0eab66eeb24e199a2ed3f547cb3fdbbd_614646_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-26-10_hu0eab66eeb24e199a2ed3f547cb3fdbbd_614646_2713f0abd710a06c367e46d38effce5b.webp"
width="760"
height="564"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>为什么不把foo放入队列, 直接执行bar呢?(上面是执行foo bar放入队列)&lt;/p>
&lt;p>这涉及到 continuation first(child stealing) 和 child first(continuation stealing) 的问题.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-34-20_hufa1a658f74f9b4a90809f48194848857_696273_fe7736de0427a88b81b2c7d0be7754ad.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-34-20_hufa1a658f74f9b4a90809f48194848857_696273_cb1ddf6b4689a69077e0506ca9f22a9f.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-34-20_hufa1a658f74f9b4a90809f48194848857_696273_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-34-20_hufa1a658f74f9b4a90809f48194848857_696273_fe7736de0427a88b81b2c7d0be7754ad.webp"
width="760"
height="567"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-36-22_huf67bed5371ecbc7f84d380e6087a42a4_776363_40fcf8e5060f66ffb6e517fa52d3f196.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-36-22_huf67bed5371ecbc7f84d380e6087a42a4_776363_ecff36fcf2da6712dd8f81729708df45.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-36-22_huf67bed5371ecbc7f84d380e6087a42a4_776363_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-36-22_huf67bed5371ecbc7f84d380e6087a42a4_776363_40fcf8e5060f66ffb6e517fa52d3f196.webp"
width="760"
height="570"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>continuation first会导致线程0的大量工作排队.(广度优先队列)
child first会导致其他线程把下一个任务偷走时, 会导致线程0的工作队列为空.(深度优先队列)&lt;/p>
&lt;p>实际上child first是合理的.(在递归中是最合适的)&lt;/p>
&lt;p>在递归程序中,会先将所有深度的任务放入队列中.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-48-23_hu66dd5b38ec1cb04147fc744f7a6b03af_704850_1c76cdef873f64be703a63df2b13a2f4.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-48-23_hu66dd5b38ec1cb04147fc744f7a6b03af_704850_46b3b02be3b190b15285021529e61fd4.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-48-23_hu66dd5b38ec1cb04147fc744f7a6b03af_704850_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-48-23_hu66dd5b38ec1cb04147fc744f7a6b03af_704850_1c76cdef873f64be703a63df2b13a2f4.webp"
width="760"
height="567"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>按照之前优先执行大任务的策略, 其他线程会优先从队列顶部(先入的)中偷取任务.
因为在分而治之的算法中, 大任务会被分解成小任务, 因此大任务会先被放入队列中.&lt;/p>
&lt;p>实际中使用了双端队列:&lt;/p>
&lt;ul>
&lt;li>从队列头部获取任务&lt;/li>
&lt;li>从队列尾部放入任务&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-52-42_hu052208d2ad01dc27d0149b8c74cf57ec_616787_49c97faec0e975c38ed21774d1caec1a.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-52-42_hu052208d2ad01dc27d0149b8c74cf57ec_616787_7bf3fcf44cbc5d63c27fb37d53c448c5.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-52-42_hu052208d2ad01dc27d0149b8c74cf57ec_616787_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-52-42_hu052208d2ad01dc27d0149b8c74cf57ec_616787_49c97faec0e975c38ed21774d1caec1a.webp"
width="760"
height="571"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>但之前有一个问题: 很多队列,该从哪个队列中获取任务呢?
也许是随机的. 偷取任务的时候, 不随机的更可能会引起负载不均衡.&lt;/p>
&lt;p>本地线程访问的是本地队列的尾部, 偷取时也是放入尾部.(偷其他队列的头部)
这样也有利于空间局部性.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-58-04_huef94ca176ae555045fd9f51c7aa174d2_800473_b158461eeda1557071d3b4c63c8e3fe8.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-58-04_huef94ca176ae555045fd9f51c7aa174d2_800473_9d3eab37557ed64ca33376a218896efe.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-58-04_huef94ca176ae555045fd9f51c7aa174d2_800473_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-10-58-04_huef94ca176ae555045fd9f51c7aa174d2_800473_b158461eeda1557071d3b4c63c8e3fe8.webp"
width="760"
height="567"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>那么如何实现同步呢?&lt;/p>
&lt;p>Example1: stalling join policy
拖延政策: 所有我创建的任务都必须完成后, 我才能继续执行.
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-01-00_hu7eda749a9f38115f90e5a19b6e792dce_643232_b716a896fce22ab605c4290cace396e0.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-01-00_hu7eda749a9f38115f90e5a19b6e792dce_643232_5b91177fc136336170132f872072d0ec.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-01-00_hu7eda749a9f38115f90e5a19b6e792dce_643232_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-01-00_hu7eda749a9f38115f90e5a19b6e792dce_643232_b716a896fce22ab605c4290cace396e0.webp"
width="760"
height="572"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Example2: greedy join policy(cilk的实现方法)&lt;/p>
&lt;p>有一个跟踪数据结构,但那个东西可以四处移动.&lt;/p>
&lt;p>最后一个完成的线程会偷走这个数据结构&lt;/p>
&lt;p>所以一旦最后一个任务完成, 就可以继续执行了.&lt;/p>
&lt;p>这样不会浪费时间等待同步.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-04-26_hu803153c610f9240dc37b9df9cd593271_620138_b52217a08b08c5bd606846c2329641a3.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-04-26_hu803153c610f9240dc37b9df9cd593271_620138_140ed442354f7ce867bd06440a9c0b7d.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-04-26_hu803153c610f9240dc37b9df9cd593271_620138_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-04-26_hu803153c610f9240dc37b9df9cd593271_620138_b52217a08b08c5bd606846c2329641a3.webp"
width="760"
height="570"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>第一个方法实现起来更简单,但速度更慢.
因为它总是首线程只等待其他线程完成.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-09-58_hu4b706f34d698b4c5ca13bee75ebcc6f0_719518_a9b876038607b0430400742d4c1f6534.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-09-58_hu4b706f34d698b4c5ca13bee75ebcc6f0_719518_9d10c292ac70375ca23c48a9647fc5ab.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-09-58_hu4b706f34d698b4c5ca13bee75ebcc6f0_719518_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-09-58_hu4b706f34d698b4c5ca13bee75ebcc6f0_719518_a9b876038607b0430400742d4c1f6534.webp"
width="760"
height="570"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-10-26_hu503fb65c817ae1cedfa6301188230a3a_411373_6fa573df606795d8a26e44006a6d0209.webp 400w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-10-26_hu503fb65c817ae1cedfa6301188230a3a_411373_1efd01f734283ebc6881240856c4c447.webp 760w,
/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-10-26_hu503fb65c817ae1cedfa6301188230a3a_411373_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l5-work-distribution-and-scheduling/img/2023-10-16-11-10-26_hu503fb65c817ae1cedfa6301188230a3a_411373_6fa573df606795d8a26e44006a6d0209.webp"
width="760"
height="421"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p></description></item><item><title>L6</title><link>https://ysyyhhh.github.io/blog/l6/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/l6/</guid><description>&lt;p>虚拟文件系统&lt;/p>
&lt;p>/proc/cpuinfo&lt;/p>
&lt;ul>
&lt;li>model name&lt;/li>
&lt;li>cpu MHz - 频率&lt;/li>
&lt;li>cache size - 缓存大小&lt;/li>
&lt;li>siblings - 逻辑cpu数量&lt;/li>
&lt;li>processor - 逻辑cpu编号&lt;/li>
&lt;li>cpu cores - 物理cpu数量&lt;/li>
&lt;li>core id - 物理cpu编号&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>这样查看的cpu数量很多&lt;/p>
&lt;p>siblings是逻辑cpu的数量&lt;/p>
&lt;p>cpu cores是物理cpu的数量&lt;/p>
&lt;p>为什么报告的processor数量是40而siblings是20呢?
因为报告的processor包括超线程的逻辑cpu. 这样操作系统就可以直接根据逻辑cpu的数量来分配任务.&lt;/p>
&lt;p>Memory bandwidth - 内存带宽
Power consumption - 功耗
能源消耗实际上是一个很大的问题.
Intel code name - 代号
Functional units&lt;/p>
&lt;ul>
&lt;li>latency - 延迟&lt;/li>
&lt;li>issue time - 发射时间&lt;/li>
&lt;li>capacity - 容量&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="http://www.agner.org/optimize/microarchitecture.pdf" target="_blank" rel="noopener">微处理架构&lt;/a>&lt;/p>
&lt;h2 id="function-units">function units&lt;/h2>
&lt;ul>
&lt;li>latency - 延迟，执行一个指令所需要的时钟周期数(不包括等待)&lt;/li>
&lt;li>issue time - 发射时间，指令发射到执行所需要的时钟周期数(包括等待)&lt;/li>
&lt;li>capacity - 容量&lt;/li>
&lt;/ul>
&lt;p>优化的地方:&lt;/p>
&lt;ul>
&lt;li>搞清楚到底哪些代码是执行次数最多的(内部循环)(对实际使用情况来说)&lt;/li>
&lt;li>基本运算消耗时间: 除法 &amp;gt; 乘法 &amp;gt; 加法 &amp;gt; 位移&lt;/li>
&lt;/ul>
&lt;p>基本的程序:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-22-45_hu85293fdaa222549af0ddcf65b2bf7284_658635_5ab47a1042335e55b8938e5994f8e82a.webp 400w,
/blog/l6/img/2023-10-17-20-22-45_hu85293fdaa222549af0ddcf65b2bf7284_658635_e757e717e52c37dae010bd08781bf275.webp 760w,
/blog/l6/img/2023-10-17-20-22-45_hu85293fdaa222549af0ddcf65b2bf7284_658635_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-22-45_hu85293fdaa222549af0ddcf65b2bf7284_658635_5ab47a1042335e55b8938e5994f8e82a.webp"
width="760"
height="362"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>合并重复计算的简单的提升:
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-23-02_hudb10c716aa5853d9906cab8e836be839_490764_e61947fe8d466c3906248b8957252142.webp 400w,
/blog/l6/img/2023-10-17-20-23-02_hudb10c716aa5853d9906cab8e836be839_490764_139df3e7b8e363317855fbed39089e3f.webp 760w,
/blog/l6/img/2023-10-17-20-23-02_hudb10c716aa5853d9906cab8e836be839_490764_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-23-02_hudb10c716aa5853d9906cab8e836be839_490764_e61947fe8d466c3906248b8957252142.webp"
width="760"
height="363"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-24-13_hud8148b776d8e4bb3b0215a9ad8cf6f95_349342_738cfac8407fe76b9bd88d182792930c.webp 400w,
/blog/l6/img/2023-10-17-20-24-13_hud8148b776d8e4bb3b0215a9ad8cf6f95_349342_63cfbdb2168372034d159f8ad1ec2a56.webp 760w,
/blog/l6/img/2023-10-17-20-24-13_hud8148b776d8e4bb3b0215a9ad8cf6f95_349342_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-24-13_hud8148b776d8e4bb3b0215a9ad8cf6f95_349342_738cfac8407fe76b9bd88d182792930c.webp"
width="760"
height="389"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>将除法次数减少,(不依赖于内层循环的变量的计算拿出来)&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-24-42_hu3b7220bf0b4c94aedaa80f1185888619_507170_9095d26daddab8794efd73a5792f17c3.webp 400w,
/blog/l6/img/2023-10-17-20-24-42_hu3b7220bf0b4c94aedaa80f1185888619_507170_5ff7d026f194e0d2cd56e0d7a8225adb.webp 760w,
/blog/l6/img/2023-10-17-20-24-42_hu3b7220bf0b4c94aedaa80f1185888619_507170_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-24-42_hu3b7220bf0b4c94aedaa80f1185888619_507170_9095d26daddab8794efd73a5792f17c3.webp"
width="760"
height="383"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>循环展开 loop unrolling&lt;/p>
&lt;p>如果每一次循环都要进行一次是否终止的测试,开销会很大.(尤其是一次循环的计算 相比于 循环次数来说很小 时)&lt;/p>
&lt;p>所以处理器从简单的策略开始,如预测循环的次数. 大部分都是基于统计预测的.&lt;/p>
&lt;p>如果可以预测循环的次数,就可以将循环展开. 每次循环多执行4 或 8 或&amp;hellip;次原来循环做的事情.&lt;/p>
&lt;p>但展开时不一定均匀,&lt;/p>
&lt;p>uniform可以使得循环展开的更好.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-35-48_huf0320ca0eb40e0cc3f8446f56f4bb928_788707_4a9e00eea4a0274ea68f3d4c2a674fbf.webp 400w,
/blog/l6/img/2023-10-17-20-35-48_huf0320ca0eb40e0cc3f8446f56f4bb928_788707_2f730b863ed7aa2fc673db2504200996.webp 760w,
/blog/l6/img/2023-10-17-20-35-48_huf0320ca0eb40e0cc3f8446f56f4bb928_788707_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-35-48_huf0320ca0eb40e0cc3f8446f56f4bb928_788707_4a9e00eea4a0274ea68f3d4c2a674fbf.webp"
width="760"
height="459"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-39-50_hu45d93cab90138384d4beff72db4bc99e_596600_e755b84003b152ad93396cb9cfcd83e7.webp 400w,
/blog/l6/img/2023-10-17-20-39-50_hu45d93cab90138384d4beff72db4bc99e_596600_800800c4cbdaf41f00d08bd8121bf03d.webp 760w,
/blog/l6/img/2023-10-17-20-39-50_hu45d93cab90138384d4beff72db4bc99e_596600_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-39-50_hu45d93cab90138384d4beff72db4bc99e_596600_e755b84003b152ad93396cb9cfcd83e7.webp"
width="760"
height="452"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>为什么8维向量获得了超过8倍的加速呢?
因为uniform, 原本要做8次的判断,现在只需要做一次.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l6/img/2023-10-17-20-42-45_hudc3741a959af0eae57271f90b977df00_280278_baf35b7a782eb349a2031ec1a434ece4.webp 400w,
/blog/l6/img/2023-10-17-20-42-45_hudc3741a959af0eae57271f90b977df00_280278_93cfbec29770590a36c25754a7afcd12.webp 760w,
/blog/l6/img/2023-10-17-20-42-45_hudc3741a959af0eae57271f90b977df00_280278_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l6/img/2023-10-17-20-42-45_hudc3741a959af0eae57271f90b977df00_280278_baf35b7a782eb349a2031ec1a434ece4.webp"
width="760"
height="306"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>常规优化提升了15倍
向量优化提升了5.4倍
总计提升了82倍&lt;/p>
&lt;p>向量化很好且是free的,但不能忽略了传统的优化&lt;/p>
&lt;p>传统的优化(213 program)使得速度提升了三倍&lt;/p>
&lt;p>要做到极致的优化,就比如要花3个星期的时间在编码风格上, 最后30分钟花在向量化上.&lt;/p>
&lt;p>但要看情况来决定编码风格的优化.
因为如果我们编写的代码不是执行次数最多(如内核,场景仿真,高频), 那么可能更需要的是可读性.&lt;/p>
&lt;p>可读性变差 可能会导致bug很容易被引入, 并且非常不容易被发现和维护.&lt;/p></description></item><item><title>L7</title><link>https://ysyyhhh.github.io/blog/l7/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/l7/</guid><description>&lt;p>GPU&lt;/p>
&lt;h2 id="图形渲染">图形渲染&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/l7/img/2023-10-18-22-45-21_huf26ab9cd16631e333ae7f2c3af77eb19_132208_4715ef0685f9d6c48ae4ca6038102849.webp 400w,
/blog/l7/img/2023-10-18-22-45-21_huf26ab9cd16631e333ae7f2c3af77eb19_132208_d0293c4adf5cdc95de68440138589056.webp 760w,
/blog/l7/img/2023-10-18-22-45-21_huf26ab9cd16631e333ae7f2c3af77eb19_132208_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/l7/img/2023-10-18-22-45-21_huf26ab9cd16631e333ae7f2c3af77eb19_132208_4715ef0685f9d6c48ae4ca6038102849.webp"
width="686"
height="519"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>图像中的每个对象都有很自然的并行性。&lt;/p></description></item><item><title>NoRBERT：使用迁移学习改进需求分类任务</title><link>https://ysyyhhh.github.io/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/</guid><description>&lt;p>NoRBERT: Transfer Learning for Requirements Classification
Tobias Hey， Jan Keim， Anne Koziolek， Walter F. Tichy
Karlsruhe Institute of Technology (KIT)&lt;/p>
&lt;h2 id="引用">引用&lt;/h2>
&lt;p>T. Hey, J. Keim, A. Koziolek and W. F. Tichy, &amp;ldquo;NoRBERT: Transfer Learning for Requirements Classification,&amp;rdquo; 2020 IEEE 28th International Requirements Engineering Conference (RE), Zurich, Switzerland, 2020, pp. 169-179, doi: 10.1109/RE48521.2020.00028.&lt;/p>
&lt;p>论文：https://sdq.kastel.kit.edu/publications/pdfs/hey2020.pdf
仓库：https://github.com/tobhey/NoRBERT&lt;/p>
&lt;h2 id="摘要">摘要&lt;/h2>
&lt;p>本文提出了NoRBERT，它使用了BERT模型进行微调，在需求工程领域进行迁移学习。他在PROMISE NFR数据集上，对功能性和非功能性需求的分类任务F1分数高达94％。对于分类非功能性需求的子类，超越了最近的方法，最常见的类别平均F1分数达到87%。在一个未见过的项目设置下，它比最近的方法高出15个百分点。此外，我们根据所包含的关注点，即功能、数据和行为，来分类功能性要求，标记了PROMISE NFR数据集中的功能性需求，并应用于测试NoRBERT，最终取得了高达92%的F1分数。NoRBERT提高了需求分类的准确性，并且可以很好地应用于未见过的项目。&lt;/p>
&lt;h2 id="1-引言">1 引言&lt;/h2>
&lt;p>需求的主要来源仍然是自然语言文档。对需求进行分类对于在项目早期识别出特定需求（如与安全相关的需求）非常重要。尽管已有的自动分类方法在多样化数据集上表现不错，但它们在未见过的项目上的性能会下降，因为需求的表述和结构依赖于项目和作者，而现有方法缺乏泛化能力。为了解决这个问题，我们探索了迁移学习方法，这种方法在NLP领域广泛应用，通过在大型数据集上训练来捕捉文本的深层含义，并能针对特定任务进行微调，从而在少量数据下实现更好的性能和泛化。
我们提出了NoRBERT方法，它基于BERT模型。BERT是一种预训练在大型文本语料库上的语言模型。BERT可以通过提供少量数据在特定任务上进行微调。我们使用NoRBERT在PROMISE NFR数据集上进行需求分类，并测试了其在重新标记的NFR数据集上的泛化能力。此外，我们还使用NoRBERT根据Glinz提出的关注点对功能性需求进行分类。这种方法在需求工程中特别有用，因为它可以在有限的标记数据情况下提供有效的分类。
本文的贡献包括以下三方面：
我们研究了通过迁移学习对已知和未知项目的需求进行分类的改进程度。
我们提供了一个新的数据集，根据功能、数据和行为的关注点进一步对功能性需求进行分类。
我们评估了基于迁移学习的方法在新数据集和任务上的表现。&lt;/p>
&lt;h2 id="2-技术介绍">2 技术介绍&lt;/h2>
&lt;h3 id="21相关工作">2.1相关工作&lt;/h3>
&lt;p>在需求工程领域，功能性需求与非功能性需求的区分是一个广泛研究的主题。功能性需求指的是系统必须执行的具体任务，而非功能性需求则涉及系统的质量标准，如性能、可靠性等，它们没有明确的执行标准。一些研究者将非功能性需求视为质量目标，而另一些则将其归类为系统属性或约束。
自动从文档中提取和分类需求是研究者关注的重点，已经发展出多种方法。例如，Cleland-Huang等人利用信息检索技术，通过识别指示词来分类需求，但这种方法在精确度上有所欠缺。Hussain等人通过使用特定词汇和决策树分类器改进了需求分类。Kurtanović和Maleej则采用自动化特征选择来预测需求类别。还有研究者使用深度学习技术，如卷积神经网络（CNN），来分类需求。
尽管这些方法展示了不同技术的潜力，但它们在实际应用中可能存在局限性，如过度依赖特定数据集、对措辞和句子结构敏感，或需要手动预处理。此外，这些方法在泛化到新项目上的能力上也存在不足。为了解决这些问题，我们尝试迁移学习方法，以期望在较少的训练数据下实现更好的性能和泛化能力。&lt;/p>
&lt;h3 id="22-bert介绍">2.2 BERT介绍&lt;/h3>
&lt;p>BERT（Bidirectional Encoder Representations from Transformers）是一种语言模型（LM）。用于预测词序列中词的概率，具有迁移学习的能力，即能在微调后适应不同任务。它起源于词嵌入技术，如word2vec，但通过使用ELMo的双向LSTM解决了word2vec忽略词义歧义的问题。BERT采用预训练和微调的方法进一步发展了语言模型，。
BERT的核心是Transformer架构，它用自注意力编码器-解码器结构替代了LSTM。自注意力层让模型能够识别并赋予相关词更高的权重，而忽略不相关的词。Transformer的多头注意力机制使模型能同时关注不同位置的词，提高了对词义的理解。
BERT的训练结合了双向预训练和掩码语言建模。在训练中，一部分输入词被掩码，模型需要预测这些词，同时学习判断句子是否可能连续。这种训练方法使BERT在多个NLP任务上取得了优异的表现。
BERT有两个版本：基础模型和大模型，分别具有不同数量的编码器层、隐藏单元和注意力头，参数数量也有所不同。基础模型有1.1亿参数，而大模型有3.4亿参数。BERT最初是在英文维基百科和BooksCorpus上训练的。BERT和类似的方法目前正在取代传统的自然语言处理系统。Tenney等人对BERT的不同层次和底层学习结构的分析表明，BERT重塑了类似于NLP流水线的相似结构。
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-06-42_huc8b64004ae082380fceeb6a9cfbbeb07_31345_3c1781b45a3d97aba38f4017c3469efb.webp 400w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-06-42_huc8b64004ae082380fceeb6a9cfbbeb07_31345_132fca3f76a341537ef1ec54a8e7014b.webp 760w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-06-42_huc8b64004ae082380fceeb6a9cfbbeb07_31345_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-06-42_huc8b64004ae082380fceeb6a9cfbbeb07_31345_3c1781b45a3d97aba38f4017c3469efb.webp"
width="522"
height="293"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
图1：用于微调 BERT 进行分类的架构。
图1展示了如何使用BERT进行分类。输入被分词。BERT的第一个输入标记始终是特殊标记[CLS]。标记[SEP]是一个特殊的分隔符标记，例如用于分隔句子，而标记[PAD]用于填充。对于分类和类似的下游任务，BERT产生的唯一输出是BERT为第一个标记([CLS])产生的输出，这是所有标记的聚合输出。这个聚合输出可以输入到一个单层前馈神经网络中，该网络使用softmax为不同类别分配概率。&lt;/p>
&lt;h2 id="3-实验评估">3 实验评估&lt;/h2>
&lt;h3 id="31-实验设置">3.1 实验设置&lt;/h3>
&lt;p>研究问题。在本文中，我们研究以下研究问题：
RQ1：迁移学习在需求分类中的表现如何？
RQ2：迁移学习是否提高了在未见项目上对需求进行分类的性能？
RQ3：迁移学习方法能够多大程度上检测到功能性需求的子类？
评估数据集。为了回答RQ1和RQ2，我们利用了两个现有的数据集。一个是广泛使用的PROMISE NFR数据集，该数据集在RE'17数据挑战中进行了处理，另一个是由Dalpiaz等人提供了一个重新标记的版本。前者来自15个项目的625个需求。这625个需求包括255个功能性需求和370个非功能性需求。表I显示了数据集中类别的分布以及每个类别需求的平均长度。每个需求只被标记为一个类别（F或11个NFR子类之一）。这些类别的分布不均匀。该数据集中F类要比NFR类少115个，且NFR子类的数量差异很大，从可用性的67个到可移植性的1个不等。可用性、安全性、操作性和性能是超过50个示例的类别，而容错性、法律性、可维护性和可移植性的类别则低于20个。
表I：原始 NFR 数据集的分布
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-06-59_hu388e9616551c1f5bdec730c883c65300_84423_70eead7a812275fb0c16047b4993e02c.webp 400w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-06-59_hu388e9616551c1f5bdec730c883c65300_84423_2f89f33ca0f4dcb3b1a90ef60ee5cdcd.webp 760w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-06-59_hu388e9616551c1f5bdec730c883c65300_84423_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-06-59_hu388e9616551c1f5bdec730c883c65300_84423_70eead7a812275fb0c16047b4993e02c.webp"
width="554"
height="377"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
由于数据集中F和NFR之间的区分有争议，并且数据集包含重复和错误标记的需求，Dalpiaz等人提供了一个重新标记的数据集。表II展示了数据集的概述。它仅由原始625个需求中的612个组成，并且仅使用了两个类别。一个需求可以具有功能性（F）或质量方面（Q）或两者都有。80个需求两者都有。230个需求仅具有功能性方面（OnlyF），而302个需求仅包含质量方面（OnlyQ）。
表II：重新标记的 NFR 数据集的分布
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-15_hu02e0e06c76d63d35764eae008a391e88_45107_c74c6d3c38e54489cfb77b0ebc0d1c64.webp 400w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-15_hu02e0e06c76d63d35764eae008a391e88_45107_47fb1dd26c8aa895635ef42f0c40500a.webp 760w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-15_hu02e0e06c76d63d35764eae008a391e88_45107_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-15_hu02e0e06c76d63d35764eae008a391e88_45107_c74c6d3c38e54489cfb77b0ebc0d1c64.webp"
width="554"
height="195"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
对比方法。基于数据集，我们将我们的方法应用于以下任务：
任务1：在原始NFR数据集上对F/NFR进行二元分类。
任务2：在原始NFR数据集上对四个最常见的NFR子类（US，SE，O，PE）进行二元和多类分类。
任务3：在原始NFR数据集中对所有NFR子类进行多类分类。
任务4：使用Dalpiaz等人提供的重新标记的NFR数据集，根据功能和质量方面对需求进行二元分类。
评估指标。对于所有任务，使用精确率（P）、召回率（R）和F1分数（F1）。对于多类分类，还报告了预测类别的加权平均F1分数（A）。
采用不同的设置来评估这些任务，包括使用.75-split描述了一个单次分成75%训练和25%测试集分割的数据集，以及使用了分层的10折交叉验证，即将数据集分割为10次，其中90%为训练集，10%为测试集，并对结果进行平均。分层分割确保数据集中类别的分布在训练集和测试集中保持一致。
为了进一步研究方法的可迁移性，使用了两种特定于项目的折叠策略。使用p-fold描述了Dalpiaz等人使用的项目级交叉验证，将数据集分割为10次，其中3个项目作为测试集，12个项目作为训练集，确保功能和质量方面的均匀分布。此外，还使用了一种留一项目交叉验证（loPo），即在n-1个项目上进行n次训练，并在留出的项目上进行测试。对于像NFR子类这样高度不平衡的二元任务，我们尝试了欠采样和过采样策略。我们还尝试了早期停止（ES）和不同的训练周期数。早期停止是一种常用的正则化技术，用于避免迭代学习器过拟合。&lt;/p>
&lt;h3 id="32norbert-使用bert进行非功能性和功能性需求分类">3.2NORBERT: 使用BERT进行非功能性和功能性需求分类&lt;/h3>
&lt;p>我们使用BERT的微调版本来研究迁移学习对需求分类任务的影响。
我们使用了两种不同的预训练BERT模型，基础和大型模型，都是带词性的版本。我们还尝试了不带词性的模型，但带词性的模型表现更好。这可能是因为需求中使用的命名实体被误认为是普通名词。我们使用BERT分词器，不对需求进行预处理。在预训练模型的基础上，我们定义了输出层，即分类头。我们使用BERT的序列中的第一个标记[CLS]的输出。这个输出被输入到由一个单层的线性神经元组成的前馈神经网络的分类头。输出直接计算自加权输入的总和（再加上一些偏差）。我们使用softmax函数为不同的标签获得概率分布。在训练过程中，我们使用交叉熵损失函数，并使用以下公式量化预测分布与真实分布的接近程度。：&lt;/p>
&lt;p>H(p，q)=-∑_x▒〖p(x) log⁡〖q(x)〗 〗&lt;/p>
&lt;p>p(x)表示目标概率，q(x)表示实际概率，x代表不同的标签。对于正确标签，p(x)设为1，其他错误标签设为0。损失函数旨在惩罚不准确或不确定的预测，同时奖励那些准确的自信预测。
我们使用AdamW优化器而非传统的随机梯度下降来更新网络权重。AdamW引入了权重衰减校正，但不补偿偏差。我们设置权重衰减为0.01，最大学习率为2e-05，与BERT原始论文中的设置相同。实验表明，批量大小16在所有测试中表现最佳。我们根据模型大小设定最大序列长度，以优化性能并避免内存问题。
在微调NoRBERT的超参数时，我们认为增加训练周期可以提高模型对训练数据的拟合度，但也可能增加过拟合的风险。实验显示，对于二元分类，10到32个训练周期，对于多类分类，10到64个训练周期效果最佳。&lt;/p>
&lt;h3 id="33任务1分类功能性和非功能性需求">3.3任务1分类功能性和非功能性需求&lt;/h3>
&lt;p>对于第一个任务，我们想要衡量NoRBERT在原始PROMISE NFR数据库上将需求分类为功能性（F）或非功能性（NFR）的性能。
我们使用分层10折交叉验证设置来回答关于迁移学习在需求分类性能方面的RQ1。我们训练了二元分类模型，即预测一个需求是F还是NFR，并与其他最新方法进行比较。
表III：在 PROMISE NFR 数据集上的 F/NFR 分类。粗体数值显示每个类别的每个指标的最高得分。
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-28_hu2335320fabdcdd914c3c2750d176ede8_133308_e10aa20ebe9e75babaeb2be06f5cba26.webp 400w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-28_hu2335320fabdcdd914c3c2750d176ede8_133308_ba29e752a0afb1564f99fce882834466.webp 760w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-28_hu2335320fabdcdd914c3c2750d176ede8_133308_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-28_hu2335320fabdcdd914c3c2750d176ede8_133308_e10aa20ebe9e75babaeb2be06f5cba26.webp"
width="507"
height="360"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
表III显示了我们的结果与其它方法报告的结果的比较。NoRBERT 在功能性需求和非功能性需求的 F1 分数上分别为 90% 和 93%。在NFR上，除了依赖手动提供的字典和规则进行数据预处理的Abad等人的方法外，NoRBERT超过了所有其他方法。NoRBERT与之相比不需要手动预处理，因此可以轻松地迁移到任何其他数据集。
我们的10折交叉验证结果显示，模型性能不受BERT模型选择或训练周期数的显著影响。Kurtanovi ´c和Maleej在功能性需求上取得了更高的F1分数，但他们的方法可能存在过拟合问题。
表III中的结果也有助于回答关于我们方法泛化能力的RQ2。10折没有考虑到数据集包含不同项目、不同领域和措辞。为了评估在未见过的项目上的性能，我们使用了特定于项目的设置（loPo和p-fold）。结果与10折评估相似或更好。这表明NoRBERT能够从训练期间看到的措辞中泛化出来。在不同项目和领域的数据集上，NoRBERT也能保持稳定性能。这与需要针对每个项目调整的手动字典和规则定义方法形成鲜明对比。&lt;/p>
&lt;h3 id="34-非功能性需求子类的分类">3.4 非功能性需求子类的分类&lt;/h3>
&lt;p>为了解决PROMISE NFR数据库中定义的非功能性需求（NFR）子类的分类任务。首先研究了数据库中四个最频繁的NFR子类的分类（任务2）。接着还研究了所有NFR子类的分类（任务3）。&lt;/p>
&lt;h4 id="a-任务2-最常见nfr子类的分类">A. 任务2: 最常见NFR子类的分类&lt;/h4>
&lt;p>我们使用NoRBERT对四种最常见的NFR进行了二元和多类分类。结果显示，NoRBERT在二元分类中取得了高达83%的加权平均F1分数，在多类分类中达到了87%。NoRBERT在大多数类别上的表现都超过了Kurtanovi´c和Maleej的模型。此外，NoRBERT在不同设置下的表现也有所不同，最佳二元分类结果是在16个周期、过采样和早停的情况下获得的。
表V: NFR 数据集上所有 NFR 子类的多类别分类。16、32 和 50 表示使用的时代数，bin 表示二元分类，mult 表示多类分类，B 和 L 分别表示使用的 BERT 模型（基础/大型）。bin16 还额外使用了 OS，multiL32 使用了 ES。LDA 和 NB（朴素贝叶斯）是指 Abad 等人的方法，其中有（P）或没有（UP）预处理过的数据。
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-38_huba703d7661994bccd6dab0abad0e6024_137406_528dccf1c61689f97642321c7a35c991.webp 400w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-38_huba703d7661994bccd6dab0abad0e6024_137406_ff72545e5cc5db6610093f4866007b5e.webp 760w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-38_huba703d7661994bccd6dab0abad0e6024_137406_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-38_huba703d7661994bccd6dab0abad0e6024_137406_528dccf1c61689f97642321c7a35c991.webp"
width="554"
height="179"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h4 id="b-任务3-所有nfr子类的多类分类">B. 任务3: 所有NFR子类的多类分类&lt;/h4>
&lt;p>我们使用NoRBERT对所有NFR子类别进行了多类分类。多类分类器尤其是在代表数量较少的类别上表现良好。所有多类模型在平均性能上都优于相应的二元分类器。基于BERT-large的模型在这项任务上表现最佳，这可能是因为它们具有更大的参数空间，能够更好地处理语言的微妙差异。NoRBERT在这项任务上的表现超过了Navarro-Almanza等人的方法，这表明迁移学习在这项任务上优于基于词嵌入的深度学习。
我们还探讨了NoRBERT在未见过的项目上的性能（RQ2）。在p折和loPo设置中，NoRBERT的性能略有下降，但多类分类器仍然优于二元分类器。尽管在loPo设置中NoRBERT的表现略逊于p折，但多类分类器和大型模型在所有设置中都优于二元分类器。
NoRBERT在分类NFR子类别方面表现出色，即使在训练数据有限的情况下也能识别出代表性不足的子类别。NoRBERT提供了一种可行的方法来替代手动数据预处理。&lt;/p>
&lt;h3 id="35-任务4-功能性和质量方面的分类">3.5 任务4: 功能性和质量方面的分类&lt;/h3>
&lt;p>功能性（F）和非功能性需求（NFR）之间的区别并不总是清晰的，一些需求包含了两者的方面。因此，我们在Dalpiaz等人提供的重新标记的PROMISE NFR数据库上衡量NoRBERT的性能[9]，并将NoRBERT与Kurtanovi´c和Maleej[8]的方法进行比较。
表 VI：重新标记的 PROMISE NFR 数据集中类的二元分类。粗体数值代表每个类别每个指标的最高分。星号标记的 F1 分数与其他出版物报道的精度和召回率不匹配。
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-44_hu451a5970b1399f4901b17b67f458adc0_110807_f9c826fb2c531078bb010cbbd3b32e88.webp 400w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-44_hu451a5970b1399f4901b17b67f458adc0_110807_400b1161088cb767f7f83b529a74a4c9.webp 760w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-44_hu451a5970b1399f4901b17b67f458adc0_110807_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-44_hu451a5970b1399f4901b17b67f458adc0_110807_f9c826fb2c531078bb010cbbd3b32e88.webp"
width="554"
height="213"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
表VI显示了在重新标记集上训练的二元分类器的结果。我们使用与Dalpiaz等人相同的设置，即.75-split、10-fold、p-fold和随机种子（42），此外还评估了loPo设置。NoRBERT在所有这些设置中都优于其他方法。因此，迁移学习方法明显提高了分类需求的性能（RQ1）。
在.75分割中，NoRBERT的基础模型在纯功能或质量类别上表现更佳，而大型模型在其他类别上表现更好。在10折交叉验证中，NoRBERT的最佳模型平均优于Dalpiaz等人的最佳模型10个百分点，尤其在仅含功能方面的需求上（F1得分91% vs 73%）。p折和loPo的结果显示NoRBERT在未见项目上的迁移能力强。与Kurtanovi´c和Maleej的方法相比，NoRBERT在处理未见项目上表现更好，平均F1得分高出15个百分点。
这表明NoRBERT具有良好的泛化能力，无需重新训练即可在实际项目中使用。我们认为，在评估需求分类方法时，应更重视其在未见项目上的表现。&lt;/p>
&lt;h3 id="36功能性需求的分类">3.6功能性需求的分类&lt;/h3>
&lt;p>NoRBERT在分类非功能性需求上表现出了良好的效果。现在研究它在分类功能性需求方面的表现。功能性需求通常根据它们所属的产品部分（例如用户界面或业务逻辑）来分类。有些模型则采用基于关注点的方法，包括功能性和行为性需求以及数据。如果我们想要开发能够自动理解功能性需求的系统，比如自动化追踪或建模系统，那么了解功能性需求的子类别就很重要，因为它们定义了需求可能的实现方式。
我们采用了Glinz提出的基于关注点的模型，它帮助我们理解功能性需求是描述系统的功能、系统展示的行为，还是仅仅是数据和数据结构。我们使用以下子类别：
功能：系统应执行的功能。 例子：系统应允许房地产经纪人查询MLS信息。
数据：应成为系统状态一部分的数据项或数据结构。 例子：审计报告应包括估计中使用的回收部件总数。
行为：系统展示的行为或由一个或多个刺激触发的反应。 例子：如果射门被标记为命中，产品应允许进攻球员定义射门。
需求可能包含多个关注点，这些类别可能会重叠，例如，“只有注册客户可以购买流媒体电影”。它既包含功能也包含行为。
为了回答RQ3，即迁移学习方法是否能够识别功能性需求中的关注点，由两位作者独立手动标记了PROMISE NFR数据集中的310个功能性需求。我们使用了Krippendorff的α（Kα）来衡量标注者间的一致性，发现功能和数据类别的一致性超过了0.8，而行为类别的一致性为0.752，虽然略低，但仍然是可接受的。
表VII: 功能性需求数据集概述
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-53_huc2ad73bdeda65935e5b408996e7bffdf_39679_375dd2a87193dc3e3b5df6204b31e3da.webp 400w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-53_huc2ad73bdeda65935e5b408996e7bffdf_39679_44287f837bac2078888284819104f442.webp 760w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-53_huc2ad73bdeda65935e5b408996e7bffdf_39679_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-07-53_huc2ad73bdeda65935e5b408996e7bffdf_39679_375dd2a87193dc3e3b5df6204b31e3da.webp"
width="554"
height="127"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
表VII显示了项目中类别的分布。需求的数量少于每个项目中类别代表的数量，因为每个需求可能包含多个关注点。项目11到14包含的需求数量较少，因为它们主要由非功能性需求组成。
A. 在功能性需求数据集上评估NoRBERT
我们使用标记好的数据集来评估NoRBERT在分类功能性需求上的表现。我们训练了二元分类模型，并在10折交叉验证和loPo（低代表性项目）设置下进行了评估。
表 VIII：使用 NoRBERT 在新数据集上对功能性需求子类进行二元分类，采用 10 折交叉验证和 loPo 设置。粗体数值代表每个类别每个指标的最高分。b 和 l 分别代表基础模型和大型模型
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="" srcset="
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-08-03_hu40c15b79533008f61d7df5aa86d8eea3_116653_6b3b08e00faba501d946fd636ee5c031.webp 400w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-08-03_hu40c15b79533008f61d7df5aa86d8eea3_116653_9a8c617c4e0be7eaae5dbeb72d0bf711.webp 760w,
/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-08-03_hu40c15b79533008f61d7df5aa86d8eea3_116653_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/norbert%E4%BD%BF%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E6%94%B9%E8%BF%9B%E9%9C%80%E6%B1%82%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/img/2024-03-01-10-08-03_hu40c15b79533008f61d7df5aa86d8eea3_116653_6b3b08e00faba501d946fd636ee5c031.webp"
width="554"
height="338"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
表VIII结果显示，NoRBERT在功能和行为类别上表现良好，但在数据类别上的召回率较低。这可以归因于这个类别缺乏训练数据和数据集的不平衡。我们发现欠采样和过采样对不同类别的影响不同。
在loPo设置中，NoRBERT的表现与10折交叉验证相似，功能类别的F1分数甚至略有提高，但数据类别的性能下降到了56%。尽管如此，与10折交叉验证相比，这个结果仍然是好的。我们还发现，在loPo设置中，大型模型在所有类别上的表现优于基础模型，这可能是因为loPo设置要求更好的泛化能力。
为了回答RQ3，我们可以得出结论，对于这些数据量，NoRBERT在处理功能性需求方面表现不错，尤其是在功能和行为类别上。虽然数据类别的表现有待提高，但通过更多的训练数据，NoRBERT的性能有望进一步提升。这可能有助于能够改进诸如追踪链接恢复或自动化建模等方法。&lt;/p></description></item><item><title>P0 [C++ Primer](https://15445.courses.cs.cmu.edu/fall2022/project0/)</title><link>https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/</guid><description>&lt;h1 id="l1-relational-model--relational-algebra">L1 Relational Model &amp;amp; Relational Algebra&lt;/h1>
&lt;h2 id="11-databases">1.1 Databases&lt;/h2>
&lt;p>数据库：an organized collection of inter-related data that models some aspect of the real-world&lt;/p>
&lt;p>数据库管理系统 DBMS：the software that manages a database&lt;/p>
&lt;h2 id="12-flat-file-strawman">1.2 Flat File Strawman&lt;/h2>
&lt;p>数据库常常以CSV(comma-separated value)文件的形式存储，由DBMS进行管理。每次应用程序要读取或者更新记录时，都必须解析文件(parse files)。&lt;/p>
&lt;h2 id="13-database-management-system">1.3 Database Management System&lt;/h2>
&lt;ul>
&lt;li>A general-purpose(通用) &lt;strong>DBMS&lt;/strong> is designed to allow the definition, creation, querying, update, and administration of databases in accordance with some &lt;strong>data model&lt;/strong>.&lt;/li>
&lt;li>A &lt;strong>data model&lt;/strong> is a collection of concepts for describing the data in database
&lt;ul>
&lt;li>Examples: &lt;strong>relational&lt;/strong> (most common), NoSQL (&lt;strong>key/value&lt;/strong>, graph), array/matrix/vectors&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A &lt;strong>schema&lt;/strong>(模式) is a description of a particular collection of data based on a &lt;strong>data model&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>早期，数据库应用很难建立和维护，因为逻辑层和物理层之间存在着紧密的耦合。&lt;/p>
&lt;ul>
&lt;li>逻辑层： 描述了数据库有哪些实体和属性。&lt;/li>
&lt;li>物理层： 是这些实体和属性的存储方式。&lt;/li>
&lt;/ul>
&lt;p>所以早期的数据库，一旦改变了物理层，逻辑层也得跟着变。&lt;/p>
&lt;h2 id="14-relational-model">1.4 Relational Model&lt;/h2>
&lt;p>人们每次改变物理层都要重新写数据管理系统，故Ted Codd注意到后提出了关系模型。&lt;/p>
&lt;p>The relational model defines a database abstraction based on relations to avoid &lt;strong>maintenance overhead&lt;/strong>(维护开销).&lt;/p>
&lt;p>三要点:&lt;/p>
&lt;ul>
&lt;li>Store database in simple data structures (relations).&lt;/li>
&lt;li>Access data through high-level language, DBMS &lt;strong>figures out&lt;/strong>(找出) best execution strategy.&lt;/li>
&lt;li>Physical storage &lt;strong>left up to&lt;/strong>(取决于) the DBMS implementation.&lt;/li>
&lt;/ul>
&lt;p>三概念&lt;/p>
&lt;p>The relational data model defines three concepts:&lt;/p>
&lt;ul>
&lt;li>Structure: The definition of relations and their contents. This is the attributes the relations have and the values that those attributes can hold.&lt;/li>
&lt;li>&lt;strong>Integrity&lt;/strong>(完整性): Ensure the database’s contents satisfy constraints.
&lt;ul>
&lt;li>实体完整性 entity integrity:主属性不能为空&lt;/li>
&lt;li>参照完整性 referential integrity: 外键的值必须存在&lt;/li>
&lt;li>用户定义的完整性
&lt;ul>
&lt;li>An example constraint would be that any value for the year attribute has to be a number.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Manipulation: How to access and modify a database’s contents.&lt;/li>
&lt;/ul>
&lt;p>关系:&lt;/p>
&lt;p>&lt;strong>A relation&lt;/strong> is an &lt;strong>unordered&lt;/strong> set that contains the relationship of attributes that represent entities. So the DBMS can store them in any way it wants, allowing for &lt;strong>optimization&lt;/strong>(允许优化).&lt;/p>
&lt;p>元组:&lt;/p>
&lt;p>&lt;strong>A tuple&lt;/strong> is a set of &lt;strong>attribute values&lt;/strong> (also known as its &lt;strong>domain&lt;/strong> 域 一组相同数据类型的值的集合) in the relation. &lt;strong>Originally&lt;/strong>, values had to be atomic or scalar(标量), but &lt;strong>now&lt;/strong> values can also be lists or &lt;strong>nested&lt;/strong>(嵌套) data structures. Every attribute can be a special value, &lt;strong>NULL&lt;/strong>, which means for a given tuple the attribute is &lt;strong>undefined&lt;/strong>.&lt;/p>
&lt;p>关系:&lt;/p>
&lt;p>&lt;strong>A relation&lt;/strong> with n attributes is called &lt;strong>an n-ary relation&lt;/strong>.&lt;/p>
&lt;p>键&lt;/p>
&lt;p>&lt;strong>A relation’s primary key&lt;/strong> uniquely identifies a single tuple.&lt;/p>
&lt;ul>
&lt;li>Some DBMSs automatically create an internal primary key if you do not define one.&lt;/li>
&lt;li>A lot of DBMSs have support for autogenerated keys so an application does not have to &lt;strong>manually increment&lt;/strong>(手动增加) the keys, but a primary key is still required for some DBMSs.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>A foreign key&lt;/strong> specifies that an attribute from one relation has to map to a tuple in another relation.&lt;/p>
&lt;h2 id="15-data-manipulation-languages-dmls">1.5 Data Manipulation Languages (DMLs)&lt;/h2>
&lt;p>Methods to store and retrieve information from a database.&lt;/p>
&lt;p>There are two classes of languages for this:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Procedural&lt;/strong>(程序上的): The query &lt;strong>specifies the (high-level) strategy&lt;/strong> the DBMS should use to find &lt;strong>the desired result based on sets / bags.&lt;/strong> (relational &lt;strong>algebra&lt;/strong> 代数)&lt;/li>
&lt;li>Non-Procedural (&lt;strong>Declarative&lt;/strong> 声明): The query specifies only what data is wanted and not how to find it. (relational &lt;strong>calculus&lt;/strong> 微积分/关系演算)&lt;/li>
&lt;/ul>
&lt;p>一般现在都是用第二种的，我不管DBMS用什么&lt;strong>策略&lt;/strong>，我只需要你给我我想要的数据。&lt;/p>
&lt;h2 id="16-relational-algebra-关系代数">1.6 Relational Algebra 关系代数&lt;/h2>
&lt;p>&lt;strong>Relational Algebra&lt;/strong> is a set of fundamental operations to &lt;strong>retrieve&lt;/strong>(检索) and manipulate tuples in a relation.&lt;/p>
&lt;p>Each operator &lt;strong>takes in&lt;/strong>(需要) one or more relations as inputs, and outputs a new relation. To write queries we can “&lt;strong>chain&lt;/strong>(链)” these operators together to create more complex operations.&lt;/p>
&lt;p>5种基本&lt;strong>关系操作&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>选择,投影,并,差,笛卡儿积&lt;/li>
&lt;/ul>
&lt;p>传统&lt;strong>集合运算&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>二目运算: 并,差,交,笛卡尔积&lt;/li>
&lt;/ul>
&lt;p>专门的&lt;strong>关系运算&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>选择selection ,投影projection,连接 join,除 dividen&lt;/li>
&lt;/ul>
&lt;p>选择:在&lt;strong>关系R&lt;/strong>中,选择符合条件的&lt;strong>元组&lt;/strong>,是从行的角度进行运算.&lt;/p>
&lt;p>投影:在&lt;strong>关系R&lt;/strong>中,选择出&lt;strong>若干属性列&lt;/strong>组成新的关系,从列的角度&lt;/p>
&lt;p>连接:两个关系的&lt;strong>笛卡尔积&lt;/strong>中,选取属性中满足一定条件的元组&lt;/p>
&lt;ul>
&lt;li>自然连接 内连接: 不保留悬浮元组.&lt;/li>
&lt;li>外连接 outer join : 保留&lt;strong>悬浮元组&lt;/strong>(填NULL)的连接&lt;/li>
&lt;li>左连接 left outer join: 只保留&lt;strong>左边关系R&lt;/strong>中的悬浮空组.&lt;/li>
&lt;li>右连接 right outer join: 只保留&lt;strong>右边关系R&lt;/strong>中的悬浮空组.&lt;/li>
&lt;/ul>
&lt;p>除: R除以S得到T, 则T包含所有&lt;strong>在R而不在S&lt;/strong>的&lt;strong>属性及其值&lt;/strong>. 且T和S的所有组合都在R中.&lt;/p>
&lt;h1 id="l2-modern-sql">L2 Modern SQL&lt;/h1>
&lt;h2 id="21-relation-languages">2.1 Relation Languages&lt;/h2>
&lt;p>用户只需要使用声明性语言（即SQL）来指定他们想要的结果。DBMS 负责确定产生该答案的最有效计划。&lt;/p>
&lt;p>关系代数基于 sets (unordered, no duplicates)。 SQL基于 bags (unordered, allows duplicates)&lt;/p>
&lt;h2 id="22-sql-history">2.2 SQL History&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>SEQUEL Structured English Query Language&lt;/p>
&lt;p>SQL Structured Query Language&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该语言由不同类别的命令组成：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>DML&lt;/strong> Data Manipulation Language &lt;code>SELECT, INSERT, UPDATE, DELETE&lt;/code>&lt;/li>
&lt;li>&lt;strong>DDL&lt;/strong> Data Definition Language Schema definitions for tables, indexes, views, and other objects.&lt;/li>
&lt;li>&lt;strong>DCL&lt;/strong> Data Control Language Security, access controls.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>SQL仍在不断发展的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="23-join">2.3 Join&lt;/h2>
&lt;p>结合一个或多个表的列，产生一个新的表。用来表达涉及跨越多个表的数据的查询&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">CREATE TABLE student (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sid INT PRIMARY KEY,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name VARCHAR(16),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> login VARCHAR(32) UNIQUE,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> age SMALLINT,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gpa FLOAT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CREATE TABLE course (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cid VARCHAR(32) PRIMARY KEY,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name VARCHAR(32) NOT NULL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CREATE TABLE enrolled (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sid INT REFERENCES student (sid),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cid VARCHAR(32) REFERENCES course (cid),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> grade CHAR(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">找出在15-721拿到A的学术
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SELECT s.name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM enrolled AS e, student AS s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WHERE e.grade = &amp;#39;A&amp;#39; AND e.cid = &amp;#39;15-721&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AND e.sid = s.sid;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="24-aggregates-聚合函数">2.4 Aggregates 聚合函数&lt;/h2>
&lt;p>聚合函数接受一组列表，然后产生一个单一的标量值作为其输出。基本上只能在SELECT输出列表中使用！&lt;/p>
&lt;p>函数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>AVG&lt;/code>&lt;/li>
&lt;li>&lt;code>MIN&lt;/code>&lt;/li>
&lt;li>&lt;code>MAX&lt;/code>&lt;/li>
&lt;li>&lt;code>COUNT&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>当使用goup时,聚合函数输出为每个组的输出.&lt;/p>
&lt;p>having 在聚合计算的基础过滤输出结果.而不是where&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT AVG(s.gpa) AS avg_gpa, e.cid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM enrolled AS e, student AS s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WHERE e.sid = s.sid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GROUP BY e.cid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HAVING avg_gpa &amp;gt; 3.9;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="25-sting-operation">2.5 Sting Operation&lt;/h2>
&lt;p>&lt;strong>SQL标准&lt;/strong>是&lt;strong>区分大小写&lt;/strong>的，而且只能是&lt;strong>单引号&lt;/strong>！有一些函数可以处理字符串，可以在查询的任何部分使用。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Pattern Matching&lt;/strong>:&lt;/p>
&lt;p>Like 关键字&lt;/p>
&lt;ul>
&lt;li>&lt;code>%&lt;/code> : matches any substrings (including empty).&lt;/li>
&lt;li>&lt;code>_&lt;/code> : matches any one character&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>String Function:&lt;/strong> &lt;code>SUBSTRING(S, B, E)&lt;/code> &lt;code>UPPER(S)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Concatenation&lt;/strong>(连接) : &lt;code>||&lt;/code> concatenate two or more strings together into a single string&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="26-date-and-time">2.6 Date and Time&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>时间函数&lt;/p>
&lt;ul>
&lt;li>当前日期时间 &lt;code>NOW()&lt;/code>, &lt;code>CURRENT_TIMESTAMP()&lt;/code>&lt;/li>
&lt;li>当前UNIX时间戳 &lt;code>UNIX_TIMESTAMP()&lt;/code>&lt;/li>
&lt;li>当前日期 &lt;code>CURRENT_DATE()&lt;/code>&lt;/li>
&lt;li>当前时间 &lt;code>CURRENT_TIME()&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>日期时间转换函数&lt;/p>
&lt;ul>
&lt;li>当前时间戳转换为北京时间 &lt;code>FROM_UNIXTIME()&lt;/code>&lt;/li>
&lt;li>北京时间转换为时间戳 &lt;code>UNIX_TIMESTAMP()&lt;/code>&lt;/li>
&lt;li>时间中解析年月日时间 &lt;code>DATE_FORMAT(date, format)&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">select DATE_FORMAT(&amp;#39;2021-01-01 08:30:50&amp;#39;,&amp;#39;%Y-%m-%d&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>日期时间运算函数&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在某个时间的基础上加上或者减去某个时间 &lt;code>DATE_ADD(date,INTERVAL expr unit)&lt;/code> &lt;code>DATE_SUB(date,INTERVAL expr unit)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回两个日期值之间的天数 &lt;code>DATEDIFF(expr1,expr2))&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">select DATEDIFF(&amp;#39;2021-01-02&amp;#39;,&amp;#39;2021-01-01&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>时间差函数 &lt;code>TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)&lt;/code>&lt;/p>
&lt;p>unit：天(DAY)、小时(HOUR），分钟(MINUTE)和秒(SECOND)，TIMESTAMPDIFF函数比DATEDIFF函数用起来更加灵活&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="27-output-redirection">2.7 Output Redirection&lt;/h2>
&lt;p>你可以告诉DBMS将查询结果存储到另一个表中，而不是将查询结果返回给客户端（例如，终端）。结果存储到另一个表中。然后你可以在随后的查询中访问这些数据&lt;/p>
&lt;ul>
&lt;li>
&lt;p>New Table: 将查询的输出存储到一个新的（永久）表中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT DISTINCT cid INTO CourseIds FROM enrolled;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Exustubg Table:&lt;/p>
&lt;p>将&lt;strong>查询的输出存储到数据库中已经存在的表&lt;/strong>中。该表 目标表必须有与目标表相同数量和相同类型的列，但输出查询中的列名不需要匹配。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">INSERT INTO CourseIds (SELECT DISTINCT cid FROM enrolled)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="28-output-control">2.8 Output Control&lt;/h2>
&lt;p>可以用ORDER BY来对输出进行排序,后面可以加&lt;code>DESC&lt;/code>, &lt;code>ASC&lt;/code>来指定排序策略&lt;/p>
&lt;p>输出的数量可以用&lt;code>LIMIT n&lt;/code> 进行指定,当然也可以用&lt;code>OFFSET&lt;/code> 来提供一个bias。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ELECT sid, grade FROM enrolled WHERE cid = &amp;#39;15-721&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ORDER BY grade;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SELECT sid, name FROM student WHERE login LIKE &amp;#39;%@cs&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LIMIT 20 OFFSET 10;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="29-nested-queries">2.9 Nested Queries&lt;/h2>
&lt;p>在其他查询中调用查询，在单个查询中执行更复杂的逻辑。嵌套查询往往难以优化。&lt;/p>
&lt;p>外部查询的范围包括在内部查询中（即&lt;strong>内部查询可以访问来自外部查询&lt;/strong>），反之不行。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>内部查询几乎可以出现在一个查询的任何部分。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>SELECT&lt;/code> Output Targets&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT (SELECT 1) AS one FROM student;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>FROM&lt;/code> &lt;strong>Clause&lt;/strong>(条件):&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FROM student AS s, (SELECT sid FROM enrolled) AS e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WHERE s.sid = e.sid;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>&lt;code>WHERE&lt;/code> Clause&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT name FROM student
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WHERE sid IN ( SELECT sid FROM enrolled );
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>例子： 获取在15-445中注册的学生名字&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT name FROM student
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WHERE sid IN (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SELECT sid FROM enrolled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WHERE cid = &amp;#39;15-445&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>请注意，根据它在查询中出现的位置，sid有不同的范围。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>例子： 找到注册了至少一门课的最大的学生id&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT student.sid, name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FROM student
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> JOIN (SELECT MAX(sid) AS sid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FROM enrolled) AS max_e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ON student.sid = max_e.sid;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="nested-query-results-expressions">Nested Query Results Expressions:&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>关键字：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ALL&lt;/code> Must satisfy expression for all rows in sub-query&lt;/li>
&lt;li>&lt;code>ANY&lt;/code> Must satisfy expression for at least one row in sub-query.&lt;/li>
&lt;li>&lt;code>IN&lt;/code> Equivalent to =ANY().&lt;/li>
&lt;li>&lt;code>EXISTS&lt;/code> At least one row is returned.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>例子： 找到所有没有学生注册的课&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT * FROM course
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WHERE NOT EXISTS(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SELECT * FROM enrolled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WHERE course.cid = enrolled.cid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="210-window-functions">2.10 Window Functions&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>函数： 窗口函数可以是我们上面讨论的任何一个聚合函数。也有一些特殊的窗口函数。&lt;/p>
&lt;ol>
&lt;li>&lt;code>ROW_NUMBER&lt;/code>: 当前列的数字&lt;/li>
&lt;li>&lt;code>RANK&lt;/code>: 当前列的顺序&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Grouping: &lt;strong>OVER子句指定了在计算窗口函数时如何对图元进行分组&lt;/strong>。使用&lt;strong>PARTITION BY&lt;/strong>来指定分组&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT cid, sid, ROW_NUMBER() OVER (PARTITION BY cid)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FROM enrolled ORDER BY cid;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们也可以在OVER中放入ORDER BY，以确保结果的确定性排序，即使数据库内部发生变化。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT *, ROW_NUMBER() OVER (ORDER BY cid)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FROM enrolled ORDER BY cid;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>重要提示：&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DBMS在窗函数排序后计算&lt;code>RANK&lt;/code>，而在排序前计算&lt;code>ROW_NUMBER&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>找到每门课程中成绩第二高的学生&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT * FROM (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SELECT *, RANK() OVER (PARTITION BY cid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ORDER BY grade ASC) AS rank
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FROM enrolled) AS ranking
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WHERE ranking.rank = 2;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="211-commom-table-expressions">2.11. Commom Table Expressions&lt;/h2>
&lt;p>在编写更复杂的查询时，通用表表达式（CTE）是窗口或嵌套查询的一种替代方法。复杂的查询时，可以替代窗口或嵌套查询。它们提供了一种方法来为用户在一个更大的查询中编写辅助语句.&lt;/p>
&lt;p>可以理解为一个辅助表。&lt;/p>
&lt;p>&lt;code>WITH&lt;/code>子句将内部查询的输出与一个具有该名称的临时结果绑定。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>例子： 生成一个名为cteName的CTE，其中包含一个单一属性设置为 &amp;ldquo;1 &amp;ldquo;的元组。从这个CTE中选择所有属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">WITH cteName AS (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SELECT 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SELECT * FROM cteName;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以在AS之前将输出列绑定到名称上&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">WITH cteName (col1, col2) AS (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SELECT 1, 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SELECT col1 + col2 FROM cteName;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个查询可能包含多个CTE声明&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">WITH cte1 (col1) AS (SELECT 1), cte2 (col2) AS (SELECT 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SELECT * FROM cte1, cte2;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>递归能力 在WITH后面&lt;strong>添加RECURSIVE关键字&lt;/strong>允许CTE引用自己。这使得在SQL查询中可以实现递归。有了递归的CTE，SQL被证明是图灵完备的，这意味着它在计算上的表现力不亚于更多的通用编程语言&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例子：打印从1到10的数字&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">WITH RECURSIVE cteSource (counter) AS (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ( SELECT 1 )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> UNION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ( SELECT counter + 1 FROM cteSource
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WHERE counter &amp;lt; 10 )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SELECT * FROM cteSource;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h1 id="homework-1---sql">Homework #1 - SQL&lt;/h1>
&lt;p>CASE 语句&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT name,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CASE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> when died is not null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> then died-born
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else &amp;#39;2022&amp;#39; - born
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> END as age
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM people
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">where born &amp;gt;= &amp;#39;1900&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ORDER by age DESC,name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LIMIT 20;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>CAST AS TEXT 转换成字符串，字符串连接用 ||&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">select
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CAST(titles.premiered/10*10 AS TEXT) || &amp;#39;s&amp;#39; as decade,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">round(avg(rating),2) as avg,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">max(rating) as top,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">min(rating) as min,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count(*) as NUM_RELEASES
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from ratings
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">join titles on titles.title_id = ratings.title_id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">where decade is not null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GROUP by decade
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">order by avg DESC,decade
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">limit 20;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个with后，用,隔开&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">with person_title as (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> select people.name,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> people.person_id,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> crew.title_id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> from people
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> join crew on crew.person_id = people.person_id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> join titles on titles.title_id = crew.title_id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> where born = 1955 and titles.type = &amp;#34;movie&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">person_avg as (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> select person_title.name,round(avg(rating),2) as avg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> from RATINGS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> join person_title on person_title.title_id = ratings.title_id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> group by person_title.person_id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">quantiles as (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> select * ,NTILE(10) OVER (ORDER BY avg ASC) as QuantileRating from person_avg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">select
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">name,avg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from quantiles
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">where QuantileRating = 9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">order by avg DESC,name;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>把表格数据压缩成一行，用，隔开&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">with p as(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> select akas.title as dubbed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> from titles
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> join akas on akas.title_id = titles.title_id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> where primary_title = &amp;#34;House of the Dragon&amp;#34; and type = &amp;#34;tvSeries&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> group by primary_title,dubbed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> order by dubbed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">select GROUP_CONCAT(dubbed,&amp;#39;, &amp;#39;) from p;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="l3--4database-storage">L3 -4Database Storage&lt;/h1>
&lt;h2 id="31-storage">3.1 Storage&lt;/h2>
&lt;p>The DBMS assumes that the primary storage location of the database is on non-volatile disk.&lt;/p>
&lt;p>The DBMS&amp;rsquo;s components manage the movement of data between non-volatile and volatile storage.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222153223421" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222153223421_hud22ed9fb7e05b813d6f8ec53aae116f9_88815_5cb0075bf1c94b9519597682f898623e.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222153223421_hud22ed9fb7e05b813d6f8ec53aae116f9_88815_25d36e1da19b804aeaf0d87a056222ff.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222153223421_hud22ed9fb7e05b813d6f8ec53aae116f9_88815_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222153223421_hud22ed9fb7e05b813d6f8ec53aae116f9_88815_5cb0075bf1c94b9519597682f898623e.webp"
width="760"
height="456"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Volatile Devices:&lt;/p>
&lt;ul>
&lt;li>Volatile means that if you pull the power from the machine, then the data is lost.&lt;/li>
&lt;li>Volatile storage supports fast &lt;strong>random access&lt;/strong> with byte-addressable locations. This means that the program can jump to any byte address and get the data that is there.&lt;/li>
&lt;li>For our purposes, we will always refer to this storage class as “memory.”&lt;/li>
&lt;/ul>
&lt;p>Non-Volatile Devices:&lt;/p>
&lt;ul>
&lt;li>Non-volatile means that the storage device does not require continuous power in order for the device to retain the bits that it is storing.&lt;/li>
&lt;li>It is also block/page addressable. This means that &lt;strong>in order to read a value at a particular offset&lt;/strong>, the program &lt;strong>first has to load the 4 KB page into memory&lt;/strong> that holds the value the program wants to read.&lt;/li>
&lt;li>Non-volatile storage is &lt;strong>traditionally better at sequential access&lt;/strong> (reading multiple contiguous chunks of data at the same time).&lt;/li>
&lt;li>We will refer to this as “disk.” We will not make a (major) distinction between solid-state storage (SSD) and spinning hard drives (HDD).&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222153508116" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222153508116_hu2bfa840c291ed983668d96ded6216345_109474_09dd1725ed7f8adc8264af1eee03297d.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222153508116_hu2bfa840c291ed983668d96ded6216345_109474_86de3de50577edcb256e34e8562b58cb.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222153508116_hu2bfa840c291ed983668d96ded6216345_109474_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222153508116_hu2bfa840c291ed983668d96ded6216345_109474_09dd1725ed7f8adc8264af1eee03297d.webp"
width="746"
height="467"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="32-disk-oriented-dbms-overview">3.2 Disk-Oriented DBMS Overview&lt;/h2>
&lt;p>The database is &lt;strong>all on disk&lt;/strong>, and the data in database files is organized into pages, with the first page being the directory page.&lt;/p>
&lt;p>To operate on the data, the DBMS needs to bring the data into memory. It does this by &lt;strong>having a buffer pool&lt;/strong> that &lt;strong>manages the data movement back and forth&lt;/strong> between disk and memory&lt;/p>
&lt;p>The DBMS also has an &lt;strong>execution engine&lt;/strong> that will execute queries. The execution engine will &lt;strong>ask the buffer pool for a specific page&lt;/strong>, and the buffer pool will take care of bringing that page into memory and &lt;strong>giving the execution engine a pointer&lt;/strong> to that page in memory.&lt;/p>
&lt;p>The buffer pool manager will &lt;strong>ensure&lt;/strong> that &lt;strong>the page is there while the execution engine operates on that part of memory&lt;/strong>.&lt;/p>
&lt;h2 id="33-dbms-vs-os">3.3 DBMS vs OS&lt;/h2>
&lt;ul>
&lt;li>DBMS的一个&lt;strong>高级设计目标是支持超过可用内存量&lt;/strong>的数据库。因为访问disk的代价很大，所以使用disk应该要小心。我们不希望从磁盘上访问数据时停顿太久，从而拖慢其他一切。我们希望DBMS能够处理在等待从磁盘获取数据时，能够处理其他查询。&lt;/li>
&lt;li>这个高层次的设计目标就像虚拟内存一样，有一个大的地址空间和一个供操作系统从磁盘引入页面的地方。&lt;/li>
&lt;li>实现这种虚拟内存的方法之一是使用mmap来映射进程地址空间中的文件内容，这使得操作系统负责在磁盘和内存之间来回移动页面。 但不幸的是，如果&lt;strong>mmap遇到页面故障，进程将会被阻塞&lt;/strong>。
&lt;ul>
&lt;li>如果你需要写入，你永远不想在你的DBMS中使用mmap。&lt;/li>
&lt;li>DBMS（几乎）总是想自己控制事情，而且可以做得更好，因为它知道更多关于被访问的数据和被处理的查询。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>可以通过使用操作系统：
&lt;ul>
&lt;li>&lt;code>madvise&lt;/code>: 告诉操作系统你打算何时读某些页面。&lt;/li>
&lt;li>&lt;code>mlock&lt;/code>: 告诉操作系统不要把内存范围换到磁盘上。&lt;/li>
&lt;li>&lt;code>msync&lt;/code>: 告诉操作系统将内存范围刷新到磁盘。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>出于正确性和性能的考虑，我们不建议在DBMS中使用&lt;/strong>&lt;code>mmap&lt;/code>。&lt;/p>
&lt;h2 id="34-file-storage">3.4 File Storage&lt;/h2>
&lt;ul>
&lt;li>在其最基本的形式中，DBMS将&lt;strong>数据库存储为磁盘上的文件&lt;/strong>。有些可能使用文件层次结构，有些则可能使用单个文件&lt;/li>
&lt;li>操作系统对这些文件的内容一无所知。&lt;strong>只有DBMS知道如何解读它们的内容&lt;/strong>，因为它是以DBMS特有的方式编码的。&lt;/li>
&lt;li>DBMS的存储管理器负责管理数据库的文件。它将文件表示为一个 页的集合。它还跟踪哪些数据被读和写到了页面上，以及这些页面有多少可用空间。这些页面中还有多少可用空间。&lt;/li>
&lt;/ul>
&lt;h2 id="35-database-pages">3.5 Database Pages&lt;/h2>
&lt;ul>
&lt;li>DBMS将数据库组织在&lt;strong>一个或多个文件中的固定大小的数据块&lt;/strong>，称为页。页面可以包含不同种类的数据（tuple、indexes等）。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;ul>
&lt;li>大多数系统不会将这些类型混合在一页中。 有些系统会要求页面是自成一体（self-contained）的，也就是说，阅读每个页面所需的所有信息都在页面本身。读取每一页的所有信息都在页面本身&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>Each page is given a unique identifier.
&lt;ul>
&lt;li>The DBMS uses an indirection layer to map page IDs to physical locations.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>There are three different &lt;strong>notions&lt;/strong> of &amp;ldquo;pages&amp;rdquo; in a DBMS:&lt;/p>
&lt;ul>
&lt;li>Hardware Page (usually 4KB)&lt;/li>
&lt;li>OS Page (usually 4KB)&lt;/li>
&lt;li>Database Page (512B-16KB)&lt;/li>
&lt;/ul>
&lt;p>存储设备保证写的操作是atomic 原子的。 这意味着，如果我们的数据库页面比我们的硬件页面大，DBMS将不得不采取额外的措施 以确保数据被安全地写出来。 因为当系统崩溃时，程序可能已经完成了将数据库页面写入磁盘的一部分&lt;/p>
&lt;p>Different DBMSs manage pages in files on disk in different ways.&lt;/p>
&lt;ul>
&lt;li>Heap File Organization&lt;/li>
&lt;li>Tree File Organization&lt;/li>
&lt;li>Sequential / Sorted File Organization (ISAM)&lt;/li>
&lt;li>Hashing File Organization&lt;/li>
&lt;/ul>
&lt;p>At this point in the &lt;strong>hierarchy&lt;/strong>(层次结构) we don&amp;rsquo;t need to know anything about what is inside of the pages.&lt;/p>
&lt;h2 id="36-database-heap">3.6 Database Heap&lt;/h2>
&lt;p>A &lt;strong>heap file&lt;/strong> is an &lt;strong>unordered&lt;/strong> collection of pages with tuples that are stored in random order.&lt;/p>
&lt;ul>
&lt;li>Create / Get / Write / Delete Page&lt;/li>
&lt;li>Must also support iterating over all pages.&lt;/li>
&lt;/ul>
&lt;p>DBMS可以通过使用页面的链接列表或页面目录在磁盘上找到一个给定的页面ID&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Linked List: Header page持有指向自由页列表和数据页列表的指针。然而，如果 DBMS正在寻找一个特定的页面，它必须在数据页列表上进行顺序扫描，直到它找到它要找的页面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Page Directory:&lt;/p>
&lt;p>DBMS维护特殊的页面，跟踪数据页的位置以及每页的可用空间。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222155657027" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222155657027_hue6ceeb2c876f7e8bb9567dc43df03885_128348_19e1f258c1eaffbced6c82db8733249f.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222155657027_hue6ceeb2c876f7e8bb9567dc43df03885_128348_c485bf2a46a3ac3c1a373535423f72ae.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222155657027_hue6ceeb2c876f7e8bb9567dc43df03885_128348_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222155657027_hue6ceeb2c876f7e8bb9567dc43df03885_128348_19e1f258c1eaffbced6c82db8733249f.webp"
width="760"
height="413"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222155526907" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222155526907_hu2514056af22ca82486386cbb9fdb114c_40697_179a9702190fbffc038bb147ea6b13d3.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222155526907_hu2514056af22ca82486386cbb9fdb114c_40697_3a0493d5dbdbc9057477b0943ccd7e23.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222155526907_hu2514056af22ca82486386cbb9fdb114c_40697_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222155526907_hu2514056af22ca82486386cbb9fdb114c_40697_179a9702190fbffc038bb147ea6b13d3.webp"
width="760"
height="214"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Need &lt;strong>meta-data&lt;/strong> to keep track of what pages exist in multiple files and which ones have free space.&lt;/p>
&lt;h2 id="37-page-layout">3.7 Page Layout&lt;/h2>
&lt;ul>
&lt;li>每个页面都包括一个header，记录关于页面内容的元数据。
&lt;ul>
&lt;li>Page size&lt;/li>
&lt;li>Checksum&lt;/li>
&lt;li>DBMS version&lt;/li>
&lt;li>Transaction visibility&lt;/li>
&lt;li>Self-containment(自成一体) (Some systems like Oracle require this.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>For any page storage architecture, we now need to decide &lt;strong>how to organize the data inside of the page.&lt;/strong>&lt;/p>
&lt;p>We are still assuming that we are only storing &lt;strong>tuples&lt;/strong>.&lt;/p>
&lt;p>Two approaches:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tuple&lt;/strong>-oriented (其实是 &lt;strong>slotted-page&lt;/strong>)
&lt;ul>
&lt;li>页面将slots映射到offsets,slot array 记录对应tuple的便宜量&lt;/li>
&lt;li>Header keeps track of the number of used slots, the offset of the starting location of the last used slot, and a slot array, which keeps track of the location of the start of each tuple.&lt;/li>
&lt;li>To add a tuple, the slot array will grow from the beginning to the end, and the data of the tuples will grow from end to the beginning. The page is considered full when the slot array and the tuple data meet&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Log-structured&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222161048229" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161048229_hub44ae70f4f7c00c2718018a74f4c1d06_119403_a6fd6f2414dd48c987770212b2738c6c.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161048229_hub44ae70f4f7c00c2718018a74f4c1d06_119403_8f4f905424d552352ad3eae80f9367af.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161048229_hub44ae70f4f7c00c2718018a74f4c1d06_119403_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161048229_hub44ae70f4f7c00c2718018a74f4c1d06_119403_a6fd6f2414dd48c987770212b2738c6c.webp"
width="760"
height="412"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="38-tuple-layout">3.8 Tuple Layout&lt;/h2>
&lt;p>tuple 内部的结构&lt;/p>
&lt;p>tuples本质上是一个字节序列。DBMS的工作是将这些字节解释为属性类型和值。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Tuple Header：包含了tuple的元数据&lt;/p>
&lt;ul>
&lt;li>DBMS的并发控制协议的可见性信息。关于哪个事务创建/修改了该元组&lt;/li>
&lt;li>NULL值的位图。&lt;/li>
&lt;li>注意，DBMS不需要在这里存储关于数据库模式的元数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Tuple Data：数据的实际属性&lt;/p>
&lt;ul>
&lt;li>属性通常按照你创建表时指定的顺序存储&lt;/li>
&lt;li>大多数DBMS不允许一个tuple超过一个页面的大小。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Unique Identifier&lt;/p>
&lt;ul>
&lt;li>数据库中的每个tuple都被分配一个唯一的标识符&lt;/li>
&lt;li>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222161450033" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161450033_hu3bd19195469812a461a7fa0e1b7190f8_46490_e95fc6290195b3eb2c3331929231fd6e.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161450033_hu3bd19195469812a461a7fa0e1b7190f8_46490_e384fcb96492f2d64c31cba4265d83d8.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161450033_hu3bd19195469812a461a7fa0e1b7190f8_46490_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161450033_hu3bd19195469812a461a7fa0e1b7190f8_46490_e95fc6290195b3eb2c3331929231fd6e.webp"
width="315"
height="415"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/li>
&lt;li>一般是：&lt;code>page_id + (offset or slow)&lt;/code>&lt;/li>
&lt;li>一个应用程序&lt;strong>不能&lt;/strong>依赖这些ID来表示任何东西&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>De-normalized Tuple Data:&lt;/p>
&lt;p>如果两个表是相关的，DBMS可以 &amp;ldquo;pre-join&amp;quot;它们，所以这些表最终会出现在 在同一个页面上。这使得读取速度加快，因为DBMS只需要加载一个页面而不是两个 独立的页面。然而，这使得更新更加昂贵，因为DBMS需要更多的空间给每个 tuples&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222161346650" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161346650_hu37427914b57f6d5043c3ef126690e110_173412_a754a7e3373b1eff757670a5400a061e.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161346650_hu37427914b57f6d5043c3ef126690e110_173412_0911b0c56d26d1b17e1b5084d21fb464.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161346650_hu37427914b57f6d5043c3ef126690e110_173412_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161346650_hu37427914b57f6d5043c3ef126690e110_173412_a754a7e3373b1eff757670a5400a061e.webp"
width="760"
height="401"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="39-log-structured-storage">3.9 Log-Structured Storage&lt;/h2>
&lt;p>（也叫Append-only Sequence of Data） 参考: &lt;a href="https://www.cnblogs.com/muzhongjiang/p/15151758.html" target="_blank" rel="noopener">Log-Structured 结构&lt;/a>&lt;/p>
&lt;ul>
&lt;li>与Slotted-Page Design有关的问题是：
&lt;ul>
&lt;li>
&lt;p>Fragmentation: 删除tuple会在page中留下空隙。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Useless Disk I/O:&lt;/p>
&lt;p>由于非易失性存储的block-oriented的性质，需要读取整个块来获取tuple。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Random Disk I/O: 磁盘阅读器可能不得不跳到20个不同的地方来更新20个不同的tuples，这可能会非常慢。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>如果我们在一个&lt;strong>只允许创建新数据而不允许覆盖&lt;/strong>的系统上工作呢？日志结构的存储模型与这个假设相配合，解决了上面列出的一些问题。&lt;/p>
&lt;p>&lt;strong>Log-Structured Storage:&lt;/strong> DBMS不存储tuples，&lt;strong>只存储日志记录&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>将数据库如何被修改的记录存储到文件中（放入和删除）。每条日志包含tuples的唯一标识符&lt;/li>
&lt;li>要读取一条记录，DBMS会&lt;strong>从最新的到最旧的逆向扫描日志文件&lt;/strong>，并 &amp;ldquo;重新创建 &amp;ldquo;这个 tuple。&lt;/li>
&lt;li>写的快，读的可能慢。磁盘写入是连续的，现有的页面是不可改变的，这导致了随机磁盘I/O的减少。&lt;/li>
&lt;li>在append-only的存储上工作得很好，因为DBMS不能回溯并更新数据。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222161821846" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161821846_hua80a0ff1847a6d1a6c9d3b75314bb106_64825_2925de20dcd852f9471f48dabd0fcb23.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161821846_hua80a0ff1847a6d1a6c9d3b75314bb106_64825_00586507062e203fe557843ecc7f1243.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161821846_hua80a0ff1847a6d1a6c9d3b75314bb106_64825_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161821846_hua80a0ff1847a6d1a6c9d3b75314bb106_64825_2925de20dcd852f9471f48dabd0fcb23.webp"
width="424"
height="434"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>The log will grow forever. The DBMS needs to periodically &lt;strong>compact&lt;/strong>(紧凑) pages to reduce wasted space.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222161836461" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161836461_hub1621e620434fb3b865eb5d8264521d8_64617_c2cf10f301cf5187656ce3f081399858.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161836461_hub1621e620434fb3b865eb5d8264521d8_64617_bfd0edee3f66195e04817c5518a68003.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161836461_hub1621e620434fb3b865eb5d8264521d8_64617_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161836461_hub1621e620434fb3b865eb5d8264521d8_64617_c2cf10f301cf5187656ce3f081399858.webp"
width="760"
height="276"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;ul>
&lt;li>由于不再需要时间信息，数据库可以&lt;strong>将日志压缩到一个按id排序的表&lt;/strong>中。这些被称为分类字符串表（SSTables），它们可以使tuple搜索非常快。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222161958064" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161958064_hu853b98a7ab66e59b808393c705129b31_31074_1b4c2521981b41a66e203eaaadb83c6b.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161958064_hu853b98a7ab66e59b808393c705129b31_31074_dad1be2109155288503ef62dd1a9cd30.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161958064_hu853b98a7ab66e59b808393c705129b31_31074_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222161958064_hu853b98a7ab66e59b808393c705129b31_31074_1b4c2521981b41a66e203eaaadb83c6b.webp"
width="350"
height="325"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;ul>
&lt;li>紧凑化的问题是，DBMS最终会出现写入放大的情况。(&lt;strong>它一次又一次地重写相同的数据&lt;/strong>）。&lt;/li>
&lt;/ul>
&lt;p>Compaction coalesces larger log files into smaller files by removing unnecessary records.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222162056924" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222162056924_hu94b5ec96540e02aacf1a9c4b3c0322af_57974_acfb438b8cbb51498683bf00bf750498.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222162056924_hu94b5ec96540e02aacf1a9c4b3c0322af_57974_c3c50f7856f5ce4ae6704e9031d1a8c1.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222162056924_hu94b5ec96540e02aacf1a9c4b3c0322af_57974_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222162056924_hu94b5ec96540e02aacf1a9c4b3c0322af_57974_acfb438b8cbb51498683bf00bf750498.webp"
width="760"
height="234"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Log-structured storage managers are more common today. This is partly due to the &lt;strong>proliferation&lt;/strong>(扩散) of RocksDB.&lt;/p>
&lt;h2 id="311-data-representation">3.11 Data Representation&lt;/h2>
&lt;p>A tuple is essentially a sequence of bytes.&lt;/p>
&lt;p>It&amp;rsquo;s the job of the DBMS to &lt;strong>interpret&lt;/strong> those bytes into attribute types and values.&lt;/p>
&lt;p>The DBMS&amp;rsquo;s &lt;strong>catalogs&lt;/strong>(目录) contain the schema information about tables(数据表示方案) that the system uses to figure out the tuple&amp;rsquo;s layout.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222162403262" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222162403262_hu70eda27e5caa1f7624547d63d7ed8d9b_93868_badd799e61d26959ac3480d2740cf2b7.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222162403262_hu70eda27e5caa1f7624547d63d7ed8d9b_93868_9db2e901358ffcc4e60ebb67fda9624d.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222162403262_hu70eda27e5caa1f7624547d63d7ed8d9b_93868_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222162403262_hu70eda27e5caa1f7624547d63d7ed8d9b_93868_badd799e61d26959ac3480d2740cf2b7.webp"
width="640"
height="327"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;ul>
&lt;li>&lt;strong>INTEGER, BIGINT, SMALLINT, TINYINT.&lt;/strong> (Integers)大多数DBMS使用IEEE-754标准规定的 &amp;ldquo;native &amp;ldquo;C/C++类型来存储整数。这些值是&lt;strong>固定长度&lt;/strong>的。&lt;/li>
&lt;li>&lt;strong>FLOAT, REAL&lt;/strong> (Variable Precision Numbers) 这些是不精确的、可变精度的数字类型, &amp;ldquo;native &amp;ldquo;C/C++类型,这些值也是&lt;strong>固定长度&lt;/strong>的。
&lt;ul>
&lt;li>&lt;strong>变精度数的运算比任意精度数的运算更快&lt;/strong>，因为CPU可以直接对其执行指令。然而，在进行计算时&lt;strong>可能会出现精度损失&lt;/strong>！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>NUMERIC, DECIMAL.&lt;/strong>(Fixed-Point Precision Numbers) 通常&lt;strong>以精确的、可变长度&lt;/strong>的二进制表示法（像一个字符串）来存储.带有&lt;strong>额外的元数据&lt;/strong>，这些数据将告诉系统诸如&lt;strong>数据的长度和小数点应该在哪里&lt;/strong>。&lt;/li>
&lt;li>当误差不可接受的时候，DBMS就要付出性能的代价来提高精度。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>VARCHAR, VARBINARY, TEXT, BLOB&lt;/strong> Variable-Length Data&lt;/p>
&lt;ul>
&lt;li>代表任意长度的数据类型。它们通常是用一个header来存储的，这个header可以追踪到字符串的长度，以便于跳转到下一个值。它还可能包含一个数据的校验和。&lt;/li>
&lt;li>&lt;strong>大多数DBMS不允许一个tuple超过一个页面的大小。&lt;/strong> &lt;strong>但是！那些允许的系统将数据存储在一个特殊的 &amp;ldquo;溢出 &amp;ldquo;页&lt;/strong>上，并让tuple包含一个对该页的引用。这些溢出页可以包含指向其他溢出页的指针，直到所有的数据都可以被存储。(类似分级页表)&lt;/li>
&lt;li>有些系统会让你把这些大的数值存储在一个外部文件中，然后元组会包含一个指向该文件的指针。例如，如果数据库存储的是照片信息，DBMS可以将照片存储在外部文件中，而不是让它们占用DBMS中的大量空间。这样做的一个缺点是，DBMS&lt;strong>不能操作这个文件的内容&lt;/strong>。因此，No durability protections. No transaction protections.没有耐久性或交易保护。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>TIME, DATE, TIMESTAMP.&lt;/strong> Dates and Times 不同的系统对日期/时间的表示方法不同。通常情况下，它们被表示为一些单位时间 (自unix时代的（微/毫）秒）。&lt;/p>
&lt;p>&lt;strong>System Catalogs&lt;/strong>&lt;/p>
&lt;p>为了使DBMS能够识别tuple的内容，它维护了 INFORMATION_SCHEMA&lt;strong>内部目录&lt;/strong>来告诉它关于数据库的元数据。&lt;strong>元数据将包含关于数据库有哪些表和列的信息&lt;/strong>，以及它们的类型和值的顺序。&lt;/p>
&lt;p>大多数DBMS将其目录以其表的格式存储在自己的内部。他们使用 特殊代码来 &amp;ldquo;bootstrap &amp;ldquo;这些目录表。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222163207453" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222163207453_hu1de67d00dd19777e263b680b12012894_58781_72c0389207336ff887aa4ac718aef10b.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222163207453_hu1de67d00dd19777e263b680b12012894_58781_d8d8d09727a46772250e13fef7222bf5.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222163207453_hu1de67d00dd19777e263b680b12012894_58781_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222163207453_hu1de67d00dd19777e263b680b12012894_58781_72c0389207336ff887aa4ac718aef10b.webp"
width="651"
height="380"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222163222109" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222163222109_hucc8f4beb738041586f0e722c881afc7a_61914_602903fb3f3eac4fe1e67a69f5be2ced.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222163222109_hucc8f4beb738041586f0e722c881afc7a_61914_52129ab6a3c2ed22b595f15cf049d390.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222163222109_hucc8f4beb738041586f0e722c881afc7a_61914_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222163222109_hucc8f4beb738041586f0e722c881afc7a_61914_602903fb3f3eac4fe1e67a69f5be2ced.webp"
width="661"
height="367"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h1 id="l5-storage-models--compression">L5 Storage Models &amp;amp; Compression&lt;/h1>
&lt;h2 id="51-database-workloads">5.1 Database Workloads&lt;/h2>
&lt;p>OLTP: Online Transaction Processing&lt;/p>
&lt;ul>
&lt;li>
&lt;p>An OLTP workload is characterized by &lt;strong>fast, short running operations&lt;/strong>, simple queries that &lt;strong>operate on single entity at a time&lt;/strong>, and &lt;strong>repetitive operations&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An OLTP workload will typically handle &lt;strong>more writes than reads&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>An example of an OLTP workload is the Amazon storefront. Users can add things to their cart, they can make purchases, but the actions only affect their account.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;p>OLAP: Online Analytical Processing&lt;/p>
&lt;ul>
&lt;li>
&lt;p>An OLAP workload is characterized by &lt;strong>long running(长期运行), complex queries, reads on large portions&lt;/strong> of the database.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In OLAP workloads, the database system is analyzing and &lt;strong>deriving&lt;/strong>(推导/添加) new data from existing data collected on the OLTP side.&lt;/p>
&lt;blockquote>
&lt;p>An example of an OLAP workload would be Amazon computing the most bought item in Pittsburgh on a day when its raining.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;p>HTAP: Hybrid Transaction + Analytical Processing&lt;/p>
&lt;p>A new type of workload which has become popular recently is HTAP, which is like &lt;strong>a combination which tries to do OLTP and OLAP together&lt;/strong> on the same database.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222165717923" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165717923_hub0e80189cc2c5cb3a5257af30c0344c9_131577_0292e6a043d9305c6b098fefcb4dc65d.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165717923_hub0e80189cc2c5cb3a5257af30c0344c9_131577_1519b8a1f5640119d79da7b248547314.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165717923_hub0e80189cc2c5cb3a5257af30c0344c9_131577_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165717923_hub0e80189cc2c5cb3a5257af30c0344c9_131577_0292e6a043d9305c6b098fefcb4dc65d.webp"
width="760"
height="421"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="52-storage-models">5.2 Storage Models&lt;/h2>
&lt;h3 id="n-ary-storage-model-nsm">N-Ary Storage Model (NSM)&lt;/h3>
&lt;p>In the n-ary storage model, the DBMS &lt;strong>stores all of the attributes for a single tuple contiguously in a single page&lt;/strong>&lt;/p>
&lt;p>This approach is &lt;strong>ideal for OLTP workloads&lt;/strong> where requests are insert-heavy and transactions tend to operate only an individual entity.&lt;/p>
&lt;p>It is ideal because it takes only one fetch to be able to get all of the attributes for a single tuple.&lt;/p>
&lt;p>Advantages:&lt;/p>
&lt;ul>
&lt;li>Fast inserts, updates, and deletes.&lt;/li>
&lt;li>Good for queries that need the entire tuple.&lt;/li>
&lt;/ul>
&lt;p>Disadvantages:&lt;/p>
&lt;ul>
&lt;li>Not good for &lt;strong>scanning large portions of the table&lt;/strong> and/or &lt;strong>a subset of the attributes.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222164813494" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222164813494_huba6e0bab0a29c92faf18ea4e71a32e29_109880_c9725ffe5d520ec47aac014c07067a7a.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222164813494_huba6e0bab0a29c92faf18ea4e71a32e29_109880_e35880066c5994e6f0c71713fa0c4c6d.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222164813494_huba6e0bab0a29c92faf18ea4e71a32e29_109880_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222164813494_huba6e0bab0a29c92faf18ea4e71a32e29_109880_c9725ffe5d520ec47aac014c07067a7a.webp"
width="684"
height="464"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="decomposition-分解-storage-model-dsm">Decomposition 分解 Storage Model (DSM)&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222165051507" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165051507_hu9c03f1f657567e7c08df7e4576dd36b4_88960_0c0e1f70958b4350817e058ba88859a2.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165051507_hu9c03f1f657567e7c08df7e4576dd36b4_88960_84ee7de04f474641008f5079f01fa063.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165051507_hu9c03f1f657567e7c08df7e4576dd36b4_88960_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165051507_hu9c03f1f657567e7c08df7e4576dd36b4_88960_0c0e1f70958b4350817e058ba88859a2.webp"
width="712"
height="388"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>This model is &lt;strong>ideal for OLAP&lt;/strong> workloads with many read-only queries that perform large scans over a subset of the table’s attributes.&lt;/p>
&lt;p>Advantages:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Reduces the amount of I/O wasted&lt;/strong> because the DBMS only reads the data that it needs for that query.&lt;/li>
&lt;li>Better query processing and data compression&lt;/li>
&lt;/ul>
&lt;p>Disadvantages:&lt;/p>
&lt;ul>
&lt;li>Slow for point queries, inserts, updates, and deletes because of tuple splitting/&lt;strong>stitching&lt;/strong>(缝合).&lt;/li>
&lt;/ul>
&lt;p>To &lt;strong>put the tuples back together&lt;/strong> when using a column store,there are two common approaches:&lt;/p>
&lt;p>fixed-length offsets(most common): Each value is the same length for an attribute&lt;/p>
&lt;p>Embedded Tuple Ids:Each value is stored with its tuple id in a column&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222165430923" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165430923_hu884be268e032fdeb7a677f672b846f24_81619_b2995747ad547db94d64a161da8089db.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165430923_hu884be268e032fdeb7a677f672b846f24_81619_1a31b3560becd543e3983206645f3cf7.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165430923_hu884be268e032fdeb7a677f672b846f24_81619_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222165430923_hu884be268e032fdeb7a677f672b846f24_81619_b2995747ad547db94d64a161da8089db.webp"
width="760"
height="377"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="53-database-compression">5.3 Database Compression&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>压缩操作被在&lt;strong>disk-based&lt;/strong> DBMSs广泛应用。因为disk的I/O总是瓶颈，所以压缩可以让系统提升性能，尤其是只读analyt Managical workloads上。&lt;/p>
&lt;p>如果事先对tuples进行了压缩，DBMS可以获取更多有用的tuple，但代价是要付出更大的压缩和解压的计算开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内存中的DBMS更加复杂，因为它们不必从磁盘中获取数据来执行一个查询。 内存比磁盘快得多，但压缩数据库可以减少DRAM需求和处理。&lt;/p>
&lt;p>而且必须在速度和压缩率中取得一个平衡。压缩数据库可以减少DRAM的需求和查询执行过程中的CPU成本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果数据集是完全随机的bits，那么我们没有办法进行压缩。然而，现实世界中的数据集有一些key properties 是可以进行压缩的。&lt;/p>
&lt;ul>
&lt;li>数据集往往具有高度倾斜的属性值分布（例如，Brown语料库的Zipfian分布）。&lt;/li>
&lt;li>数据集往往在同一元组的属性之间有很高的相关性（例如，邮政编码到城市。订单日期与发货日期）。 Manag&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Given this, we want a database compression scheme to have the following properties:&lt;/p>
&lt;ul>
&lt;li>Must produce &lt;strong>fixed-length values&lt;/strong>. The only exception is var-length data stored in separate pools. This because the DBMS should follow word-&lt;strong>alignment&lt;/strong>(对齐) and be able to access data using offsets.&lt;/li>
&lt;li>Allow the DBMS to &lt;strong>postpone&lt;/strong>(推迟) decompression as long as possible during query execution (late materialization).&lt;/li>
&lt;li>Must be &lt;strong>a lossless scheme&lt;/strong> because people do not like losing data. Any kind of lossy compression has to be performed at the application level.&lt;/li>
&lt;/ul>
&lt;h3 id="compression-granularity">Compression Granularity&lt;/h3>
&lt;p>在给DBMS增加压缩功能之前，我们需要决定我们要压缩什么样的数据。这个决定决定了压缩方案的可用性。有四个级别的压缩 Manag颗粒度（granularity）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Block Level: 压缩同一张表的tuple块。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tuple Level: 压缩整个tuples的内容（仅NSM）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Attribute Level: 在一个tuple内压缩单个属性值。可以针对同一tuple的多个属性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Columnar Level:&lt;/p>
&lt;p>为多个tuple存储的一个或多个属性压缩多个值 (只限于DSM)。这允许更复杂的压缩方案。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="54-naive-compression">5.4 Naive Compression&lt;/h2>
&lt;p>DBMS使用一个&lt;strong>通用的算法&lt;/strong>对数据进行压缩 (e.g., gzip, LZO, LZ4, Snappy, Brotli, Oracle OZIP, Zstd)。 尽管DBMS可以使用几种压缩算法，但工程师们往往选择那些经常提供较低压缩率以换取更快的压缩/解压的算法。&lt;/p>
&lt;p>naive compression例子： &lt;strong>MySQL InnoDB&lt;/strong>&lt;/p>
&lt;p>DBMS对磁盘页面进行压缩，将其压缩到2KB的幂数，并将其存储到缓冲池中。然而，每次DBMS试图读取数据时，缓冲池中的压缩数据必须被解压&lt;/p>
&lt;p>缺点:&lt;/p>
&lt;ul>
&lt;li>由于访问数据&lt;strong>需要对压缩的数据进行解压&lt;/strong>，这就限制了压缩方案的范围。 如果目标是将整个表压缩成一个巨大的块，使用naive compression 方案是不可能的，因为每次访问都需要对整个表进行压缩/解压缩。 因此，对于MySQL来说，由于压缩范围有限，它将表分解成更小的块状。&lt;/li>
&lt;li>naive方案也没有考虑到数据的高级含义或语义。 该算法既不考虑数据的结构，也不考虑查询打算如何访问 数据。因此，这就&lt;strong>失去了利用late materialization 的机会&lt;/strong>，因为DBMS不能知道它何时能够延迟数据的解压。&lt;/li>
&lt;/ul>
&lt;h2 id="55-columnar-compression-柱状压缩">5.5 Columnar Compression 柱状压缩**&lt;/h2>
&lt;h3 id="run-length-encoding">Run-length Encoding&lt;/h3>
&lt;p>Compress runs of the same value in a single column into triplets:&lt;/p>
&lt;ul>
&lt;li>The value of the attribute.&lt;/li>
&lt;li>The start position in the column segment.&lt;/li>
&lt;li>The # of elements in the run.&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222170534215" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170534215_hua4e94f5df4190ac6a4cb2081ee5bae21_52535_205fac9c1d51344ba77ad176c2aa57d7.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170534215_hua4e94f5df4190ac6a4cb2081ee5bae21_52535_7c1f361f36253fa4c36314fb1dc5291d.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170534215_hua4e94f5df4190ac6a4cb2081ee5bae21_52535_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170534215_hua4e94f5df4190ac6a4cb2081ee5bae21_52535_205fac9c1d51344ba77ad176c2aa57d7.webp"
width="727"
height="383"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Requires the columns to be sorted &lt;strong>intelligently&lt;/strong>(智能) to maximize compression opportunities.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222170706032" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170706032_hua84612ef4007d4d9946188cfd8be97bb_36555_064b5f70fed9b64ec4039b8dc8cff6b5.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170706032_hua84612ef4007d4d9946188cfd8be97bb_36555_a76950044ff733e9d5d314b23132fd6c.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170706032_hua84612ef4007d4d9946188cfd8be97bb_36555_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170706032_hua84612ef4007d4d9946188cfd8be97bb_36555_064b5f70fed9b64ec4039b8dc8cff6b5.webp"
width="693"
height="406"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="bit-packing-encoding">Bit-Packing Encoding&lt;/h3>
&lt;p>When values for an attribute are &lt;strong>always less than the value&amp;rsquo;s declared largest size,&lt;/strong> &lt;strong>store them as smaller data type&lt;/strong>.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222170800172" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170800172_hu46b31a996c3f521c96953fd3435620cc_45759_a9f1efec0e024234e7aaefe39722348b.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170800172_hu46b31a996c3f521c96953fd3435620cc_45759_8042099dbf818e90140c64761452fefb.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170800172_hu46b31a996c3f521c96953fd3435620cc_45759_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170800172_hu46b31a996c3f521c96953fd3435620cc_45759_a9f1efec0e024234e7aaefe39722348b.webp"
width="760"
height="189"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Bit-packing variant that uses a &lt;strong>special marker&lt;/strong> to indicate when a value exceeds largest size and then maintain a look-up table to store them.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222170818530" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170818530_hu97c6f66a875eded62edadc7467f078a1_46217_2eb479e5b8191b0f95d3234bcb4ad1bc.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170818530_hu97c6f66a875eded62edadc7467f078a1_46217_a8ee8ad03b3461e63dbce31825e184fd.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170818530_hu97c6f66a875eded62edadc7467f078a1_46217_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222170818530_hu97c6f66a875eded62edadc7467f078a1_46217_2eb479e5b8191b0f95d3234bcb4ad1bc.webp"
width="760"
height="187"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="bitmap-encoding">Bitmap Encoding&lt;/h3>
&lt;p>Store a separate bitmap for each unique value for an attribute where &lt;strong>an offset in the vector corresponds to a tuple.&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>The i th position in the Bitmap corresponds to the i th tuple in the table.&lt;/li>
&lt;li>Typically segmented into chunks to avoid allocating large blocks of contiguous memory. Only practical &lt;strong>if the value cardinality(基数) is low&lt;/strong>. Some DBMSs provide bitmap indexes.&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222171138540" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171138540_huab479fb3d05c1d9c70bb01c8efde26f2_64903_cafe57d1b3648b09128cc49a5ff8d6bc.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171138540_huab479fb3d05c1d9c70bb01c8efde26f2_64903_201d70af675d42e783e8b5b81b093844.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171138540_huab479fb3d05c1d9c70bb01c8efde26f2_64903_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171138540_huab479fb3d05c1d9c70bb01c8efde26f2_64903_cafe57d1b3648b09128cc49a5ff8d6bc.webp"
width="760"
height="387"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="delta-encoding">Delta Encoding&lt;/h3>
&lt;p>&lt;strong>Recording the difference&lt;/strong> between values that follow each other in the same column.&lt;/p>
&lt;ul>
&lt;li>Store base value in-line or in a separate look-up table.&lt;/li>
&lt;li>&lt;strong>Combine with RLE to get even better compression ratios.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222171254392" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171254392_hu4544ac5a826f509c4a673c460def9e0a_55990_331f471414a83ff3627dfa2947d69f3e.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171254392_hu4544ac5a826f509c4a673c460def9e0a_55990_221ed394c99859231a398861ca0b947d.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171254392_hu4544ac5a826f509c4a673c460def9e0a_55990_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171254392_hu4544ac5a826f509c4a673c460def9e0a_55990_331f471414a83ff3627dfa2947d69f3e.webp"
width="760"
height="230"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="incremental-encoding">Incremental Encoding&lt;/h3>
&lt;p>Type of delta encoding that &lt;strong>avoids duplicating common prefixes/suffixes between consecutive tuples&lt;/strong>. This works best with sorted data.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222171338403" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171338403_hu7a5d9e6f86d19720fec133f61e26c137_73268_c5451d5937c6ba6a785ee7b45203b98d.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171338403_hu7a5d9e6f86d19720fec133f61e26c137_73268_c74575a2c57aff662bede8e943f027a9.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171338403_hu7a5d9e6f86d19720fec133f61e26c137_73268_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171338403_hu7a5d9e6f86d19720fec133f61e26c137_73268_c5451d5937c6ba6a785ee7b45203b98d.webp"
width="760"
height="212"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="dictionary-encoding">Dictionary Encoding&lt;/h3>
&lt;p>Build a data structure that &lt;strong>maps variable-length values to a smaller integer identifier.&lt;/strong>&lt;/p>
&lt;p>Replace those values with their corresponding identifier in the dictionary data structure.&lt;/p>
&lt;ul>
&lt;li>Need to support fast encoding and decoding.
&lt;ul>
&lt;li>Encode/Locate: For a given uncompressed value, convert it into its compressed form.&lt;/li>
&lt;li>Decode/Extract: For a given compressed value, convert it back into its original form.&lt;/li>
&lt;li>No magic hash function will do this for us.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Need to also support range queries.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Most widely used compression scheme in DBMSs.&lt;/strong>&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="image-20230222171632448" srcset="
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171632448_hu85d19909300784701cd1e9eb06f25528_107171_4ff0b43f8b662b8b02b04023a05900b5.webp 400w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171632448_hu85d19909300784701cd1e9eb06f25528_107171_46026c2a80f2ac66b89e41dd7a419b8b.webp 760w,
/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171632448_hu85d19909300784701cd1e9eb06f25528_107171_1200x1200_fit_q85_h2_lanczos_3.webp 1200w"
src="https://ysyyhhh.github.io/blog/p0-c-primerhttps/15445.courses.cs.cmu.edu/fall2022/project0/img/image-20230222171632448_hu85d19909300784701cd1e9eb06f25528_107171_4ff0b43f8b662b8b02b04023a05900b5.webp"
width="760"
height="357"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h1 id="homework-2-storage--indexeshttps15445coursescscmuedufall2022fileshw2-cleanpdf">Homework #2 &lt;a href="https://15445.courses.cs.cmu.edu/fall2022/files/hw2-clean.pdf" target="_blank" rel="noopener">Storage &amp;amp; Indexes&lt;/a>&lt;/h1>
&lt;h2 id="question-1-storage-models">Question 1: Storage Models&lt;/h2>
&lt;p>a database with a single table &lt;strong>R(q_id,txns,total,failed)&lt;/strong>, where q_id is the &lt;strong>primary key&lt;/strong>, and &lt;strong>all attributes are the same fixed width.&lt;/strong>&lt;/p>
&lt;p>Suppose R has 20,000 tuples that fit into 100 pages, &lt;strong>Ignore any additional storage&lt;/strong> overhead for the table (e.g., page headers, tuple headers).&lt;/p>
&lt;p>Assumptions:&lt;/p>
&lt;ul>
&lt;li>The DBMS does &lt;strong>not have any additional meta-data&lt;/strong> (e.g., sort order, zone maps).&lt;/li>
&lt;li>R does &lt;strong>not have any indexes&lt;/strong> (including for primary key q_id)&lt;/li>
&lt;li>&lt;strong>None&lt;/strong> of R’s pages are already &lt;strong>in the buffer pool&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT total - failed FROM R
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WHERE q id = 96 AND txns &amp;gt; 420;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="a-suppose-the-dbms-uses-the-decomposition-storage-model-dsm-with-implicit-offsets">(a) Suppose the DBMS uses the decomposition storage model (DSM) with implicit offsets&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>i What is the &lt;strong>minimum number of pages&lt;/strong> that the DBMS will potentially have to read from disk to answer this query?&lt;/p>
&lt;p>题意是存在这样一条记录,找到该条记录最少的磁盘读次数.&lt;/p>
&lt;p>官方解答是: 4 pages. 1 to find the primary key, + 3 to access txns, total, failed at their corresponding offsets.&lt;/p>
&lt;p>因为使用分解存储模式DSM, 按列存储.&lt;/p>
&lt;p>因此找到主键后就可以通过偏移量找其他属性的值. 读盘次数的限制在找主键上.&lt;/p>
&lt;p>显然,找主键至少需要一次读盘.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ii What is the &lt;strong>maximum number of pages&lt;/strong> that the DBMS will potentially have to read from disk to answer this query?&lt;/p>
&lt;p>官方解答: 28 pages. &lt;strong>There are 25 pages per attribute.&lt;/strong> In the worst case, we scan through all 25 pages to find the primary key, and then + 3 to access txns, total, failed at their corresponding offsets.&lt;/p>
&lt;p>上题可知,找主键次数决定了读盘次数.&lt;/p>
&lt;p>也就是当q_id = 96的记录越靠后, 找主键次数越多.&lt;/p>
&lt;p>因为没有顺序,所以96是无用的信息.&lt;/p>
&lt;p>同时因为&lt;strong>有四个属性,且所有属性大小固定&lt;/strong>. 所以当每个属性都占25页时,且q_id=26所在的记录是最后一个(25),找主键次数最大为25次.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="bsuppose-the-dbms-uses-the-n-ary-storage-model-nsm">(b)Suppose the DBMS uses the N-ary storage model (NSM)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>i. What is the minimum number of pages that the DBMS will potentially have to read from disk to answer this query?&lt;/p>
&lt;p>Solution: We find the tuple with the matching primary key on the first page. No need to look in other pages since all attributes are stored together.&lt;/p>
&lt;p>在第一页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ii. [4 points] What is the maximum number of pages that the DBMS will potentially have to read from disk to answer this query?&lt;/p>
&lt;p>在最后一页 100&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="question-2-cuckoo-hashing">Question 2: Cuckoo Hashing&lt;/h2>
&lt;p>几道哈希表计算的题目,较简单&lt;/p>
&lt;p>2进制：0b，8进制：0o，10进制：无前缀，16进制：0x&lt;/p>
&lt;h2 id="question-3-extendible-hashing">Question 3: Extendible Hashing&lt;/h2>
&lt;p>Consider an extendible hashing structure such that:&lt;/p>
&lt;ul>
&lt;li>Each bucket can hold up to two records.&lt;/li>
&lt;li>The hashing function uses the lowest g bits, where g is the global depth.&lt;/li>
&lt;/ul>
&lt;p>题目是一个二进制可扩展哈希. 哈希函数是二进制最低g位.&lt;/p>
&lt;p>每个哈希值对应一个桶, 每个桶最多两个, 所有刚好就是二进制.&lt;/p>
&lt;h3 id="a-starting-from-an-empty-table-insert-keys-15-14-23-11-9">(a) Starting from an empty table, insert keys 15, 14, 23, 11, 9.&lt;/h3>
&lt;p>二进制表示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">15: 00001111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14: 00001110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23: 00010111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11: 00001011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9 : 00001001
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>插入步骤(括号内为局部深度,全局深度为最大局部深度)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">插入15
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 1; 桶 1(1):15
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 1; 桶 1(1):15 ; 0(1):14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 1; 桶 1(1):15,23; 0(1):14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 1; 桶 1(1):15,23,11; 0(1):14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">桶1此时有三条记录,需要扩展深度,扩展为2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 2; 桶 11(2):15,23,11; 01(2):; 0(1):14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">桶11此时有三条记录,需要扩展深度,扩展为3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 3; 桶 111(3):15,23; 011(3):11;01(2):; 0(1):14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 3; 桶 111(3):15,23; 011(3):11; 0(1):14; 01(2):9;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>i. What is the global depth of the resulting table?&lt;/p>
&lt;p>显然,当g至少等于3的时候才能使得同一个哈希值最多对应两个记录.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ii. [4 points] What is the local depth the bucket containing 15?&lt;/p>
&lt;p>为3&lt;/p>
&lt;/li>
&lt;li>
&lt;p>iii. [4 points] What is the local depth of the bucket containing 14?&lt;/p>
&lt;p>为1&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="b-starting-from-the-result-in-a-you-insert-keys-12-5-7-13-2">(b) Starting from the result in (a), you insert keys 12, 5, 7, 13, 2.&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">15: 00001111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14: 00001110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23: 00010111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11: 00001011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9 : 00001001
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">此时 全局: 3; 桶 111(3):15,23; 011(3):11; 0(1):14; 01(2):9;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12: 00001010
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5 : 00000101
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7 : 00000111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">13: 00001101
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2 : 00000010
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 3; 桶 111(3):15,23; 011(3):11; 0(1):14,12; 01(2):9;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 3; 桶 111(3):15,23; 011(3):11; 0(1):14,12; 01(2):9;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 3; 桶 111(3):15,23; 011(3):11; 0(1):14,12; 1(1):9,5;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">此时111桶有3个,增加深度为4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 4; 桶 1111(4):15;0111(4):23,7; 011(3):11; 0(1):14,12; 1(1):9,5;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">13
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 4; 桶 1111(4):15;0111(4):23,7; 011(3):11; 0(1):14,12; 1(1):9,5;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">01(2):13;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局: 4; 桶 1111(4):15;0111(4):23,7; 011(3):11; 0(1):14,12; 1(1):9,5;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">01(2):13;01(2):2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>i. [4 points] Which key will first cause a split (without doubling the size of the table)?&lt;/p>
&lt;p>这里的split操作指的是&lt;strong>增加桶的数量&lt;/strong>,而不double.也就是不增加全局深度.(增加全局深度会翻一倍)&lt;/p>
&lt;p>所以是13第一个增加了桶的数量.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ii. [4 points] Which key will first make the table double in size?&lt;/p>
&lt;p>7&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="c-now-consider-the-table-below-along-with-the-following-deletion-rules">(c) Now consider the table below, along with the following deletion rules:&lt;/h3>
&lt;ol>
&lt;li>If two buckets satisfy the following:&lt;/li>
&lt;/ol>
&lt;p>(a) They have the same local depth d&lt;/p>
&lt;p>(b) They share the first d − 1 bits of their indexes (e.g. b010 and b110 share the first 2 bits)&lt;/p>
&lt;p>(c) Their constituent elements fit in a single bucket. Then they can be merged into a single bucket with local depth d − 1.&lt;/p>
&lt;ol start="2">
&lt;li>If the global depth g becomes strictly greater than all local depths, then the table can be halved in size. The resulting global depth is g − 1.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">28:11100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8 :01000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">01
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">25:11001
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">30:11110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">22:10110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">18:10010
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11:01011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">27:11011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23:10111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7 :00111
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Starting from the table above, delete keys 25, 18, 22, 27, 7.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">delete 25
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">28:11100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8 :01000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">30:11110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">22:10110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">18:10010
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11:01011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">27:11011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23:10111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7 :00111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">delete 18
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">28:11100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8 :01000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">30:11110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">22:10110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11:01011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">27:11011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23:10111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7 :00111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">delete 22
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">28:11100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8 :01000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">30:11110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11:01011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">27:11011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23:10111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7 :00111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">此时00 和 10可进行合并
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">28:11100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8 :01000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">30:11110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11:01011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">27:11011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23:10111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7 :00111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">delete 27
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">28:11100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8 :01000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">30:11110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11:01011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23:10111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7 :00111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">此时 011 和 111可合并为11,一次合并最多减少1, 此时global depth = 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">28:11100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8 :01000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">30:11110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11:01011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23:10111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7 :00111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">delete 7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">28:11100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8 :01000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">30:11110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11:01011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">23:10111
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>i. Which deletion first causes a reduction in a local depth.&lt;/li>
&lt;/ul>
&lt;p>22&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ii. Which deletion first causes a reduction in global depth.&lt;/p>
&lt;p>27&lt;/p>
&lt;p>Solution: Deleting 27 from bucket b011 allows it to merge with b111. Since these two buckets are the only ones of depth d = 3, this merge reduces the global depth to d = 2&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="question-4-btree">Question 4: B+Tree&lt;/h2>
&lt;p>还行,就是有个奇怪的点. 索引节点的值一般会出现在叶子节点上.&lt;/p>
&lt;p>最后一题是找出指定的节点 非法的地方.&lt;/p>
&lt;h1 id="p1">P1&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">1: 0001
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2: 0010
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3: 0011
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4: 0100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5: 0101
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6: 0110
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7: 0111
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8: 1000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9: 1001
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1 2 3 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局1 1(1):1,3;0(1):2,4;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局1 1(1):1,3,5;0(1):2,4;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局2 01(2):1,5;11(2)3;0(1):2,4;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局2 01(2):1,5;11(2)3;00(2):4;10(2):2,6;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局2 01(2):1,5;11(2)3,7;00(2):4;10(2):2,6;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局2 01(2):1,5;11(2)3,7;00(2):4,8;10(2):2,6;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局2 01(2):1,5,9;11(2)3,7;00(2):4,8;10(2):2,6;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局3 001(3):1,9;101(3):5;11(2)3,7;00(2):4,8;10(2):2,6;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lru-k">LRU-K&lt;/h2>
&lt;p>The LRU-K algorithm &lt;strong>evicts&lt;/strong>(剔除) a frame whose &lt;strong>backward k-distance&lt;/strong> is maximum of all frames in the replacer.&lt;/p>
&lt;p>&lt;strong>Backward k-distance&lt;/strong> is computed as the &lt;strong>difference&lt;/strong> in time between current timestamp and the timestamp of kth previous access.&lt;/p>
&lt;p>A frame with less than k historical accesses is given +inf as its backward k-distance. When &lt;strong>multipe frames have +inf backward k-distance&lt;/strong>, the replacer evicts the frame &lt;strong>with the earliest timestamp&lt;/strong>.&lt;/p>
&lt;p>先弄清楚逻辑在写，不要把时间花在无意义的bug上。&lt;/p>
&lt;h1 id="p2-btree">P2 B+Tree&lt;/h1>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>内部节点：索引作用&lt;/p>
&lt;p>叶子节点：包含真正的数据实体&lt;/p>
&lt;p>由于树是动态增长和收缩，所以要处理 split 和 merge&lt;/p>
&lt;blockquote>
&lt;p>Since the tree structure grows and shrink dynamically, you are required to handle the logic of split and merge.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Checkpoint #1 — Due Date: Oct 11 @ 11:59pm&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://15445.courses.cs.cmu.edu/fall2022/project2/#b&amp;#43;tree-pages" target="_blank" rel="noopener">Task #1 - B+Tree Pages&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://15445.courses.cs.cmu.edu/fall2022/project2/#b&amp;#43;tree-structure" target="_blank" rel="noopener">Task #2 - B+Tree Data Structure (Insertion, Deletion, Point Search)&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Checkpoint #2 — Due Date: Oct 26 @ 11:59pm&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://15445.courses.cs.cmu.edu/fall2022/project2/#index-iterator" target="_blank" rel="noopener">Task #3 - Index Iterator&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://15445.courses.cs.cmu.edu/fall2022/project2/#concurrent_index" target="_blank" rel="noopener">Task #4 - Concurrent Index&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>该project 要依赖于上一个 buffer pool 的正确实现。&lt;/p>
&lt;p>由于第一个检查点与第二个检查点密切相关，在第二个检查点中，您将在现有的B+索引中实现索引抓取，因此我们传入了一个名为transaction的指针参数，其默认值为nullptr。在任务#4之前，您不需要更改或调用与参数相关的任何函数。&lt;/p>
&lt;h2 id="task-1---btree-pages">Task #1 - B+Tree Pages&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://15445.courses.cs.cmu.edu/fall2022/project2/#b&amp;#43;tree-page" target="_blank" rel="noopener">B+Tree Parent Page&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://15445.courses.cs.cmu.edu/fall2022/project2/#b&amp;#43;tree-internal-page" target="_blank" rel="noopener">B+Tree Internal Page&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://15445.courses.cs.cmu.edu/fall2022/project2/#b&amp;#43;tree-leaf-page" target="_blank" rel="noopener">B+Tree Leaf Page&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="btree-parent-page">B+Tree Parent Page&lt;/h3>
&lt;p>ParenPage 被 Internal Page 和 Leaf Page所继承。&lt;/p>
&lt;p>并且只包含了 子类 所共享的信息。&lt;/p>
&lt;p>&lt;strong>可以规定&lt;/strong> &lt;code>parent_page_id_&lt;/code> 为 &lt;code>INVALID_PAGE_ID&lt;/code> 表示根节点。&lt;/p>
&lt;p>| Variable Name | Size | Description | | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;- | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | | page_type_ | 4 | Page Type (internal or leaf) | | lsn_ | 4 | Log sequence number (Used in Project 4) | | size_ | 4 | Number of Key &amp;amp; Value pairs in page | | max_size_ | 4 | Max number of Key &amp;amp; Value pairs in page | | parent_page_id_ | 4 | Parent Page Id | | page_id_ | 4 | Self Page Id |&lt;/p>
&lt;h3 id="btree-internal-page">B+Tree Internal Page&lt;/h3>
&lt;ul>
&lt;li>不存储真实数据。只存储 m个有序 key和m+1个child 指针。&lt;/li>
&lt;li>因为key的数量和指针数量不相等。第一个key被设定为invalid。所有方法需要从第二个key开始（下标为1）&lt;/li>
&lt;li>实际存储如下&lt;/li>
&lt;li>键,指针,键,指针,&amp;hellip;,键,指针.&lt;/li>
&lt;li>此时有m+1个键,为了保证只有m个键,所以第一个键设置为无效的.&lt;/li>
&lt;/ul>
&lt;p>key的数量限制&lt;/p>
&lt;ul>
&lt;li>在任何时间，最少装了一半（half-full）。&lt;/li>
&lt;li>删除时，两个 half-full可以被joined 成为一个合法的 Internal Page
&lt;ul>
&lt;li>或者被重新分配来避免merge&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当插入到一个fullpage时，可以被split成两个。&lt;/li>
&lt;li>This is an example of one of the many design choices that you will make in the implementation of the B+ Tree.&lt;/li>
&lt;/ul>
&lt;p>三个泛型 KeyType, ValueType, KeyComparator。&lt;/p>
&lt;p>&lt;strong>KeyType&lt;/strong> 不一定直接可用大于小于号比较，所以引入了 KeyComparator，从 cpp 文件中的实例化可以看出用的是 GenericKey 和 GenericComparator，查看二者源码可以得到以下信息：&lt;/p>
&lt;p>&lt;strong>GenericKey&lt;/strong> 可以调用 ToString() 函数得到其 int64 表示，然后用 **%ld 格式符打印。**这对我们后面调试时非常重要。 GenericComparator 的比较规则是：左边小于右边时，返回 -1；左边大于右边时，返回 1；相等返回 0。&lt;/p>
&lt;p>&lt;strong>ValueType&lt;/strong> 代表的是指向子页面的指针，从实例化可以看出实际只用了 page_id_t，也就是 &lt;strong>int&lt;/strong>。&lt;/p>
&lt;p>数据存储上，其理论结构应为 &amp;lt;指针，键，指针，键…，键，指针&amp;gt;，为方便存储，实际上&lt;strong>在头部多补了一个无效键&lt;/strong>，从而可以用一个 pair 的数组存储：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#define MappingType std::pair&amp;lt;KeyType, ValueType&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class BPlusTreeInternalPage : public BPlusTreePage {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">private:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Flexible array member for page data.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MappingType array_[1];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>array_[1] 等价与 pair类型的指针.指向pair数组. 数组的每一个元素是&amp;lt;键,值&amp;gt;&lt;/p>
&lt;p>在内部节点中,值代表指针.(第一个元素的键是无效的,但值是存在的).&lt;/p>
&lt;p>因为节点对象使用的是预先分配好的固定空间，array_ 可以控制从该位置开始到 Page 的 data 结束为止的这一段空间。&lt;/p>
&lt;p>因此，节点对象的生命周期也不是由 new 和 delete，而是由 BufferPoolManager 管理.&lt;/p>
&lt;ul>
&lt;li>取一个页面，用 FetchPage；&lt;/li>
&lt;li>使用结束归还一个页面，用 UnpinPage。&lt;/li>
&lt;li>page_id_ 不仅是 B+ 树中节点的编号，同时也是这个节点使用的 Page 在 BufferPool 中的编号。&lt;/li>
&lt;/ul>
&lt;h3 id="btree-leaf-page">B+Tree Leaf Page&lt;/h3>
&lt;ul>
&lt;li>存储 m个有序key，m个 value 实体&lt;/li>
&lt;li>在这次实现中，value 仅仅是64位的record_id, 被用于定位真实的tuples的存储位置.
&lt;ul>
&lt;li>see &lt;code>RID&lt;/code> class defined under in &lt;code>src/include/common/rid.h&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对于键值对的数量限制与Internal Page一致.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>重要&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>尽管叶子节点和内部节点有相同类型的key.但他们值的类型不一样.
&lt;ul>
&lt;li>所以&lt;strong>max_size 也应该是不同的&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每个节点的 &lt;strong>data_&lt;/strong>,都是从buffer pool 中fetch得到的 内存页面.
&lt;ul>
&lt;li>所以当写或读时,要先使用唯一的page_id,从buffer pool 中fetch 出来.&lt;/li>
&lt;li>然后使用 reinterpret cast, 转换成 叶子节点或内部节点.&lt;/li>
&lt;li>并且要在读或写操作结束后,unpin这个页面.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="task-2---btree-data-structure">Task #2 - B+Tree Data Structure&lt;/h2>
&lt;ul>
&lt;li>只支持 unique keys. 也就是说,当有重复的key插入时, 不进行任何操作并返回false&lt;/li>
&lt;li>同时当删除操作导致 页面key数量低于阈值时, 需要正确地执行 merge 和 redistribute(也叫做 coalescing) 操作.&lt;/li>
&lt;/ul>
&lt;p>对于checkpoint , B+Tree Index 只需要支持 &lt;strong>insertions&lt;/strong> (&lt;code>Insert()&lt;/code>), &lt;strong>point search&lt;/strong> (&lt;code>GetValue()&lt;/code>), and &lt;strong>deletes&lt;/strong> (&lt;code>Delete()&lt;/code>)&lt;/p>
&lt;p>插入操作 引起 split操作的情况:&lt;/p>
&lt;ul>
&lt;li>插入操作后, 叶子节点中 pair的数量 等于 max_size&lt;/li>
&lt;li>插入 操作前, 内部节点 孩子数量等于 max_size&lt;/li>
&lt;/ul>
&lt;p>因为写操作会导致, root_page_id的改变,所以也要在 &lt;strong>header page&lt;/strong> 同时更新 root_page_id (&lt;code>src/include/storage/page/header_page.h&lt;/code>).&lt;/p>
&lt;p>更新的方法是调用 &lt;code>UpdateRootPageId&lt;/code> (已经提供了)&lt;/p>
&lt;p>需要隐藏类型和比较.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">template &amp;lt;typename KeyType,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> typename ValueType,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> typename KeyComparator&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class BPlusTree{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // ---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>KeyType&lt;/code>: 索引中key的类型,只可能是 &lt;code>GenericKey&lt;/code>.
&lt;ul>
&lt;li>GeneriKey真实的size是特定的.&lt;/li>
&lt;li>是通过模板参数指定和实例化的，并取决于索引属性的数据类型.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ValueType&lt;/code>: 索引中值的类型. 只可能是 64-bit RID.&lt;/li>
&lt;li>&lt;code>KeyComparator&lt;/code>: 用来比较两个KeyType实例 大小关系. 左边小于右边时，返回 -1；左边大于右边时，返回 1；相等返回 0。&lt;/li>
&lt;/ul>
&lt;h2 id="checkpoint-1查找插入和删除">Checkpoint 1：查找，插入和删除&lt;/h2>
&lt;h3 id="约定">约定&lt;/h3>
&lt;p>这里约定 内部节点array中key 与子节点的关系.&lt;/p>
&lt;ul>
&lt;li>左子节点的keys &amp;lt;= 父节点的keys&lt;/li>
&lt;li>右子节点的keys &amp;gt; 父节点的keys&lt;/li>
&lt;/ul>
&lt;h3 id="查找">查找&lt;/h3>
&lt;p>给定key，返回查找的页面。&lt;/p>
&lt;p>页面的数据存在叶子节点中。&lt;/p>
&lt;p>因此要从根节点开始，一层一层往下找&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">findValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Page&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">KeyType&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//二分查找 page的array中,找到最大的小于等于key的 pair
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">pair&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GetLeaf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Page&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">KeyType&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Page&lt;/span> &lt;span class="n">now&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">leaf&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">now&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GetValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyType&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Page&lt;/span> &lt;span class="n">now&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetLeaf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//现在now为叶子节点,在叶子节点中找对应的值.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">findValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//如果返回值的key不相等则没找到.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//相等则返回找到
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="插入叶子节点">插入(叶子节点)&lt;/h3>
&lt;p>因为以下的操作都基于至少有一个根节点的情况.&lt;/p>
&lt;p>因此在最开始要判断是否为空树,如为空树则创建根, 直接返回&lt;/p>
&lt;p>首先看键存不存在,如果已经存在,则直接返回.&lt;/p>
&lt;p>因为B+树的真实数据存在叶子节点中. 因此插入的第一步就是在找到对应叶子节点,并**插入(叶子节点)**到对应位置.&lt;/p>
&lt;p>此后可能会引起分裂.&lt;/p>
&lt;ol>
&lt;li>先直接**插入(叶子节点)**到叶子节点中.&lt;/li>
&lt;li>当发现**插入(叶子节点)**后, 叶子节点的pair数量等于max_size时进行分裂.&lt;/li>
&lt;/ol>
&lt;p>split(page) 操作&lt;strong>这里不分内部叶子节点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当前节点是full page,因此可以将当前节点分裂成 (左子节点 half full, 新父节点 , half full)&lt;/li>
&lt;li>其中新父节点的值是左子节点的最后一个.&lt;/li>
&lt;li>新父节点 需要 &lt;strong>插入(内部节点)&lt;/strong> 到原来的父节点中.
&lt;ul>
&lt;li>&lt;strong>插入(内部节点)前&lt;/strong>, 要判断 &lt;strong>原父节点的孩子数量是否等于max_size&lt;/strong>&lt;/li>
&lt;li>如果等于, 则先&lt;strong>将原父节点分裂&lt;/strong> 后.&lt;/li>
&lt;li>再执行当前的**插入(内部节点)**操作.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>特殊的. 如果page是根节点, 即没有原父亲节点.
&lt;ul>
&lt;li>则将 根节点 更新成新父节点后, 返回即可.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>插入(内部节点)&lt;/strong> : 因为在插入前已经处理好了插入操作的合法性,因此直接插入即可.&lt;/p>
&lt;p>伪代码:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">SetRoot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page_id&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root_page_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page_id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//一定要调用 UpdateRootPageId
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//分裂出下面三个节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">left_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">right_page&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_parent_page&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//key为左节点的最后一个key, value为指向左节点的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//判断是否为根节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">rootType&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SetRoot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new_parent_page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">page_id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//获取父亲节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">parent_page&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parent_page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isFull&lt;/span>&lt;span class="p">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parent_page&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//将new_parent_page 插入到 parent_page中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">parent_page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//判断是否为空树
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">valid&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Page&lt;/span> &lt;span class="n">new_page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SetRoot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newpage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">page_id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//先查找
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Page&lt;/span> &lt;span class="n">leaf_page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetLeaf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//直接调用叶子节点的插入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">leaf_page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">leaf_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Page&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">LeafPage&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Page&lt;/span> &lt;span class="n">new_page&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//直接插入,同时只需要更新指向 new_page 和 new_page的 next
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//满了就分裂.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">isFull&lt;/span>&lt;span class="p">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">split&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">InternalPage&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Page&lt;/span> &lt;span class="n">new_page&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//直接插入,但array中key的有效位置是从1开始
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//上面代码还需要考虑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//页面的创建和释放
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除">删除&lt;/h3>
&lt;p>B+树最难的地方。但比起splay来说还是简单太多了。并且因为B+树只有叶子节点存值。在内部节点的删除上比B树简单了很多。&lt;/p>
&lt;p>删除的核心操作：&lt;/p>
&lt;ol>
&lt;li>叶子节点/内部节点删除元素后;
若小于下限,则按下面的优先级考虑;&lt;/li>
&lt;li>如相邻兄弟结点丰满（即 元素个数 大于 下限+1），则向兄弟结点&lt;strong>借&lt;/strong>一个元素。（具体是 先从相邻方向上的父亲结点变成借来的元素左右(这里具体要看借左边还是右边)，而后对应相邻的兄弟补回这个元素）。否则：&lt;/li>
&lt;li>与相邻的兄弟结点 &lt;strong>合并&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>父亲节点被删除后, 需要继续执行上面的操作.&lt;/p>
&lt;p>叶子节点和内部节点的差异:&lt;/p>
&lt;ul>
&lt;li>借
&lt;ul>
&lt;li>内部节点和B树操作一样, 先&lt;strong>从相邻方向上的父亲结点拿一个元素&lt;/strong>，而后&lt;strong>对应相邻的兄弟补回这个元素&lt;/strong>&lt;/li>
&lt;li>叶子节点的父亲只是索引节点,因此 把兄弟节点的元素拿来后, 父亲节点的值根据 从左边/右边拿 变成相应的合法的值即可.&lt;/li>
&lt;li>借的操作都&lt;strong>不会涉及父亲节点的删除&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>合并
&lt;ul>
&lt;li>内部节点和B树操作一样, 将兄弟和父亲节点一起合并. (也相当于删除了父亲节点)下限+(下限-1) + 1 等于上限,因此合法&lt;/li>
&lt;li>叶子节点是 两个叶子节点合并后直接删除父亲节点.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>特殊地,如果删除的是根节点的元素，且根结点只有一个元素，则&lt;strong>下降一层&lt;/strong>退出。&lt;/p>
&lt;ul>
&lt;li>因为只有一个待删除的元素，说明目前只有一个儿子结点（刚刚合并了）。&lt;/li>
&lt;li>直接将儿子结点作为根节点。&lt;/li>
&lt;/ul>
&lt;p>伪代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//tree的Remove操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Remove&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//1.判断是否为空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//返回
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//2.找到叶子结点，并在叶子结点中删除该元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">leaf_page&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//找到叶子节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//TODO 删除元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//3.判断叶子结点元素个数是是否小于下限
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="err">小于&lt;/span> &lt;span class="err">下限&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UnderFlow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Underflow&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//3.0 判断是否为根节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IsRoot&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//根节点的下限是1.说明应该减少一层.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//3.0.1a找到根节点唯一的子节点.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//该子节点变为根节点.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//3.0.1b 根节点没有子节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//直接删除,树变成空树.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//3.1a. 找兄弟节点借
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Borrow&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//3.1a.1a找左兄弟节点借
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">borrow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">left_&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//3.1a.1b左兄弟不能借，就找右兄弟节点借
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">borrow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">right_&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//3.1b.借失败了，就准备合并
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">union&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//3.1b.1a 左兄弟结点存在,就找左兄弟节点合并
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">have&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">union&lt;/span>&lt;span class="err">(&lt;/span>&lt;span class="nc">left_&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//3.1b.1b 没有左兄弟节点, 找右兄弟节点合并.(除根节点外肯定至少有一个兄弟节点)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">union&lt;/span>&lt;span class="err">(&lt;/span>&lt;span class="nc">right_&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">borrow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bro_page&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//如果兄弟节点的 size &amp;lt;= 下限,不能借
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bro_page&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="err">下限&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//否则可以借
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//是叶子结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//直接拿 对应兄弟结点最靠近的元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//是内部结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//加入的元素 = 中间父亲结点对应的元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//中间父亲结点对应的元素 = 兄弟结点最靠近的元素.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//兄弟结点最靠近的元素删除
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">union&lt;/span>&lt;span class="err">(&lt;/span>&lt;span class="nc">bro_page&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//是叶子结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//两个结点合并成一个结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//是内部结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//好像都是直接把右合并到左就可以.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//删除父亲结点中间的元素.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//如果父亲结点size 小于等于 下限
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//父亲结点采取下溢操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Why parallelism? Why efficiency?</title><link>https://ysyyhhh.github.io/blog/why-parallelism-why-efficiency/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/why-parallelism-why-efficiency/</guid><description>&lt;h2 id="parallelism">Parallelism&lt;/h2>
&lt;p>加速比 Speed up 是指：
程序在单处理器上运行的时间 / 程序在多处理器上运行的时间&lt;/p>
&lt;p>我们一般会期望用两倍的硬件得到两倍的速度提升,但是实际上并不是这样的。&lt;/p>
&lt;p>制约性能提升可能的因素有:&lt;/p>
&lt;ul>
&lt;li>资源分配不均匀&lt;/li>
&lt;li>通信开销&lt;/li>
&lt;li>短板效应&lt;/li>
&lt;li>共享资源读写冲突&lt;/li>
&lt;/ul>
&lt;p>为什么要去了解硬件？&lt;/p>
&lt;ul>
&lt;li>什么是限制性能的因素？&lt;/li>
&lt;li>导致性能瓶颈的原因是什么？&lt;/li>
&lt;/ul>
&lt;h2 id="efficiency">Efficiency&lt;/h2>
&lt;p>fast != efficient&lt;/p>
&lt;ul>
&lt;li>什么是效率？
尽可能地利用资源，减少浪费&lt;/li>
&lt;/ul>
&lt;p>比如按时间租用服务器。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>并行程序的挑战：&lt;/p>
&lt;ul>
&lt;li>负载均衡 Load balance&lt;/li>
&lt;li>通信延迟 Communication latency&lt;/li>
&lt;li>集体工作时，真正用于计算的时间很少&lt;/li>
&lt;/ul></description></item><item><title>Nvidia</title><link>https://ysyyhhh.github.io/showcase/nvidia/</link><pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/showcase/nvidia/</guid><description/></item><item><title>openai 相关QA</title><link>https://ysyyhhh.github.io/blog/openai-%E7%9B%B8%E5%85%B3qa/</link><pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/openai-%E7%9B%B8%E5%85%B3qa/</guid><description>&lt;h2 id="无法连接">无法连接&lt;/h2>
&lt;p>Q:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">openai.error.APIConnectionError: Error communicating with OpenAI: HTTPSConnectionPool&lt;span class="o">(&lt;/span>&lt;span class="nv">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;api.openai.com&amp;#39;&lt;/span>, &lt;span class="nv">port&lt;/span>&lt;span class="o">=&lt;/span>443&lt;span class="o">)&lt;/span>: Max retries exceeded with url: /v1/chat/completions &lt;span class="o">(&lt;/span>Caused by ProxyError&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;Unable to connect to proxy&amp;#39;&lt;/span>, SSLError&lt;span class="o">(&lt;/span>SSLZeroReturnError&lt;span class="o">(&lt;/span>6, &lt;span class="s1">&amp;#39;TLS/SSL connection has been closed (EOF) (_ssl.c:1131)&amp;#39;&lt;/span>&lt;span class="o">))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">问题出在模块 urllib3 的版本，报错的是 1.26.3，没报错的是 1.25.11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">在原报错环境中使用下面命令重装低版本 urllib3：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip install &lt;span class="nv">urllib3&lt;/span>&lt;span class="o">==&lt;/span>1.25.11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">然后测试果然就没问题了。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>杂</title><link>https://ysyyhhh.github.io/blog/%E6%9D%82/</link><pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/blog/%E6%9D%82/</guid><description>&lt;p>session权限问题&lt;/p>
&lt;p>&lt;a href="https://blog.51cto.com/u_15162069/2778036" target="_blank" rel="noopener">https://blog.51cto.com/u_15162069/2778036&lt;/a>&lt;/p>
&lt;h5 id="rsa前后端解密出错">RSA前后端解密出错&lt;/h5>
&lt;p>14：07&lt;/p>
&lt;p>JSEncrypt支持的是&lt;a href="https://so.csdn.net/so/search?q=openssl&amp;amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">openssl&lt;/a>生成的pkcs1格式私钥，java需要pkcs8格式私钥，公钥格式不变&lt;/p>
&lt;p>前端加入替换 encodeURI(encodeData).replace(/\+/g, &amp;lsquo;%2B&amp;rsquo;)&lt;/p>
&lt;p>后端接口加入 URLDecoder.decode(password,&amp;ldquo;UTF-8&amp;rdquo;);&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/qq_42979402/article/details/109184787" target="_blank" rel="noopener">https://blog.csdn.net/qq_42979402/article/details/109184787&lt;/a>&lt;/p>
&lt;p>真正错误是密码加了hash函数后，返回值是数字而不是字符串！！！&lt;/p>
&lt;h4 id="数据库返回乱码">数据库返回乱码&lt;/h4>
&lt;p>&lt;a href="https://www.cnblogs.com/fanbi/p/13940432.html" target="_blank" rel="noopener">https://www.cnblogs.com/fanbi/p/13940432.html&lt;/a>&lt;/p>
&lt;h4 id="实际上是apigateway-放入-header-后再取出-乱码httpsblogcsdnnetqq_31277409articledetails118544597">&lt;a href="https://blog.csdn.net/qq_31277409/article/details/118544597" target="_blank" rel="noopener">实际上是apigateway 放入 header 后再取出 乱码&lt;/a>&lt;/h4>
&lt;h4 id="存储过程返回多结果集并接收">存储过程返回多结果集并接收&lt;/h4>
&lt;h4 id="test时报错-aop之类的">test时报错 AOP之类的&lt;/h4>
&lt;p>&lt;a href="https://blog.csdn.net/crxk_/article/details/103196146" target="_blank" rel="noopener">禁用字节码校验&lt;/a>&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/guide/%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/guide/%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</guid><description>&lt;h2 id="git">git&lt;/h2>
&lt;p>测试环境&lt;/p>
&lt;ul>
&lt;li>自动化部署&lt;/li>
&lt;li>一键转移到生成环境&lt;/li>
&lt;/ul>
&lt;h2 id="部署">部署&lt;/h2>
&lt;h2 id="项目代码">项目代码&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>测试代码&lt;/p>
&lt;ul>
&lt;li>编码风格测试&amp;amp;修正&lt;/li>
&lt;li>功能测试&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Dockerfile&lt;/p>
&lt;/li>
&lt;li>
&lt;p>docker-compose&lt;/p>
&lt;/li>
&lt;li>
&lt;p>测试脚本&lt;/p>
&lt;/li>
&lt;li>
&lt;p>部署脚本&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="前端代码结构">前端代码结构&lt;/h2>
&lt;h3 id="优点">优点&lt;/h3>
&lt;p>接口可以根据环境自动替换:&lt;/p>
&lt;ul>
&lt;li>开发环境的接口&lt;/li>
&lt;li>生产环境&lt;/li>
&lt;/ul>
&lt;h3 id="1docker-runsh">1.docker-run.sh&lt;/h3>
&lt;p>描述: 部署脚本在git clone之后运行的脚本&lt;/p>
&lt;p>内容: 包括docker的构建和运行&lt;/p>
&lt;p>示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker-compose down
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rmi digitalmapadmin-frontend
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker build -t digitalmapadmin-frontend .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose pull
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2docker-composeyaml">2.docker-compose.yaml&lt;/h3>
&lt;p>描述: docker-run.sh 会用到docker-compose指令&lt;/p>
&lt;p>内容:&lt;/p>
&lt;ul>
&lt;li>Dockerfile 路径&lt;/li>
&lt;li>端口&lt;/li>
&lt;li>环境变量
&lt;ul>
&lt;li>&lt;strong>生产环境下的后端接口&lt;/strong> # 这样可以在部署时 自动替换成生产环境的后端接口.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">version: &lt;span class="s1">&amp;#39;3.0&amp;#39;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>services:&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> frontend:&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> build:&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> context: .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> dockerfile: ./Dockerfile&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> ports:&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> - 8004:80&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> environment:&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> - &lt;span class="nv">NODE_ENV&lt;/span>&lt;span class="o">=&lt;/span>production&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> - &lt;span class="nv">VITE_APP_TITLE&lt;/span>&lt;span class="o">=&lt;/span>数据资源管理平台&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> - &lt;span class="nv">VITE_APP_BASE_API&lt;/span>&lt;span class="o">=&lt;/span>/api&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> - &lt;span class="nv">VITE_SERVE&lt;/span>&lt;span class="o">=&lt;/span>http://121.40.252.139:8089/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3dockerfile">3.Dockerfile&lt;/h3>
&lt;p>描述: 根据项目构建docker 镜像&lt;/p>
&lt;p>内容:&lt;/p>
&lt;ul>
&lt;li>获取dist:
&lt;ul>
&lt;li>安装 npm: 并进行npm install&lt;/li>
&lt;li>npm run build&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用nginx运行项目
&lt;ul>
&lt;li>配置nginx&lt;/li>
&lt;li>启动项目&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">FROM node:lts-alpine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WORKDIR /app
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 先将package.json和package-lock.json拷贝到工作目录中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY package*.json ./
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 将当前目录下的所有文件拷贝到工作目录中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY . .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN npm run build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM nginx:alpine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 将打包后的dist目录下全部文件拷贝到nginx的html/目录下
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># COPY ./dist/ /usr/share/nginx/html/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY --from=0 /app/dist /usr/share/nginx/html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 删除nginx中之前的配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN rm /etc/nginx/conf.d/default.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 拷贝当前的文件到nginx中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY nginx.conf /etc/nginx/nginx.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY default.conf.template /etc/nginx/conf.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 启动nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CMD /bin/sh -c &amp;#34;envsubst &amp;#39;80&amp;#39; &amp;lt; /etc/nginx/conf.d/default.conf.template &amp;gt; /etc/nginx/conf.d/default.conf&amp;#34; &amp;amp;&amp;amp; nginx -g &amp;#39;daemon off;&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://ysyyhhh.github.io/docs/guide/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/guide/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid><description>&lt;h1 id="用hugo--github-pagesaction--py--任务计划程序-搭建-全自动化markdown笔记转博客">用Hugo + Github Pages/Action + py + 任务计划程序 搭建 全自动化markdown笔记转博客&lt;/h1>
&lt;h4 id="tldr">TL;DR&lt;/h4>
&lt;blockquote>
&lt;ol>
&lt;li>背景: 已使用nextcloud和typora写笔记&lt;/li>
&lt;li>需求: 将笔记转换为博客.(且因为本人太懒,😂 所以需要全自动化)
&lt;ol>
&lt;li>在nextcloud中, 专门设置一个文件夹&amp;quot;笔记&amp;quot; 转换为博客文件夹&lt;/li>
&lt;li>不能改变原来记笔记的方式&lt;/li>
&lt;li>不能有任何新增的操作&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>方案:
&lt;ol>
&lt;li>使用hugo搭建博客&lt;/li>
&lt;li>使用Github pages部署博客&lt;/li>
&lt;li>使用Github Actions自动化部署&lt;/li>
&lt;li>使用py脚本将笔记转换为博客&lt;/li>
&lt;li>使用任务计划程序定时执行py脚本&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h2 id="使用hugo搭建博客">使用hugo搭建博客&lt;/h2>
&lt;p>参考:
&lt;a href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener">hugo官网&lt;/a>
&lt;a href="https://zhuanlan.zhihu.com/p/568470172" target="_blank" rel="noopener">Hugo+Github Pages+Github Action博客方案之二&lt;/a>
&lt;a href="https://zhuanlan.zhihu.com/p/568764664" target="_blank" rel="noopener">Hugo+Github Pages+Github Action博客方案之三&lt;/a>
&lt;a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Installation" target="_blank" rel="noopener">PaperMod主题&lt;/a>&lt;/p>
&lt;h4 id="创建github仓库">创建github仓库&lt;/h4>
&lt;p>要创建两个仓库&lt;/p>
&lt;ol>
&lt;li>一个仓库用于存放博客源码&lt;/li>
&lt;li>一个仓库用于存放博客静态文件&lt;/li>
&lt;/ol>
&lt;h6 id="创建博客静态文件仓库">创建博客静态文件仓库&lt;/h6>
&lt;p>设置仓库名为: &lt;code>用户名.github.io&lt;/code>
&lt;a href="https://github.com/ysyyhhh/ysyyhhh.github.io" target="_blank" rel="noopener">我的博客仓库&lt;/a>&lt;/p>
&lt;h6 id="创建博客源码仓库">创建博客源码仓库&lt;/h6>
&lt;p>设置仓库名为: &lt;code>hugo-blog&lt;/code> // 仓库名可以自定义
&lt;a href="https://github.com/ysyyhhh/hugo-blog" target="_blank" rel="noopener">我的博客源码仓库&lt;/a>&lt;/p>
&lt;h4 id="安装hugo">安装hugo&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">scoop install hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="创建hugo博客">创建hugo博客&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hugo new site hugo-blog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="安装主题">安装主题&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> hugo-blog &lt;span class="c1">## 进入博客目录, 这个是博客源码仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule add --depth&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule update --init --recursive &lt;span class="c1">## needed when you reclone your repo (submodules may not get cloned automatically)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="配置主题">配置主题&lt;/h4>
&lt;p>这里使用yaml格式的配置文件, 也可以使用toml格式的配置文件
所以需要删除config.toml文件, 并创建config.yaml文件&lt;/p>
&lt;p>config.yaml:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">baseURL&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ysyy&amp;#39;s blog&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">theme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PaperMod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">languageCode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zh-cn&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Installation#sample-configyml" target="_blank" rel="noopener">剩余配置参考&lt;/a>&lt;/p>
&lt;h4 id="创建文章">创建文章&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hugo new posts/first/hello-world.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="本地预览">本地预览&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="生成静态文件">生成静态文件&lt;/h4>
&lt;p>生成静态文件, 生成的静态文件在 &lt;code>public&lt;/code>文件夹中。
之后我们将这个文件夹中复制到博客静态文件仓库中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="部署到github-pages">部署到github pages&lt;/h4>
&lt;p>创建静态文件夹&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone git@用户名.github.io.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> 用户名.github.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp -r hugo-blog/public/* ./
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>提交到github&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s2">&amp;#34;first commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="配置github-pages">配置github pages&lt;/h4>
&lt;p>在github中的 &lt;code>用户名.github.io&lt;/code>仓库中,
点击 &lt;code>Settings&lt;/code>选项卡, 找到 &lt;code>GitHub Pages&lt;/code>选项,
将 &lt;code>Source&lt;/code>选项设置为 &lt;code>main&lt;/code>分支, 点击 &lt;code>Save&lt;/code>按钮,
这样就可以通过 &lt;code>https://用户名.github.io&lt;/code>访问博客了&lt;/p>
&lt;h2 id="使用github-actions自动化部署">使用Github Actions自动化部署&lt;/h2>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/568764664" target="_blank" rel="noopener">参考&lt;/a>&lt;/p>
&lt;p>如果每一次更新/发布新博客都需要手动执行上面的步骤, 那么就太麻烦了, 所以我们需要自动化部署&lt;/p>
&lt;p>在博客源码仓库的根目录下创建
&lt;code>.github/workflows/deploy.yml&lt;/code>文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ysyyblog&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">main&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">build-deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-20.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># runs-on: macos-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch Hugo themes (true OR recursive)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fetch-depth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch all history for .GitInfo and .Lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;latest&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># extended: true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hugo --minify&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-gh-pages@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">personal_token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.PERSONAL_TOKEN }}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 另外还支持 deploy_token 和 github_token&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">external_repository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ysyyhhh/ysyyhhh.github.io&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 修改为你的 静态文件GitHub Pages 仓库&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_dir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./public&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># keep_files: false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_branch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">main&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 如果使用自定义域名，还需要添加下面一行配置&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># cname: www&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建personal_token">创建personal_token&lt;/h3>
&lt;p>在github主页的右上角点击头像, 点击 &lt;code>Settings&lt;/code>选项卡, 找到 &lt;code>Developer settings&lt;/code>选项,&lt;/p>
&lt;p>找到 &lt;code>Personal access tokens&lt;/code>选项, 点击 &lt;code>Generate new token&lt;/code>按钮, 创建一个新的token&lt;/p>
&lt;h3 id="配置personal_token">配置personal_token&lt;/h3>
&lt;p>在hugo-blog仓库中, 点击 &lt;code>Settings&lt;/code>选项卡, 找到 &lt;code>Secrets&lt;/code>选项, 点击 &lt;code>New repository secret&lt;/code>按钮,&lt;/p>
&lt;p>新增一个名为 &lt;code>PERSONAL_TOKEN&lt;/code>的secret, 值为上面创建的personal_token&lt;/p>
&lt;h3 id="测试自动化部署">测试自动化部署&lt;/h3>
&lt;p>在本地的hugo-blog仓库中, 修改 &lt;code>content/posts/first/hello-world.md&lt;/code>文件, 然后提交到github&lt;/p>
&lt;p>可以在 &lt;code>Actions&lt;/code>选项卡中查看自动化部署的状态&lt;/p>
&lt;p>如果在 &lt;code>Actions&lt;/code>选项卡中看到了 &lt;code>build-deploy&lt;/code>任务, 且状态为 &lt;code>success&lt;/code>, 那么就说明自动化部署成功了&lt;/p>
&lt;p>可以在 &lt;code>用户名.github.io&lt;/code>仓库中查看是否已经更新.&lt;/p>
&lt;h2 id="使用任务计划程序和py脚本实现全自动化">使用任务计划程序和py脚本实现全自动化&lt;/h2>
&lt;p>上面的步骤已经让我们发布笔记的过程变成:&lt;/p>
&lt;ol>
&lt;li>使用hugo new / 直接编辑 content的文件 来创建笔记&lt;/li>
&lt;li>提交到hugo-blog仓库&lt;/li>
&lt;/ol>
&lt;p>然后hugo-blog仓库就会自动部署到用户名.github.io仓库中&lt;/p>
&lt;p>虽然已经只剩两步了,但遵循能自动化就自动化的原则, 我们还是要把这两步也自动化&lt;/p>
&lt;h3 id="使用py脚本将笔记转换为博客">使用py脚本将笔记转换为博客&lt;/h3>
&lt;p>安装python这些步骤就省去了,这里直接给出py脚本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">每天定时更新博客内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">1.进入项目根目录: D:/program_about/hugo/hugo-blog
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">2. 将D:/nextcloud/笔记/下的文件同步到 ./content/posts/下
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">3. 执行./push.bat 或 git add . &amp;amp;&amp;amp; git commit -m &amp;#34;update&amp;#34; &amp;amp;&amp;amp; git push
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">shutil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">create_index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> name = A.md
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> 在root下生成&amp;#39;A&amp;#39;文件夹
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> 将A.md移动到A文件夹下，并重命名为index.md
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> 如果 存在 root + &amp;#39;/img&amp;#39; 的文件夹
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> 将 root + &amp;#39;/img&amp;#39; 复制到 root + &amp;#39;/A/img&amp;#39; 下
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 生成文件夹&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dir_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dir_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mkdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dir_name&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 移动文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shutil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dir_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;index.md&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 处理img&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;img&amp;#39;&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shutil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copytree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;img&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dir_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;img&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">adjust&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">dir&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">dir&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> 将所有下面的格式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - A.md
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - img
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - A-1.png
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> 转换成
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - A
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - index.md
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - img
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - A-1.png
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> 如果遇到&amp;#34;.md&amp;#34;文件,直接删除
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dirs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">files&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">walk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">files&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;.md&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">endswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.md&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">create_index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">dirs&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 递归调用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adjust&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">sync&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;D:/program_about/hugo/hugo-blog&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root_path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 当文件已存在时，无法创建该文件。: &amp;#39;./content/posts/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shutil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rmtree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./content/posts/&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># git中也要删除&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;git rm -r ./content/posts/&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shutil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copytree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;D:/nextcloud/笔记/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;./content/posts/&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 把所有文件夹和文件的名称大写转换为小写&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./content/posts/&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dirs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">files&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">walk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">files&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rename&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new_name&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">dirs&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rename&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new_name&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 调整文件夹结构&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adjust&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root_path&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s1">&amp;#39;./content/posts/&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 上传到git&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># os.chdir(&amp;#39;./content/posts/&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;D:/program_about/hugo/hugo-blog&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;git add ./content/posts/&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;git commit -m &amp;#34;update&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;git push&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;D:/program_about/hugo/hugo-blog&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sync done&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sync&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将上面的路径修改为自己的路径, 然后保存为 &lt;code>sync.py&lt;/code>文件
可以执行py脚本,测试一下&lt;/p>
&lt;h4 id="关于图片路径问题">关于图片路径问题&lt;/h4>
&lt;p>&lt;a href="https://discourse.gohugo.io/t/image-path-with-relative-urls/21970/3" target="_blank" rel="noopener">参考方案&lt;/a>&lt;/p>
&lt;p>因为我平时的图片路径是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> A.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> A-1.png
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是hugo会将A.md文件转换为A文件夹, 所以此时是无法访问A-1.png的.&lt;/p>
&lt;p>这里是通过改变相对路径关系来解决的, 即代码中的adjust()&lt;/p>
&lt;p>当然如果你有图床就不需要这么麻烦了&lt;/p>
&lt;h3 id="使用任务计划程序定时执行py脚本">使用任务计划程序定时执行py脚本&lt;/h3>
&lt;p>参考
这里我使用的是win10自带的任务计划程序, 其他系统的任务计划程序也是类似的&lt;/p>
&lt;p>以下步骤由Claude生成&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">下面是如何使用Windows任务计划程序来配置定时每天执行Python脚本的步骤:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">打开任务计划程序(Windows + R 输入taskschd.msc回车)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">点击&amp;#34;操作&amp;#34;栏中的&amp;#34;创建基本任务&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">输入任务名称,选择触发器为每天定时,设置执行时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">在操作栏中,点击“新建”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">选择“启动一个程序”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">在“程序/脚本”框中输入Python解释器的路径,例如C:\Python37\python.exe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">在“添加参数(可选)”中输入python脚本文件的完整路径,例如C:\Users\username\script.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">点击“确定”保存此操作
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">在下一页中选择用户账号,例如“当前用户”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">点击“确定”完成创建任务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">根据需要配置触发器记录和其他选项
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">点击“确定”保存任务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">任务将在设定的时间自动执行python脚本文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">每次修改脚本后需要停止原有任务,然后再新建一个相同的任务来加载修改后的脚本代码。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">需要注意python interpreter路径和脚本路径的正确性。定时执行格式也需要正确,这样就可以实现Windows系统中的自动定时任务执行Python脚本了。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/guide/%E9%83%A8%E7%BD%B2/docker%E7%9B%B8%E5%85%B3%E7%9A%84%E9%83%A8%E7%BD%B2%E8%A7%84%E8%8C%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/guide/%E9%83%A8%E7%BD%B2/docker%E7%9B%B8%E5%85%B3%E7%9A%84%E9%83%A8%E7%BD%B2%E8%A7%84%E8%8C%83/</guid><description>&lt;h1 id="docker-相关的部署规范">docker 相关的部署规范&lt;/h1>
&lt;h2 id="1命名规范">1.命名规范&lt;/h2>
&lt;h3 id="11镜像命名规范">1.1.镜像命名规范&lt;/h3>
&lt;p>镜像命名规范：&lt;code>&amp;lt;小组名&amp;gt;/&amp;lt;项目名&amp;gt;/&amp;lt;镜像名&amp;gt;:&amp;lt;版本号&amp;gt;&lt;/code>&lt;/p>
&lt;p>版本号：&lt;code>&amp;lt;主版本号&amp;gt;.&amp;lt;次版本号&amp;gt;.&amp;lt;修订号&amp;gt;&lt;/code> eg: &lt;code>1.0.0&lt;/code>&lt;/p>
&lt;h3 id="12容器命名规范">1.2.容器命名规范&lt;/h3>
&lt;p>容器命名规范：&lt;code>&amp;lt;小组名&amp;gt;-&amp;lt;项目名&amp;gt;-&amp;lt;容器名&amp;gt;-&amp;lt;版本号&amp;gt;&lt;/code>&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/guide/%E9%83%A8%E7%BD%B2/%E5%88%A9%E4%BA%8E%E9%83%A8%E7%BD%B2%E7%9A%84%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/guide/%E9%83%A8%E7%BD%B2/%E5%88%A9%E4%BA%8E%E9%83%A8%E7%BD%B2%E7%9A%84%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</guid><description>&lt;h1 id="利于部署的开发规范手册">利于部署的开发规范手册&lt;/h1>
&lt;p>本规范用于在开发过程中，使得项目能够更好的部署，更好的维护。&lt;/p>
&lt;p>使用时间: 当项目开始开发时，就应该遵守本规范。&lt;/p>
&lt;p>核心要点:&lt;/p>
&lt;ul>
&lt;li>管理依赖库&lt;/li>
&lt;li>使用docker&lt;/li>
&lt;li>端口、ip地址等使用环境变量&lt;/li>
&lt;li>路径不能写死！尤其是绝对路径和根目录等，需要放在环境变量中！！&lt;/li>
&lt;/ul>
&lt;h2 id="后端">后端&lt;/h2>
&lt;h3 id="python项目">python项目&lt;/h3>
&lt;p>python常见的依赖库管理有:&lt;/p>
&lt;ul>
&lt;li>poetry&lt;/li>
&lt;li>requirements.txt&lt;/li>
&lt;li>pipenv&lt;/li>
&lt;/ul>
&lt;h4 id="poetry">poetry&lt;/h4>
&lt;p>初始化&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">poetry init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">poetry install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用poetry运行项目&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">poetry run python main.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">poetry add &amp;lt;package&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>dockerfile示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> python:3.8.5-slim-buster&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝依赖文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> pyproject.toml poetry.lock ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 设置国内源&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip config &lt;span class="nb">set&lt;/span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 安装poetry&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip install poetry&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 安装依赖&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> poetry config virtualenvs.create &lt;span class="nb">false&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> poetry install --no-dev --no-interaction --no-ansi&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># tips: 先只拷贝依赖文件，再安装依赖，可以利用docker的缓存机制，加快构建速度. &lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># (防止只是项目文件改变，而依赖文件没有改变，导致重新安装依赖)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝项目文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 运行项目&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;poetry&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;run&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;main.py&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="requirementstxt">requirements.txt&lt;/h4>
&lt;p>导出依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip freeze &amp;gt; requirements.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install -r requirements.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>dockerfile示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> python:3.8.5-slim-buster&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝依赖文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> requirements.txt ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 设置国内源&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip config &lt;span class="nb">set&lt;/span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 安装依赖&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip install -r requirements.txt&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝项目文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 运行项目&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;main.py&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="pipenv">pipenv&lt;/h4>
&lt;p>初始化&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pipenv --python 3.8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pipenv install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用pipenv运行项目&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pipenv run python main.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pipenv install &amp;lt;package&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>dockerfile示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> python:3.8.5-slim-buster&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 设置国内源&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip config &lt;span class="nb">set&lt;/span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝依赖文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> Pipfile Pipfile.lock ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 安装依赖&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip install pipenv &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> pipenv install --system --deploy --ignore-pipfile&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝项目文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 运行项目&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;pipenv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;run&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;main.py&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="springboot项目">SpringBoot项目&lt;/h3>
&lt;p>&lt;a href="https://developer.aliyun.com/article/65274" target="_blank" rel="noopener">参考&lt;/a>
这里都以maven作为依赖管理工具。&lt;/p>
&lt;p>主要保留pom.xml文件&lt;/p>
&lt;p>dockerfile示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 第一阶段: 构建jar包&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> maven:3.6.3-jdk-8-slim AS build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> pom.xml ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 设置国内源&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> mvn -B -e -C -T 1C org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝项目文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 构建jar包&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> mvn clean install -DskipTests&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 第二阶段: 运行jar包&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> openjdk:8-jdk-alpine&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝第一阶段构建的jar包&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>build /app/target/demo-0.0.1-SNAPSHOT.jar ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 运行项目&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;java&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-jar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;target/demo-0.0.1-SNAPSHOT.jar&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="数据库">数据库&lt;/h3>
&lt;p>通常后端要连接数据库，这里只是简单的示例，实际项目中应该使用&lt;a href="#%e5%b0%81%e8%a3%85%e6%95%b4%e4%b8%aa%e9%a1%b9%e7%9b%ae">docker-compose&lt;/a>来管理多个容器。&lt;/p>
&lt;p>dockerfile示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> mysql:8.0.22&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 设置时区&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> &lt;span class="nv">TZ&lt;/span>&lt;span class="o">=&lt;/span>Asia/Shanghai&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 设置root密码&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> &lt;span class="nv">MYSQL_ROOT_PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 设置数据库名&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> &lt;span class="nv">MYSQL_DATABASE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 设置用户名&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> &lt;span class="nv">MYSQL_USER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 设置密码&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> &lt;span class="nv">MYSQL_PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 设置端口&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">EXPOSE&lt;/span>&lt;span class="s"> 3306&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>单独运行mysql&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker run -d -p 3306:3306 --name mysql -v /path/to/mysql/data:/var/lib/mysql mysql:8.0.22
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="前端">前端&lt;/h2>
&lt;p>前端使用npm作为依赖管理工具, 使用nginx作为web服务器。&lt;/p>
&lt;p>必要的文件:&lt;/p>
&lt;ul>
&lt;li>package.json # 依赖文件&lt;/li>
&lt;li>package-lock.json # 锁定依赖版本&lt;/li>
&lt;li>nginx.conf # nginx配置文件&lt;/li>
&lt;li>dockerfile&lt;/li>
&lt;/ul>
&lt;h3 id="npm">npm&lt;/h3>
&lt;p>npm初始化&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加依赖(默认添加到dependencies, 添加到devDependencies需要加上&amp;ndash;save-dev参数(或者-D)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install &amp;lt;package&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nginx">nginx&lt;/h3>
&lt;p>nginx.conf示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="line">&lt;span class="cl">&lt;span class="k">server&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">listen&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">server_name&lt;/span> &lt;span class="s">localhost&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">root&lt;/span> &lt;span class="s">/usr/share/nginx/html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">index&lt;/span> &lt;span class="s">index.html&lt;/span> &lt;span class="s">index.htm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">location&lt;/span> &lt;span class="s">/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">try_files&lt;/span> &lt;span class="nv">$uri&lt;/span> &lt;span class="nv">$uri/&lt;/span> &lt;span class="s">/index.html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="docker">docker&lt;/h3>
&lt;p>docker &lt;a href="https://cloud.tencent.com/developer/article/2246201" target="_blank" rel="noopener">使用多阶段构建&lt;/a>&lt;/p>
&lt;p>dockerfile示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 第一阶段: 构建项目&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> node:lts-alpine as build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝依赖文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> package.json package-lock.json ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 安装依赖&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> npm install&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝项目文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 构建项目&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> npm run build&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 第一段构建完成, 获得/app/build文件夹&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 使用nginx作为web服务器&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> nginx:1.19.4-alpine&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝nginx配置文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> nginx.conf /etc/nginx/conf.d/default.conf&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 拷贝第一阶段构建的项目文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>build /app/build /usr/share/nginx/html&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 运行nginx&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-g&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;daemon off;&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="项目部署-todo">项目部署 TODO&lt;/h2>
&lt;h3 id="封装整个项目单个项目时">封装整个项目(单个项目时)&lt;/h3>
&lt;p>经过上面的步骤已经将前后端 数据库封装到docker中了,但每次启动项目都需要手动启动三个容器, 这里使用docker-compose来管理多个容器。&lt;/p>
&lt;p>docker-compose.yml示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.8&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">mysql&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mysql:8.0.22&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">TZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Asia/Shanghai&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MYSQL_ROOT_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">123456&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MYSQL_DATABASE&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MYSQL_USER&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MYSQL_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">123456&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">3306&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">3306&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">./mysql/data:/var/lib/mysql&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">8080&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">mysql&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">frontend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./frontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">80&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="整个项目作为k8s的一个服务多个项目时">整个项目作为k8s的一个服务(多个项目时)&lt;/h3>
&lt;p>上面是使用docker-compose来管理 一个项目的多个容器.&lt;/p>
&lt;p>但如果有多个项目, 每个项目都有多个容器, 这时候就需要使用k8s来管理了.&lt;/p>
&lt;p>我们把一个项目(多个容器)作为一个k8s的一个服务.&lt;/p>
&lt;p>k8s的配置文件示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NodePort&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mysql&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mysql:8.0.22&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TZ&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Asia/Shanghai&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MYSQL_ROOT_PASSWORD&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">123456&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MYSQL_DATABASE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MYSQL_USER&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MYSQL_PASSWORD&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">123456&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3306&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mysql-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/mysql&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MYSQL_HOST&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mysql&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MYSQL_PORT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3306&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MYSQL_DATABASE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MYSQL_USER&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MYSQL_PASSWORD&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">123456&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">frontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">frontend:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mysql-data&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/path/to/mysql/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/guide/%E9%83%A8%E7%BD%B2/%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/guide/%E9%83%A8%E7%BD%B2/%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</guid><description>&lt;h1 id="部署手册">部署手册&lt;/h1>
&lt;h2 id="docker-镜像上传到私有仓库">docker 镜像上传到私有仓库&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker login -u username -p password registry.cn-hangzhou.aliyuncs.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker tag image registry.cn-hangzhou.aliyuncs.com/username/image:tag
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker push registry.cn-hangzhou.aliyuncs.com/username/image:tag
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="server">Server&lt;/h2>
&lt;h3 id="springboot">SpringBoot&lt;/h3>
&lt;p>application.yml 必须使用环境变量来进行配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">datasource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:test}?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${MYSQL_USER:test}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${MYSQL_PASSWORD:123456}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/llm/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/llm/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86/</guid><description>&lt;h1 id="大语言模型原理">大语言模型原理&lt;/h1>
&lt;h2 id="语言模型的基础技术">语言模型的基础技术&lt;/h2>
&lt;h3 id="transformer">transformer&lt;/h3>
&lt;h2 id="大语言模型">大语言模型&lt;/h2>
&lt;h3 id="gpt">GPT&lt;/h3>
&lt;h3 id="bert">BERT&lt;/h3>
&lt;p>&lt;a href="https://www.zhihu.com/tardis/zm/art/607605399?source_id=1003" target="_blank" rel="noopener">BERT vs GPT&lt;/a>&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E4%B8%AD%E9%97%B4%E4%BB%B6/rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E4%B8%AD%E9%97%B4%E4%BB%B6/rpc/</guid><description/></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</guid><description/></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid><description/></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E7%BC%93%E5%AD%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E7%BC%93%E5%AD%98/</guid><description/></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E5%88%86%E5%B8%83%E5%BC%8F/mapreduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E5%88%86%E5%B8%83%E5%BC%8F/mapreduce/</guid><description>&lt;h1 id="mapreduce">MapReduce&lt;/h1>
&lt;p>MapReduce是一种编程模型，用于处理大规模数据集的并行计算。它由两个主要阶段组成：Map阶段和Reduce阶段。在Map阶段，输入数据集被划分为多个独立的数据块，然后由Map函数处理。在Reduce阶段，Map阶段的输出被分组，然后由Reduce函数处理。&lt;/p>
&lt;p>相关论文：&lt;a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener">MapReduce: Simplified Data Processing on Large Clusters&lt;/a>&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/</guid><description>&lt;h2 id="经典问题">经典问题&lt;/h2>
&lt;p>拜占庭将军问题
描述： 一组将军围攻一座城市，他们需要达成一致的决策，但是其中一些将军可能是叛徒，他们会向其他将军发送错误的信息。这个问题的目标是找到一种算法，使得所有忠诚的将军能够达成一致的决策，即使有叛徒存在。
经典设置：&lt;/p>
&lt;ol>
&lt;li>每个将军都是一个节点，他们之间通过消息进行通信。&lt;/li>
&lt;li>每个将军都有一个二值的决策，即攻击或者撤退。&lt;/li>
&lt;li>每个将军都知道自己是不是叛徒，但是不知道其他将军是不是叛徒。&lt;/li>
&lt;li>叛徒将军可以发送错误的消息。&lt;/li>
&lt;li>总共有m个将军，其中n个是忠诚的，m-n个是叛徒。&lt;/li>
&lt;li>问题的目标是找到一种算法，使得所有忠诚的将军能够达成一致的决策，即使有叛徒存在。&lt;/li>
&lt;/ol></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/</guid><description>&lt;h1 id="linux">Linux&lt;/h1>
&lt;h4 id="epoll底层实现">epoll底层实现&lt;/h4>
&lt;p>epoll是Linux内核提供的一种高效的I/O多路复用机制，其底层实现主要包括以下几个部分：&lt;/p>
&lt;ol>
&lt;li>内核事件表：epoll使用一个内核事件表来存储所有的I/O事件，包括读、写和异常事件等。&lt;/li>
&lt;li>文件描述符表：epoll使用一个文件描述符表来存储所有需要监控的文件描述符，每个文件描述符都对应一个epoll_event结构体，用于存储该文件描述符上的事件信息。&lt;/li>
&lt;li>回调函数：当有I/O事件发生时，内核会调用注册的回调函数来处理该事件，回调函数可以是用户自定义的函数，也可以是系统提供的函数。&lt;/li>
&lt;/ol>
&lt;h4 id="五种io模型">五种IO模型&lt;/h4>
&lt;ol>
&lt;li>阻塞式I/O模型：当应用程序调用I/O操作时，如果数据没有准备好，应用程序会一直等待，直到数据准备好为止。&lt;/li>
&lt;li>非阻塞式I/O模型：当应用程序调用I/O操作时，如果数据没有准备好，应用程序会立即返回，不会等待数据准备好。&lt;/li>
&lt;li>I/O复用模型：应用程序使用select、poll或epoll等系统调用来监控多个文件描述符，当有数据准备好时，应用程序会被通知。&lt;/li>
&lt;li>信号驱动式I/O模型：应用程序使用sigaction系统调用来注册一个信号处理函数，当数据准备好时，内核会向应用程序发送一个信号，应用程序在信号处理函数中处理数据。&lt;/li>
&lt;li>异步I/O模型：应用程序调用aio_read或aio_write等异步I/O函数来发起I/O操作，内核会在I/O操作完成后通知应用程序。&lt;/li>
&lt;/ol>
&lt;h4 id="解释同步阻塞">解释同步，阻塞&lt;/h4>
&lt;p>同步是指应用程序在执行某个操作时，必须等待该操作完成后才能继续执行下一步操作。&lt;/p>
&lt;p>阻塞是指应用程序在执行某个操作时，如果该操作不能立即完成，应用程序会被挂起，直到该操作完成为止。&lt;/p>
&lt;p>在阻塞式I/O模型中，应用程序调用I/O操作时，如果数据没有准备好，应用程序会一直等待，直到数据准备好为止，这就是阻塞。而在非阻塞式I/O模型中，应用程序调用I/O操作时，如果数据没有准备好，应用程序会立即返回，这就是非阻塞。&lt;/p>
&lt;h4 id="nio和bio区别">NIO和BIO区别&lt;/h4>
&lt;p>BIO（Blocking I/O）是阻塞式I/O模型，应用程序调用I/O操作时，如果数据没有准备好，应用程序会一直等待，直到数据准备好为止。NIO（Non-blocking I/O）是非阻塞式I/O模型，应用程序调用I/O操作时，如果数据没有准备好，应用程序会立即返回，不会等待数据准备好。&lt;/p>
&lt;h4 id="nio的底层">NIO的底层&lt;/h4>
&lt;p>NIO的底层实现主要包括以下几个部分：&lt;/p>
&lt;ol>
&lt;li>缓冲区：NIO使用缓冲区来存储数据，包括读缓冲区和写缓冲区。&lt;/li>
&lt;li>通道：NIO使用通道来进行数据的读写操作，通道类似于流，但是可以双向传输数据。&lt;/li>
&lt;li>选择器：NIO使用选择器来监控多个通道的状态，当有数据准备好时，选择器会通知应用程序。&lt;/li>
&lt;/ol></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/</guid><description>&lt;h1 id="redis">Redis&lt;/h1>
&lt;h2 id="redis基础知识">Redis基础知识：&lt;/h2>
&lt;h3 id="redis是什么有什么用">Redis是什么？有什么用？&lt;/h3>
&lt;p>Redis是一个开源的内存数据结构存储系统。&lt;/p>
&lt;ol>
&lt;li>Redis最常用来做缓存，是实现分布式缓存的首先中间件；&lt;/li>
&lt;li>Redis可以作为数据库，实现诸如点赞、关注、排行等对性能要求极高的互联网需求；&lt;/li>
&lt;li>Redis可以作为计算工具，能用很小的代价，统计诸如PV/UV、用户在线天数等数据；&lt;/li>
&lt;li>Redis还有很多其他的使用场景，例如：可以实现分布式锁，可以作为消息队列使用。&lt;/li>
&lt;/ol>
&lt;h3 id="使用redis的好处是什么">使用Redis的好处是什么？&lt;/h3>
&lt;p>使用Redis的好处包括高性能、高可用性、支持多种数据结构、支持事务和Lua脚本等。&lt;/p>
&lt;h3 id="redis与其他key-value存储的不同之处在哪里">Redis与其他key-value存储的不同之处在哪里？&lt;/h3>
&lt;p>Redis与其他key-value存储的不同之处在于，Redis支持多种数据结构，包括字符串、哈希、列表、集合和有序集合等，而其他key-value存储通常只支持字符串类型。&lt;/p>
&lt;h3 id="比较redis与memcache">比较Redis与Memcache&lt;/h3>
&lt;ul>
&lt;li>Redis支持多种数据结构，包括字符串、哈希、列表、集合和有序集合，支持事务和Lua脚本、支持持久化和复制等。&lt;/li>
&lt;li>Memcache只支持字符串类型。&lt;/li>
&lt;/ul>
&lt;h3 id="redis是单进程单线程的吗">Redis是单进程单线程的吗&lt;/h3>
&lt;p>是的，Redis是单进程单线程的，主要是指Redis的网络IO和键值对读写是由一个线程来完成的。&lt;/p>
&lt;p>而Redis的其他功能，如持久化、异步删除、集群数据同步等，则是依赖其他线程来执行的。所以，说Redis是单线程的只是一种习惯的说法，事实上它的底层不是单线程的。&lt;/p>
&lt;ol>
&lt;li>对服务端程序来说，线程切换和锁通常是性能杀手，而单线程避免了线程切换和竞争所产生的消耗；&lt;/li>
&lt;li>Redis的大部分操作是在内存上完成的，这是它实现高性能的一个重要原因；&lt;/li>
&lt;li>Redis采用了IO多路复用机制，使其在网络IO操作中能并发处理大量的客户端请求，实现高吞吐率。&lt;/li>
&lt;/ol>
&lt;h2 id="redis-命令">Redis 命令&lt;/h2>
&lt;h3 id="redis中的watch命令">Redis中的watch命令&lt;/h3>
&lt;p>很多时候，要确保事务中的数据没有被其他客户端修改才执行该事务。&lt;/p>
&lt;p>Redis提供了watch命令来解决这类问题，这是一种乐观锁的机制。&lt;/p>
&lt;p>客户端通过watch命令，要求服务器对一个或多个key进行监视，如果在客户端执行事务之前，这些key发生了变化，则服务器将拒绝执行客户端提交的事务，并向它返回一个空值。&lt;/p>
&lt;h2 id="redis数据类型">Redis数据类型&lt;/h2>
&lt;h3 id="redis的数据类型有哪些">Redis的数据类型有哪些？&lt;/h3>
&lt;ol>
&lt;li>Redis支持5种核心的数据类型，分别是字符串、哈希、列表、集合(set)、有序集合(zset)；&lt;/li>
&lt;li>Redis还提供了Bitmap、HyperLogLog、Geo类型，但这些类型都是基于上述核心数据类型实现的；&lt;/li>
&lt;li>Redis在5.0新增加了Streams数据类型，它是一个功能强大的、支持多播的、可持久化的消息队列。&lt;/li>
&lt;/ol>
&lt;h3 id="set和zset有什么区别">set和zset有什么区别？&lt;/h3>
&lt;p>set：&lt;/p>
&lt;ul>
&lt;li>集合中的元素是无序、不可重复的，一个集合最多能存储232-1个元素；&lt;/li>
&lt;li>集合除了支持对元素的增删改查之外，还支持对多个集合取交集、并集、差集。&lt;/li>
&lt;/ul>
&lt;p>zset：&lt;/p>
&lt;ul>
&lt;li>有序集合保留了集合元素不能重复的特点；&lt;/li>
&lt;li>有序集合会给每个元素设置一个分数，并以此作为排序的依据；&lt;/li>
&lt;li>有序集合不能包含相同的元素，但是不同元素的分数可以相同。&lt;/li>
&lt;/ul>
&lt;h3 id="一个字符串类型的值能存储的最大容量是多少">一个字符串类型的值能存储的最大容量是多少？&lt;/h3>
&lt;p>一个字符串类型的值能存储的最大容量是512MB。&lt;/p>
&lt;h3 id="redis中list结构的相关操作">Redis中List结构的相关操作&lt;/h3>
&lt;p>列表是线性有序的数据结构，它内部的元素是可以重复的，并且一个列表最多能存储2^32-1个元素。列表包含如下的常用命令：&lt;/p>
&lt;ul>
&lt;li>lpush/rpush：从列表的左侧/右侧添加数据；&lt;/li>
&lt;li>lrange：指定索引范围，并返回这个范围内的数据；&lt;/li>
&lt;li>lindex：返回指定索引处的数据；&lt;/li>
&lt;li>lpop/rpop：从列表的左侧/右侧弹出一个数据；&lt;/li>
&lt;li>blpop/brpop：从列表的左侧/右侧弹出一个数据，若列表为空则进入阻塞状态。&lt;/li>
&lt;/ul>
&lt;h2 id="redis持久化">Redis持久化&lt;/h2>
&lt;h3 id="redis的持久化机制有哪些">Redis的持久化机制有哪些？&lt;/h3>
&lt;p>RDB和AOF是Redis的两种持久化机制，它们都可以将Redis的数据保存到磁盘上，以便在Redis重启时恢复数据。但是它们的实现方式和适用场景有所不同。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>RDB是一种快照机制，它可以将Redis的内存数据保存到磁盘上。&lt;/p>
&lt;ul>
&lt;li>RDB的实现方式是在指定的时间间隔内，将Redis的内存数据快照保存到磁盘上。快照文件的格式是二进制的，可以通过配置文件指定保存的文件名和路径。&lt;/li>
&lt;li>RDB的优点是快速、简单、可靠，适合用于备份和恢复数据。缺点是可能会丢失最近一次快照之后的数据，因为快照是定期保存的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>AOF是一种追加日志机制，它可以将Redis的写操作记录到磁盘上。&lt;/p>
&lt;ul>
&lt;li>AOF的实现方式是将Redis的写操作以追加的方式记录到一个日志文件中，日志文件的格式是文本的。&lt;/li>
&lt;li>AOF有三种同步方式：always、everysec和no。always表示每次写操作都会同步到磁盘上，保证数据的完整性和一致性，但是会影响性能；everysec表示每秒钟同步一次，可以平衡性能和数据安全；no表示不同步，性能最好，但是数据安全性最差。&lt;/li>
&lt;li>AOF的优点是可以保证数据的完整性和一致性，适合用于数据持久化和灾备。缺点是日志文件可能会很大，需要定期进行压缩和重写。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>在实际应用中，可以根据实际情况选择RDB和AOF中的一种或两种持久化机制。如果数据的安全性和一致性比较重要，可以选择AOF；如果数据的恢复速度比较重要，可以选择RDB；如果两者都比较重要，可以同时使用两种持久化机制。&lt;/p>
&lt;h3 id="缓存雪崩缓存穿透缓存预热缓存更新和缓存降级是什么">缓存雪崩、缓存穿透、缓存预热、缓存更新和缓存降级是什么？&lt;/h3>
&lt;h4 id="缓存穿透">缓存穿透&lt;/h4>
&lt;p>客户端查询根本不存在的数据，使得请求直达存储层，导致其负载过大，甚至宕机。出现这种情况的原因，可能是业务层误将缓存和库中的数据删除了，也可能是有人恶意攻击，专门访问库中不存在的数据。&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;ol>
&lt;li>缓存空对象：存储层未命中后，仍然将空值存入缓存层，客户端再次访问数据时，缓存层会直接返回空值。&lt;/li>
&lt;li>布隆过滤器：将数据存入布隆过滤器，访问缓存之前以过滤器拦截，若请求的数据不存在则直接返回空值。&lt;/li>
&lt;/ol>
&lt;h4 id="缓存击穿">缓存击穿&lt;/h4>
&lt;p>一份热点数据，它的访问量非常大。在其缓存失效的瞬间，大量请求直达存储层，导致服务崩溃。&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;ol>
&lt;li>永不过期：热点数据不设置过期时间，所以不会出现上述问题，这是“物理”上的永不过期。或者为每个数据设置逻辑过期时间，当发现该数据逻辑过期时，使用单独的线程重建缓存。&lt;/li>
&lt;li>加互斥锁：对数据的访问加互斥锁，当一个线程访问该数据时，其他线程只能等待。这个线程访问过后，缓存中的数据将被重建，届时其他线程就可以直接从缓存中取值。&lt;/li>
&lt;/ol>
&lt;h4 id="缓存雪崩">缓存雪崩&lt;/h4>
&lt;p>在某一时刻，缓存层无法继续提供服务，导致所有的请求直达存储层，造成数据库宕机。可能是缓存中有大量数据同时过期，也可能是Redis节点发生故障，导致大量请求无法得到处理。&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;ol>
&lt;li>避免数据同时过期：设置过期时间时，附加一个随机数，避免大量的key同时过期。&lt;/li>
&lt;li>启用降级和熔断措施：在发生雪崩时，若应用访问的不是核心数据，则直接返回预定义信息/空值/错误信息。或者在发生雪崩时，对于访问缓存接口的请求，客户端并不会把请求发给Redis，而是直接返回。&lt;/li>
&lt;li>构建高可用的Redis服务：采用哨兵或集群模式，部署多个Redis实例，个别节点宕机，依然可以保持服务的整体可用。&lt;/li>
&lt;/ol>
&lt;h3 id="redis过期键的删除策略有哪些">Redis过期键的删除策略有哪些？&lt;/h3>
&lt;p>Redis过期键的删除策略包括定期删除和惰性删除。&lt;/p>
&lt;p>惰性删除：客户端访问一个key的时候，Redis会先检查它的过期时间，如果发现过期就立刻删除这个key。&lt;/p>
&lt;p>定期删除：Redis会将设置了过期时间的key放到一个独立的字典中，并对该字典进行每秒10次的过期扫描，&lt;/p>
&lt;p>过期扫描不会遍历字典中所有的key，而是采用了一种简单的贪心策略。该策略的删除逻辑如下：&lt;/p>
&lt;ol>
&lt;li>从过期字典中随机选择20个key；&lt;/li>
&lt;li>删除这20个key中已过期的key；&lt;/li>
&lt;li>如果已过期key的比例超过25%，则重复步骤1。&lt;/li>
&lt;/ol>
&lt;h3 id="redis的回收策略有哪些">Redis的回收策略有哪些？&lt;/h3>
&lt;p>Redis的回收策略包括noeviction、allkeys-lru、volatile-lru、allkeys-random和volatile-random等。&lt;/p>
&lt;h3 id="redis的持久化机制的优缺点有哪些">Redis的持久化机制的优缺点有哪些？&lt;/h3>
&lt;p>Redis的持久化机制包括RDB和AOF两种方式，各自的优缺点包括数据恢复速度、数据安全性、数据一致性等方面。&lt;/p>
&lt;h3 id="保证缓存与数据库的双写一致性--">保证缓存与数据库的双写一致性&amp;ndash;&lt;/h3>
&lt;p>四种同步策略：&lt;/p>
&lt;p>想要保证缓存与数据库的双写一致，一共有4种方式，即4种同步策略：&lt;/p>
&lt;ol>
&lt;li>先更新缓存，再更新数据库；&lt;/li>
&lt;li>先更新数据库，再更新缓存；&lt;/li>
&lt;li>先删除缓存，再更新数据库；&lt;/li>
&lt;li>先更新数据库，再删除缓存。&lt;/li>
&lt;/ol>
&lt;p>从这4种同步策略中，我们需要作出比较的是：&lt;/p>
&lt;ol>
&lt;li>更新缓存与删除缓存哪种方式更合适？&lt;/li>
&lt;li>应该先操作数据库还是先操作缓存？&lt;/li>
&lt;/ol>
&lt;p>更新缓存还是删除缓存：&lt;/p>
&lt;p>下面，我们来分析一下，应该采用更新缓存还是删除缓存的方式。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>更新缓存&lt;/p>
&lt;p>优点：每次数据变化都及时更新缓存，所以查询时不容易出现未命中的情况。&lt;/p>
&lt;p>缺点：更新缓存的消耗比较大。如果数据需要经过复杂的计算再写入缓存，那么频繁的更新缓存，就会影响服务器的性能。如果是写入数据频繁的业务场景，那么可能频繁的更新缓存时，却没有业务读取该数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除缓存&lt;/p>
&lt;p>优点：操作简单，无论更新操作是否复杂，都是将缓存中的数据直接删除。&lt;/p>
&lt;p>缺点：删除缓存后，下一次查询缓存会出现未命中，这时需要重新读取一次数据库。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>从上面的比较来看，一般情况下，删除缓存是更优的方案。&lt;/p>
&lt;p>先操作数据库还是缓存：&lt;/p>
&lt;p>下面，我们再来分析一下，应该先操作数据库还是先操作缓存。&lt;/p>
&lt;p>首先，我们将先删除缓存与先更新数据库，在出现失败时进行一个对比：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="https://uploadfiles.nowcoder.com/images/20220224/4107856_1645695077865/A8EAB406CDF2717DDC4C9AB91E37092E" alt="img" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>如上图，是先删除缓存再更新数据库，在出现失败时可能出现的问题：&lt;/p>
&lt;ol>
&lt;li>进程A删除缓存成功；&lt;/li>
&lt;li>进程A更新数据库失败；&lt;/li>
&lt;li>进程B从缓存中读取数据；&lt;/li>
&lt;li>由于缓存被删，进程B无法从缓存中得到数据，进而从数据库读取数据；&lt;/li>
&lt;li>进程B从数据库成功获取数据，然后将数据更新到了缓存。&lt;/li>
&lt;/ol>
&lt;p>最终，缓存和数据库的数据是一致的，但仍然是旧的数据。而我们的期望是二者数据一致，并且是新的数据。&lt;/p>
&lt;h3 id="你要如何设计redis的过期时间">你要如何设计Redis的过期时间？&lt;/h3>
&lt;ol>
&lt;li>热点数据不设置过期时间，使其达到“物理”上的永不过期，可以避免缓存击穿问题；&lt;/li>
&lt;li>在设置过期时间时，可以附加一个随机数，避免大量的key同时过期，导致缓存雪崩。&lt;/li>
&lt;/ol>
&lt;h2 id="redis性能优化">Redis性能优化：&lt;/h2>
&lt;h3 id="redis常见性能问题有哪些">Redis常见性能问题有哪些？&lt;/h3>
&lt;p>Redis常见性能问题包括内存使用过高、网络延迟过高、持久化性能不佳等。&lt;/p>
&lt;h3 id="redis的操作是原子性的吗">Redis的操作是原子性的吗？&lt;/h3>
&lt;p>Redis的操作是原子性的，是因为它采用了单线程模型，每个操作都是原子性的，保证了数据的一致性。&lt;/p>
&lt;h3 id="redis事务包括哪些命令">Redis事务包括哪些命令？&lt;/h3>
&lt;p>Redis事务包括MULTI、EXEC、DISCARD和WATCH等命令。&lt;/p>
&lt;h3 id="redis常见性能问题的解决方案有哪些">Redis常见性能问题的解决方案有哪些？&lt;/h3>
&lt;p>Redis常见性能问题的解决方案包括优化数据结构、优化网络配置、优化持久化配置等。&lt;/p>
&lt;h3 id="redis的同步机制有哪些">Redis的同步机制有哪些？&lt;/h3>
&lt;p>Redis的同步机制包括主从复制和哨兵机制。&lt;/p>
&lt;p>20、Pipeline的好处是什么？&lt;/p>
&lt;p>Pipeline的好处包括减少网络延迟、提高吞吐量等，需要使用时可以将多个命令打包发送到Redis服务器上执行。&lt;/p>
&lt;p>Redis集群：&lt;/p>
&lt;p>21、Redis需要把所有数据放到内存中吗？&lt;/p>
&lt;p>是的，Redis需要把所有数据放到内存中，是因为它采用了基于内存的数据存储方式，可以快速读写数据。&lt;/p>
&lt;p>22、Redis集群的原理是什么？&lt;/p>
&lt;p>Redis集群的原理是将数据分散到多个节点上存储，通过主从复制和哨兵机制保证数据的可用性和一致性。&lt;/p>
&lt;p>23、Redis集群会导致整个集群不可用的情况有哪些？&lt;/p>
&lt;p>Redis集群会导致整个集群不可用的情况包括节点故障、网络分区等。&lt;/p>
&lt;p>24、Redis支持的Java客户端有哪些？&lt;/p>
&lt;p>Redis支持的Java客户端包括Jedis、Lettuce、Redisson等，官方推荐使用Lettuce。&lt;/p>
&lt;p>25、Jedis与Redisson对比的优缺点有哪些？&lt;/p>
&lt;p>Jedis与Redisson对比的优缺点包括性能、功能、易用性等方面。&lt;/p>
&lt;p>26、Redis的密码可以通过哪些方式设置和验证？&lt;/p>
&lt;p>Redis的密码可以通过配置文件设置，验证密码可以使用AUTH命令。&lt;/p>
&lt;p>27、Redis哈希槽的概念是什么？&lt;/p>
&lt;p>Redis哈希槽的概念是将所有的key分散到不同的槽中存储，每个槽对应一个节点，通过哈希算法计算key所在的槽。&lt;/p>
&lt;p>28、Redis集群的主从复制模型是什么？&lt;/p>
&lt;p>Redis集群的主从复制模型是将数据分散到多个节点上存储，每个节点都可以作为主节点或从节点，通过主从复制保证数据的可用性和一致性。&lt;/p>
&lt;p>29、Redis集群不会有写操作丢失吗？&lt;/p>
&lt;p>Redis集群不会有写操作丢失，因为它采用了主从复制和哨兵机制，可以保证数据的可用性和一致性。&lt;/p>
&lt;p>30、Redis集群之间如何进行数据复制和故障转移？&lt;/p>
&lt;p>Redis集群之间通过主从复制和哨兵机制进行数据复制和故障转移。&lt;/p>
&lt;p>31、Redis集群最大节点个数是多少？&lt;/p>
&lt;p>Redis集群最大节点个数是16384。&lt;/p>
&lt;p>32、Redis集群可以选择不同的数据库吗？&lt;/p>
&lt;p>Redis集群可以选择不同的数据库，通过SELECT命令进行切换。&lt;/p>
&lt;p>33、如何测试Redis的连通性？&lt;/p>
&lt;p>可以使用PING命令测试Redis的连通性。&lt;/p>
&lt;p>Redis其他问题：&lt;/p>
&lt;p>34、Redis事务是什么？&lt;/p>
&lt;p>Redis事务是一组命令的集合，可以保证这组命令的原子性。&lt;/p>
&lt;p>35、Redis key的过期时间可以通过哪些命令设置？&lt;/p>
&lt;p>Redis key的过期时间可以通过EXPIRE命令设置，永久有效可以通过PERSIST命令设置。&lt;/p>
&lt;p>36、如何进行内存优化？&lt;/p>
&lt;p>可以通过优化数据结构、设置合理的过期时间、使用持久化机制等方式进行内存优化。&lt;/p>
&lt;p>37、Redis回收进程是什么？&lt;/p>
&lt;p>Redis回收进程会定期扫描内存中的数据，将过期的数据删除。&lt;/p>
&lt;p>38、Redis的内存用完了会导致什么问题？&lt;/p>
&lt;p>Redis的内存用完了会导致写操作失败，读操作仍然可以正常进行。&lt;/p>
&lt;p>39、一个Redis实例最多能存放多少个keys？&lt;/p>
&lt;p>一个Redis实例最多能存放约43亿个keys，List、Set、Sorted Set它们最多能存放约21亿个元素。&lt;/p>
&lt;p>40、如何保证Redis中的数据都是热点数据？&lt;/p>
&lt;p>可以使用热点数据分析和缓存预热等方式保证Redis中的数据都是热点数据。&lt;/p>
&lt;p>41、Redis最适合的场景是什么？&lt;/p>
&lt;p>Redis最适合的场景包括高并发、高性能、高可用性的应用场景，如电商、社交、游戏等。&lt;/p>
&lt;p>42、如何扫描所有的key？&lt;/p>
&lt;p>可以使用SCAN命令扫描所有的key，然后通过字符串匹配找出以某个固定的已知的前缀开头的key。&lt;/p>
&lt;p>43、大量的key需要设置同一时间过期时需要注意什么？&lt;/p>
&lt;p>需要注意的是，大量的key需要设置同一时间过期时，需要合理设置过期时间，避免过期时间集中在同一时间点。&lt;/p>
&lt;p>44、如何使用Redis做异步队列？&lt;/p>
&lt;p>我使用过Redis做异步队列，可以通过LIST数据结构实现。&lt;/p>
&lt;p>45、Redis分布式锁是什么？&lt;/p>
&lt;p>Redis分布式锁是一种基于Redis实现的分布式锁，可以通过SETNX命令实现。&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="数据库">数据库&lt;/h1>
&lt;h3 id="列数据库是什么">&lt;strong>列数据库是什么&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>列数据库&lt;/strong>是将传统的表格形式拆分为单列存储，&lt;strong>存储方式&lt;/strong>是列数据库与传统数据库的最大差别。这个差别同时&lt;strong>带给了列数据库高效的查询性能&lt;/strong>。&lt;/p>
&lt;p>即每一列的数据的存储在一个连续空间的,且有序,因此只要找到了主键在第几个位置,就可以快速找到其他属性的元素.&lt;/p>
&lt;h3 id="redismemcachemongodb特点和区别">&lt;strong>Redis、memcache、mongoDb特点和区别&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>Redis&lt;/strong>&lt;/p>
&lt;p>内存型KV数据库，适合&lt;strong>读多写少&lt;/strong>的业务场景。很适合做缓存。&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>支持&lt;strong>多种数据类型&lt;/strong> string、list、set、zset、hash&lt;/li>
&lt;li>&lt;strong>读写性能优异&lt;/strong>。&lt;/li>
&lt;li>数据可以&lt;strong>持久化&lt;/strong>保持（AOF、快照），写入硬盘，&lt;/li>
&lt;li>支持&lt;strong>灾难恢复，主从复制&lt;/strong>。主机会自动将数据同步到从机，可以进行读写分离。&lt;/li>
&lt;/ul>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>redis较&lt;strong>难支持在线扩容&lt;/strong>，当集群数据达到上限在线扩容变得复杂。&lt;/li>
&lt;li>&lt;strong>主从宕机&lt;/strong> 会导致前端读写失败，主从数据复制过程中，数据未完全复制到从机，会出现数据不一致。&lt;/li>
&lt;/ul>
&lt;p>应用场景：&lt;/p>
&lt;ul>
&lt;li>在程序和关系型数据库&lt;strong>中间做高速缓存&lt;/strong>&lt;/li>
&lt;li>缓存&lt;strong>高频数据,降低IO次数&lt;/strong>&lt;/li>
&lt;li>分布式架构中做&lt;strong>session共享&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>例子：&lt;/p>
&lt;ul>
&lt;li>比如微信token每两小时刷新一次，就比较适合用redis存储，读也比较方便；&lt;/li>
&lt;li>在线游戏排行榜；计时达到一定时间后显示相关广告；按照用户投票和时间排序，更新新闻；&lt;/li>
&lt;li>统计在某段特点时间里有多少特定用户访问了某个特定资源，统计哪些特定用户访问了某篇的文章；&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Memcache&lt;/strong>&lt;/p>
&lt;p>高性能的&lt;strong>分布式内存对象缓存&lt;/strong>系统，基于一个&lt;strong>存储键/值对&lt;/strong>的hashmap&lt;/p>
&lt;p>优点, 基于其&lt;strong>分布式特性&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>均衡请求&lt;/strong>&lt;/li>
&lt;li>增加&lt;strong>缓存容量&lt;/strong>&lt;/li>
&lt;li>&lt;strong>部分容灾&lt;/strong>:多台MC服务器使用哈希一致性算法,当有一台挂掉时,能保留部分请求.&lt;/li>
&lt;/ul>
&lt;p>缺点&lt;/p>
&lt;ul>
&lt;li>只支持&lt;strong>简单的key/value数据&lt;/strong>结构，不像Redis可以支持丰富的数据类型。&lt;/li>
&lt;li>&lt;strong>无法进行持久化&lt;/strong>，数据不能备份，只能用于缓存使用，且重启后数据全部丢失。&lt;/li>
&lt;/ul>
&lt;p>应用场景：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分布式缓存&lt;/strong>&lt;/li>
&lt;li>数据库前段缓存&lt;/li>
&lt;li>服务器间数据共享&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>MongoDB&lt;/strong>&lt;/p>
&lt;p>是&lt;strong>文档型&lt;/strong>的非关系型数据库，使用&lt;strong>json结构&lt;/strong>。&lt;/p>
&lt;p>优点&lt;/p>
&lt;ul>
&lt;li>&lt;strong>查询功能&lt;/strong>强大：json文档结构的存储方式，能够更便捷的获取数据&lt;/li>
&lt;li>能存储&lt;strong>海量数据&lt;/strong>&lt;/li>
&lt;li>&lt;strong>海量数据下性能优越&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>缺点&lt;/p>
&lt;ul>
&lt;li>占用&lt;strong>内存过大&lt;/strong> 。&lt;/li>
&lt;li>&lt;strong>不支持事务&lt;/strong>。&lt;/li>
&lt;li>模式自由,自由灵活的文件存储&lt;strong>格式带来的数据错误&lt;/strong>&lt;/li>
&lt;li>MongoDB没有成熟的&lt;strong>维护工具&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>应用场景:&lt;/p>
&lt;ul>
&lt;li>存放&lt;strong>评论等半结构化数据&lt;/strong>&lt;/li>
&lt;li>适合&lt;strong>存储json&lt;/strong>类型数据&lt;/li>
&lt;li>&lt;strong>不经常变化&lt;/strong>,朋友圈,日志,直播礼物&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>应用场景&lt;/strong>&lt;/p>
&lt;p>redis: 数据量较&lt;strong>小的更性能操作和运算&lt;/strong>上。&lt;/p>
&lt;p>memcache: 用于在&lt;strong>动态系统中减少数据库负载&lt;/strong>，提升性能;做缓存，提高性能（适合读多写少，对于数据量比较大，可以采用sharding）。&lt;/p>
&lt;p>MongoDB:主要解决&lt;strong>海量数据的访问效率&lt;/strong>问题。&lt;/p>
&lt;h3 id="数据仓库">&lt;strong>数据仓库&lt;/strong>&lt;/h3>
&lt;p>主要功能是 将OLTP经年累月所累积的大量数据，通过&lt;strong>数据仓库特有的数据储存架构进行 OLAP&lt;/strong>，最终帮助决策者能快速有效地从大量数据中，分析出有价值的信息，提供决策支持. &lt;strong>仍然是结构化数据&lt;/strong>&lt;/p>
&lt;p>与数据库的区别: 数据库面向的是OLTP.，数据仓库面向OLAP&lt;/p>
&lt;p>数据仓库是一个用以更好地支持企业决策分析处理的、面向主题的、集成的、不可更新的、随时间不断变化的数据集合&lt;/p>
&lt;ul>
&lt;li>&lt;strong>面向主题&lt;/strong>：主题是个抽象的概念，是&lt;strong>在较高层次上将企业信息系统中的数据综合、归类并进行分析利用&lt;/strong>的抽象，比如对于商场而言，主题就包括供应商、商品、顾客等&lt;/li>
&lt;li>&lt;strong>集成&lt;/strong>的：数据仓库的数据是&lt;strong>从原有分散的数据库数据中抽取的&lt;/strong>，因此数据在进入前必然经过加工与集成，同一与综合&lt;/li>
&lt;li>&lt;strong>不可更新&lt;/strong>的：所涉及的数据操作主要是数据查询，一般不会修改操作&lt;/li>
&lt;li>随&lt;strong>时间变化&lt;/strong>：不可更新是指数据仓库的&lt;strong>用户&lt;/strong>进行分析处理是&lt;strong>不进行数据更新操作&lt;/strong>的，但不代表数据仓库的&lt;strong>整个生存周期中数据集合&lt;/strong>是不变的&lt;/li>
&lt;/ul>
&lt;h3 id="数据湖">&lt;strong>数据湖&lt;/strong>:&lt;/h3>
&lt;p>企业希望把**所有数据(结构化与非结构化)**都完整保存下来，进行有效管理与集中治理，挖掘和探索数据价值。&lt;/p>
&lt;p>数据湖是一个集中存储各类&lt;strong>结构化和非结构化&lt;/strong>数据的大型数据仓库，它可以存储来自&lt;strong>多个数据源、多种数据类型&lt;/strong>的&lt;strong>原始数据&lt;/strong>，数据&lt;strong>无需经过结构化处理&lt;/strong>，就可以进行存取、处理、分析和传输。&lt;/p>
&lt;p>对于数据仓库与数据湖的不同之处，可以类比为仓库和湖泊的区别：仓库存储着来自特定来源的货物；而湖泊的水来自河流、溪流和其他来源，&lt;strong>并且是原始数据&lt;/strong>。&lt;/p>
&lt;h3 id="sql中使用绑定变量的优点与缺点">&lt;strong>Sql中使用绑定变量的优点与缺点&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>绑定变量实质就是变量&lt;/strong>。类似于我们是用过的替代变量（占位符）。就是在sql语句中使用变量，通过改变变量的值来得到不同的结果。&lt;/p>
&lt;p>sql语句是分为动态部分和静态部分的。而动态部分在一般的情况下，对执行计划的影响是微乎其微的。&lt;/p>
&lt;p>&lt;strong>同一个sql语句有不同动态部分生成的执行计划是相同的。&lt;/strong>&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>使用动态绑定，可以&lt;strong>减少sql的解析&lt;/strong>，从而减少了数据库引擎在sql解析上资源的消耗。&lt;/li>
&lt;li>提高了&lt;strong>执行效率和可靠性&lt;/strong>。减少对数据库的访问实际上就是减少了数据库的工作量&lt;/li>
&lt;/ul>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>可能长时间使用动态sql，由于参数的不同。可能sql的&lt;strong>执行效率不同&lt;/strong>；&lt;/li>
&lt;li>&lt;strong>使用不当会有安全问题 sql注入&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="实现数据安全性控制的常用方法和技术">&lt;strong>实现数据安全性控制的常用方法和技术&lt;/strong>&lt;/h3>
&lt;p>数据库管理系统提供的安全措施主要包括&lt;/p>
&lt;ul>
&lt;li>用户&lt;strong>身份鉴别&lt;/strong>&lt;/li>
&lt;li>自主存取控制 Discretionary Access Control&lt;/li>
&lt;li>强制存取控制 Mandatory Access Control&lt;/li>
&lt;li>&lt;strong>视图&lt;/strong>机制&lt;/li>
&lt;li>&lt;strong>审计&lt;/strong>&lt;/li>
&lt;li>数据&lt;strong>加密&lt;/strong>存储和加密传输等&lt;/li>
&lt;/ul>
&lt;h3 id="登记日志的原则运行记录优先原则是什么为什么">&lt;strong>登记日志的原则（运行记录优先原则）是什么，为什么&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>运行记录优先原则&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>登记的次序严格按并发事务执行的时间次序&lt;/strong>&lt;/li>
&lt;li>必须&lt;strong>先写日志文件，后写数据库&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>如果先写了数据库修改，而在运行记录中没有登记下这个修改，则以后就&lt;strong>无法恢复这个修改&lt;/strong>了。&lt;/p>
&lt;p>如果先写日志，但没有修改数据库，按日志文件恢复时只不过是多执行一次&lt;strong>不必要的UNDO操作&lt;/strong>，并&lt;strong>不会影响数据库的正确性&lt;/strong>。&lt;/p>
&lt;p>所以为了安全，一定要先写日志文件，即首先把日志记录写到日志文件中，然后写数据库的修改。这就是**“先写日志文件”的原则**&lt;/p>
&lt;h3 id="sql-语句的执行过程并简单对各个步骤的所花费的代价大小进行描述和比较">SQL 语句的执行过程，并简单对各个步骤的所花费的代价大小进行描述和比较。&lt;/h3>
&lt;ol>
&lt;li>语法分析：确保语句的正确性和有效性。代价很小，语法分析器已预先定义了所有合法的 SQL 语法。&lt;/li>
&lt;li>语义分析：需要检查语句中的&lt;strong>对象是否存在&lt;/strong>、&lt;strong>用户是否有访问权限&lt;/strong>等信息。代价比语法分析高一些。&lt;/li>
&lt;li>解析（软解析和硬解析）：将 SQL 语句转换成执行计划，比语义分析高。需要进行语法转换、查询优化等复杂操作。
&lt;ol>
&lt;li>在软解析过程中，DBMS 会查找已经编译好的执行计划缓存，如果找到了对应的执行计划就直接使用.&lt;/li>
&lt;li>否则会进行硬解析，生成新的执行计划，此时代价最大。&lt;/li>
&lt;li>执行计划生成：生成最优的执行计划，以最小化查询的代价。代价最高，需要进行大量的计算和查询优化。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>查询执行：按照执行计划执行查询，并从磁盘中读取数据、对数据进行排序、过滤和聚合等操作，可能还需要进行大量的磁盘和内存交换。代价取决于查询本身的复杂度以及所涉及的数据量。&lt;/li>
&lt;/ol>
&lt;p>综合来看，SQL 语句的执行过程中，查询优化和查询执行往往是代价最大的两个步骤。在实际应用中，可以通过&lt;strong>优化查询语句的结构&lt;/strong>、&lt;strong>创建合适的索引&lt;/strong>、&lt;strong>优化查询计划&lt;/strong>等手段来提高查询性能，从而减少查询优化和查询执行所需的代价。&lt;/p>
&lt;h3 id="sql-优化原理是什么优化的逻辑是怎样的对此经验之谈">&lt;strong>SQL 优化原理是什么？优化的逻辑是怎样的？对此经验之谈&lt;/strong>&lt;/h3>
&lt;p>SQL 优化的原理：&lt;/p>
&lt;ul>
&lt;li>通过&lt;strong>优化查询的执行计划&lt;/strong>&lt;/li>
&lt;li>&lt;strong>减少查询的时间和资源消耗&lt;/strong>&lt;/li>
&lt;li>提高数据库系统的&lt;strong>性能&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>SQL 优化的逻辑一般可以分为以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>优化&lt;strong>查询语句&lt;/strong>：对查询语句进行优化，包括&lt;strong>重写查询语句&lt;/strong>、&lt;strong>使用索引&lt;/strong>、&lt;strong>避免全表扫描&lt;/strong>等。&lt;/li>
&lt;li>优化&lt;strong>数据库结构&lt;/strong>：根据业务需求优化数据库中表的&lt;strong>结构、索引、分区&lt;/strong>等，以提高查询和更新操作的性能。&lt;/li>
&lt;li>优化&lt;strong>硬件环境&lt;/strong>：优化数据库所在的硬件环境，包括 CPU、内存、磁盘、网络等，以提高数据库系统的整体性能。&lt;/li>
&lt;/ol>
&lt;p>对于 SQL 优化的经验之谈，以下是一些常见的建议：&lt;/p>
&lt;ol>
&lt;li>将&lt;strong>过滤条件进行排序&lt;/strong>,好的过滤条件先做&lt;/li>
&lt;li>使用&lt;strong>join来暗示表连接顺序&lt;/strong>，当有多表连接操作时，考虑使用&lt;strong>exists和in操作来优化&lt;/strong>&lt;/li>
&lt;li>&lt;strong>避免过度连接表&lt;/strong>，将多维度的查询进行降维处理，一次连接的表不要超过3张，超过就将非关联子查询变成内嵌视图。
&lt;ul>
&lt;li>聚合子查询转化为JOIN&lt;/li>
&lt;li>非关联子查询变成内嵌视图&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>避免在高层使用distinct&lt;/strong>，用exists和in来处理&lt;/li>
&lt;li>*&lt;em>避免在高层使用select &lt;em>&lt;strong>, 这样会产生&lt;/strong>冗余的结果集，降低性能&lt;/em>&lt;/em>&lt;/li>
&lt;li>&lt;strong>不要滥用子查询&lt;/strong>. 子查询有如下好处,除这些好处外,不要用
&lt;ol>
&lt;li>分辨过滤条件的好坏&lt;/li>
&lt;li>避免顶层的distinct&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>总之，SQL 优化需要根据具体的情况进行分析和优化，需要综合考虑查询的复杂度、数据的规模和类型、硬件环境等因素。&lt;/p>
&lt;h3 id="sql有什么优化策略从硬件系统应用上分析">&lt;strong>SQL有什么优化策略，从硬件、系统、应用上分析&lt;/strong>&lt;/h3>
&lt;p>这个优化法则归纳为5个层次：&lt;/p>
&lt;ul>
&lt;li>减少数据访问（&lt;strong>减少磁盘访问&lt;/strong>）系统上
&lt;ul>
&lt;li>正确使用&lt;strong>索引&lt;/strong>&lt;/li>
&lt;li>&lt;strong>优化执行计划&lt;/strong>&lt;/li>
&lt;li>尽量使用&lt;strong>自带函数&lt;/strong>,慎用自定义函数.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>减少服务器CPU开销（&lt;strong>减少CPU&lt;/strong>及内存开销）
&lt;ul>
&lt;li>使用&lt;strong>绑定变量&lt;/strong>&lt;/li>
&lt;li>合理使用&lt;strong>排序&lt;/strong>&lt;/li>
&lt;li>减少&lt;strong>模糊查找&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>返回&lt;strong>更少数据&lt;/strong>（减少网络传输或磁盘访问）应用上
&lt;ul>
&lt;li>数据&lt;strong>分页&lt;/strong>处理&lt;/li>
&lt;li>返回&lt;strong>只需要的字段&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>减少交互次数（减少网络传输）应用上
&lt;ul>
&lt;li>一次连接批量处理数据&lt;/li>
&lt;li>使用存储过程.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>利用更多资源（硬件上）
&lt;ul>
&lt;li>扩大内存&lt;/li>
&lt;li>增加CPU&lt;/li>
&lt;li>更快的硬盘&lt;/li>
&lt;li>更高速的网络&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="b树与b树的结构">&lt;strong>B树与B+树的结构&lt;/strong>&lt;/h3>
&lt;p>B树是&lt;strong>多关键字平衡树&lt;/strong>,且节点内的关键字是有序的.每个节点都存储其关键字指向的具体数据地址.&lt;/p>
&lt;p>B+树是在B树的基础上, 非叶子节点仅指向其多个子节点的地址 , 只有叶子节点指向具体以堆文件形式存放的数据块地址. 相邻叶子节点也通过指针连接. 方便快速范围查询.&lt;/p>
&lt;p>不同之处:&lt;/p>
&lt;ul>
&lt;li>层数更低: 相比于B树, B+树的非叶子节点全部用于索引,使得B+树的层数更低,&lt;/li>
&lt;li>效率稳定, B+树一定只能在叶子节点找到数据的具体地址, 每次查询的路径长度基本一致.&lt;/li>
&lt;li>范围查询: B+树的叶子节点有next指针, 使得范围查询效率更高.&lt;/li>
&lt;/ul>
&lt;h3 id="为什么不用其他数据结构做索引而用b树或b树">&lt;strong>为什么不用其他数据结构做索引，而用B树或B+树&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>链表, 链表的查询速度是O（N），每次查询都得从链表头开始查询，例如上面查询“xiaxia”，如果xiaxia在1000的位置，那么需要遍历1000次才能查找到。&lt;/li>
&lt;li>数组:查询速度O（1），但删除插入是O(n), 且数据必须存在于内存, 索引过大时无法存储.&lt;/li>
&lt;li>平衡二叉树
&lt;ul>
&lt;li>二叉查找树查询的时间复杂度是O（logN），查找速度最快和比较次数最少. 但在树形结构下,影响查询效率的因素主要是树的深度, B树的深度远比平衡二叉树小。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="b树索引的适用范围">&lt;strong>B树索引的适用范围&lt;/strong>:&lt;/h3>
&lt;ul>
&lt;li>全键值匹配&lt;/li>
&lt;li>匹配最左前缀
匹配列前缀&lt;/li>
&lt;li>匹配范围值
精确匹配某一列并范围匹配另外一列
只访问索引的查询&lt;/li>
&lt;/ul>
&lt;h3 id="什么时候使用b树索引--b树的索引可用性">&lt;strong>什么时候使用B树索引 / B树的索引可用性&lt;/strong>:&lt;/h3>
&lt;p>1、只需要获取少量的行;(确保使用索引比不使用索引更高效)&lt;/p>
&lt;p>2、即便获取很多行，但是可以只使用索引不使用基本表。(索引中包含整个表)&lt;/p>
&lt;h3 id="索引分类">&lt;strong>索引分类&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>聚簇索引&lt;/p>
&lt;ul>
&lt;li>按照数据存放的&lt;strong>物理位置为顺序&lt;/strong>的索引结构，聚集索引的叶子节点包含了整个数据行。&lt;/li>
&lt;li>每个表&lt;strong>只能有一个聚集索引&lt;/strong>，它对应的索引键值也是表的主键或唯一约束条件。&lt;/li>
&lt;li>通过聚集索引，我们可以快速地按照主键或唯一约束条件查询和排序表中的数据, &lt;strong>提高多行检索速度&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>非聚簇索引&lt;/p>
&lt;ul>
&lt;li>索引顺序与数据&lt;strong>物理列排序无关&lt;/strong>，&lt;strong>叶节点仍然是索引节点(指向主键)&lt;/strong>&lt;/li>
&lt;li>每个表可以有&lt;strong>多个非聚集索引&lt;/strong>，这些索引可以覆盖&lt;strong>多个数据列&lt;/strong>，以满足不同的查询需求。&lt;/li>
&lt;li>通过非聚集索引，快速地&lt;strong>定位表中符合查询条件的记录的主键&lt;/strong>，然后进行(回表查询)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>覆盖索引&lt;/strong>: 如果&lt;strong>非聚簇符合索引&lt;/strong>已经能够得到&lt;strong>查询的所有信息&lt;/strong>了，就&lt;strong>无需再回表&lt;/strong>，即只按照条件&lt;strong>找主键&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>联合索引&lt;/strong>：同时对&lt;strong>多列创建索引&lt;/strong>，&lt;strong>叶子节点会同时包含每个索引列的值&lt;/strong>，并且同时&lt;strong>根据多列排序&lt;/strong>，这个排序和我们所理解的字典序类似。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>哈希索引&lt;/strong>&lt;/p>
&lt;p>所有的数据类型，通过哈希函数变成一个&lt;strong>等长的哈希值&lt;/strong>。&lt;/p>
&lt;p>将这个&lt;strong>等长的哈希值&lt;/strong>作为&lt;strong>组织成索引的结构 —— 哈希链表&lt;/strong>。&lt;/p>
&lt;p>哈希链表的结点上，&lt;strong>储存哈希值&lt;/strong> 和 &lt;strong>指向记录哈希值的地址 uid（索引行的地址）&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>哈希索引能做什么不能做什么？&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>哈希索引只能用来进行&lt;strong>全键值&lt;/strong>的查询
&lt;ul>
&lt;li>不能前缀查询&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>哈希索引只支持&lt;strong>击中运算符&lt;/strong>
&lt;ul>
&lt;li>击中运算符：= , != , in&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>哈希索引&lt;strong>不支持范围查询&lt;/strong>&lt;/li>
&lt;li>哈希索引&lt;strong>不支持对字段排序&lt;/strong>(因为只支持击中运算符)&lt;/li>
&lt;li>哈希索引&lt;strong>读取效率高于B树索引&lt;/strong>
&lt;ul>
&lt;li>哈希索引结构非常&lt;strong>紧凑&lt;/strong>.&lt;/li>
&lt;li>哈希索引&lt;strong>使用数值的比较&lt;/strong>,远&lt;strong>高于字符串比较&lt;/strong>速度.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>函数索引&lt;/strong>&lt;/p>
&lt;p>B树索引是对一个字段构建索引,而函数索引是对&lt;strong>这个字段上的一个函数值&lt;/strong>构建索引.&lt;/p>
&lt;p>&lt;strong>结构同样是B+树索引,只是节点的关键字是函数的值而不是字段值.&lt;/strong>&lt;/p>
&lt;p>是最具创造力的索引结构,用得好可用解决并发冲突,优化存储结构.等很多事情.&lt;/p>
&lt;p>&lt;strong>能用在哪&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>不区分大小写&lt;/strong>查询&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>T、F比例巨大差异&lt;/strong>的查询&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>有选择的唯一性&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>项目表有两个状态, active和inactive.&lt;/p>
&lt;p>要求active的项目,必须要有唯一名. 而inactive没有这个要求.&lt;/p>
&lt;p>解决方法: &lt;strong>函数索引上构建唯一索引&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>位图索引&lt;/strong>&lt;/p>
&lt;p>用一个&lt;strong>索引键条目（01图）存储指向多行&lt;/strong>的指针。&lt;/p>
&lt;p>&lt;strong>位图索引适合&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>相异基数(distinct cardinality)低&lt;/strong>的字段进行快速查询 (复合查询)
&lt;ul>
&lt;li>可以取的值的范围小: 性别、真假,年龄段 等.&lt;/li>
&lt;li>使用B树索引,需要复合索引时 组合数多. 且共同的值多, 可能使得叶子结点远少于索引结点.&lt;/li>
&lt;li>使用哈希索引,碰撞率贼高.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>大量&lt;strong>临时查询的聚合&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>位图索引对于写操作非常不友好&lt;/strong>/位图索引&lt;strong>不能应用在OLTP&lt;/strong>应用中的原因&lt;/p>
&lt;p>&lt;strong>原因&lt;/strong>: 位图索引的&lt;strong>键值指向多行&lt;/strong>, 如果一个session修改了一个索引的数据,则&lt;strong>该索引指向的所有行都会被查找到&lt;/strong>.无法锁定单独一个条目,&lt;strong>可能在修改时要锁住整个目录&lt;/strong>,导致并发性下降严重 几乎变成串行化.&lt;/p>
&lt;p>&lt;strong>位图连结索引&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>允许使用&lt;strong>另外某个表的列&lt;/strong> 对 &lt;strong>一个给定表&lt;/strong> 建立索引。&lt;/li>
&lt;li>实际上，这就是允许&lt;strong>对一个索引结构&lt;/strong>(而不是表本身)中的数据进行&lt;strong>逆规范化&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>位图联结索引的&lt;strong>前提条件&lt;/strong>:&lt;/p>
&lt;p>&lt;strong>必须连接到另一张表的主键/唯一键&lt;/strong>&lt;/p>
&lt;p>&lt;strong>反向键索引或叫避向索引“eseindex)&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>将键值反向插入，以免并发插入时都插入到同一个块。&lt;/li>
&lt;li>此时进程将竞争同一个索引页,插入并发性大幅度下降&lt;/li>
&lt;/ol>
&lt;h3 id="索引的5种优点">&lt;strong>索引的5种优点&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>可以大大加快数据的&lt;strong>检索&lt;/strong>速度&lt;/li>
&lt;li>可以加速表和表之间的&lt;strong>连接&lt;/strong>，特别是在实现数据的参照完整性方面特别有意义&lt;/li>
&lt;li>在使用分组和排序子句进行数据检索式，同样可以显著减少查询中&lt;strong>分组和排序&lt;/strong>的时间&lt;/li>
&lt;li>通过创建&lt;strong>唯一性&lt;/strong>索引，可以保证数据库表中每一行数据的唯一性&lt;/li>
&lt;li>通过使用索引，可以在查询的过程中，使用&lt;strong>优化隐藏器&lt;/strong>，提高系统的性能&lt;/li>
&lt;/ul>
&lt;h3 id="系统对外键建立索引很普遍为什么要对外键建立索引">&lt;strong>系统对外键建立索引很普遍。为什么要对外键建立索引？&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>加快对于父表和子表的&lt;strong>连接查询&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>删除操作&lt;/strong>时，可以快速通过外键的索引找到&lt;strong>主表中&lt;/strong>要删除的行。&lt;/li>
&lt;li>&lt;strong>避免死锁&lt;/strong>, 有外键时会导致两个表都要上锁.
&lt;ul>
&lt;li>添加索引能够让&lt;strong>上锁后操作的时间变短&lt;/strong>, .并发时需要 A表加锁/B表加锁。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="不加索引的外键情况">&lt;strong>不加索引的外键情况&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>子表不容易&lt;/strong>修改
&lt;ul>
&lt;li>不从子表中删除记录&lt;/li>
&lt;li>是一个字典表,不容易被修改.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一般&lt;strong>不进行父表和子表的连接查询&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="建立索引的条件--请解释数据库管理员如何为数据库建立一组好的索引">&lt;strong>建立索引的条件 / 请解释数据库管理员如何为数据库建立一组好的索引&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>经常搜索&lt;/strong>的列&lt;/li>
&lt;li>经常&lt;strong>使用where子句&lt;/strong>的列上，加快条件的判断速度&lt;/li>
&lt;li>经常进行&lt;strong>范围搜索&lt;/strong>的列上，因为索引已经排序了，其指定的范围是连续的.&lt;/li>
&lt;li>&lt;strong>唯一性&lt;/strong>的列:在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构&lt;/li>
&lt;li>经常&lt;strong>需要排序&lt;/strong>的列上，因为索引已经排序了，查询可以利用索引的排序，加速排序查询时间.&lt;/li>
&lt;li>&lt;strong>经常用在连接的列&lt;/strong>，这些列&lt;strong>主要是外键&lt;/strong>，可以加快连接速度&lt;/li>
&lt;li>&lt;strong>数据分布较广的列&lt;/strong>:&lt;/li>
&lt;/ul>
&lt;h3 id="哪些列上不应该加索引">&lt;strong>哪些列上不应该加索引&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>很少使用&lt;/strong>或者参考的列不应该创建索引。&lt;/li>
&lt;li>&lt;strong>很少的数据值&lt;/strong>列不应该创建索引。&lt;/li>
&lt;li>&lt;strong>text,image,bit数据类型&lt;/strong>的列不应该加索引。
&lt;ul>
&lt;li>比较和排序的开销大.&lt;/li>
&lt;li>因为这些列要么数据量很大，要么很小，不利于使用索引&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>修改需求大&lt;/strong>的列.&lt;/li>
&lt;/ul>
&lt;h3 id="为什么数据库管理员一般不会给所有单个属性都建立索引请写出两条原因">&lt;strong>为什么数据库管理员一般不会给所有单个属性都建立索引，请写出两条原因&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>过多的索引会&lt;strong>加重优化器&lt;/strong>查找最优查询计划的负担&lt;/li>
&lt;li>会增加数据库&lt;strong>维护索引的负担&lt;/strong>.&lt;/li>
&lt;li>一旦聚集索引改变，&lt;strong>所有非聚集索引都会跟着改变&lt;/strong>&lt;/li>
&lt;li>该列是&lt;strong>属于不该建立索引&lt;/strong>的列时.&lt;/li>
&lt;/ul>
&lt;h3 id="为什么没有使用我的索引">&lt;strong>为什么没有使用我的索引&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>使用B+树索引&lt;/strong>，但&lt;strong>没有使用索引的最前列&lt;/strong>&lt;/li>
&lt;li>&lt;strong>不能为NULL建立索引条目&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>COUNT(*)&lt;/strong>， 包括NULL, t会引起&lt;strong>全表扫描&lt;/strong>，&lt;/li>
&lt;li>is not NULL&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>函数查询&lt;/strong>时不使用索引&lt;/li>
&lt;li>&lt;strong>隐形函数查询&lt;/strong>，比如**&amp;lt;&amp;gt;不等于符**，会&lt;strong>引起全表扫描&lt;/strong>&lt;/li>
&lt;li>&lt;strong>隐式类型转换&lt;/strong>，如字符串转成数值来比较&lt;/li>
&lt;li>如果用了我的索引，实际反而会更慢。
&lt;ul>
&lt;li>即查询&lt;strong>优化器发现有比使用你的索引更快的访问方式&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>没有正确的统计信息&lt;/strong>，造成CBO无法做出正确的选择&lt;/li>
&lt;li>两个条件用 &lt;strong>or 连接&lt;/strong>，一个有索引一个没索引&lt;/li>
&lt;/ul>
&lt;p>总结成两条：&lt;/p>
&lt;ul>
&lt;li>“不能使用索引，使用索引会返回不正确的结果”&lt;/li>
&lt;li>“不该使用索引，如果使用了索引就会变得更慢”&lt;/li>
&lt;/ul>
&lt;h3 id="索引带来的问题负面的使用索引会降低查询效率的情况">&lt;strong>索引带来的问题（负面的）,使用索引会降低查询效率的情况&lt;/strong>：&lt;/h3>
&lt;ul>
&lt;li>总是&lt;strong>存在索引不被使用&lt;/strong>的情况。
&lt;ul>
&lt;li>存在索引时, 创建索引会带来系统的维护和空间的开销.&lt;/li>
&lt;li>因此索引如果不被使用反而会降低效率.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当&lt;strong>一次查询的结果集较大&lt;/strong>时，索引会影响效率。
&lt;ul>
&lt;li>因为&lt;strong>索引是针对点查询&lt;/strong>的，而不是针对某个范围查询的。此时有可能不使用索引反而效率更高.&lt;/li>
&lt;li>一般结果集在10%以下可以考虑使用索引。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对于&lt;strong>修改需求大的表&lt;/strong>中，使用索引会严重影响数据库更新操作的效率。&lt;/li>
&lt;li>太多索引会让&lt;strong>设计不稳定&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="设计索引时需要考虑的主要因素">&lt;strong>设计索引时需要考虑的主要因素&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>在&lt;strong>适合加&lt;/strong>索引的列上加索引&lt;/li>
&lt;li>不在&lt;strong>不应该加&lt;/strong>索引的列上加索引&lt;/li>
&lt;li>不要加&lt;strong>过多&lt;/strong>的索引&lt;/li>
&lt;li>确保建立该索引后&lt;strong>能够被使用&lt;/strong>&lt;/li>
&lt;li>确保索引带来的&lt;strong>好处大于索引带来的问题&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="请描述oracle中iot的物理存储结构和读取数据的方式并与堆文件的物理存储结构和读取数据的方式进行比较后解释iot的适用范围">&lt;strong>请描述Oracle中IOT的物理存储结构和读取数据的方式，并与堆文件的物理存储结构和读取数据的方式进行比较后解释IOT的适用范围。&lt;/strong>&lt;/h3>
&lt;p>IOT（&lt;strong>Index-Organized&lt;/strong> Table）索引组织表 是一种基于B+树的索引类型，它的索引键包括表的主键和数据列。IOT的数据访问和索引访问是一体化的。&lt;/p>
&lt;p>IOT通常用于&lt;strong>需要频繁地使用主键查询&lt;/strong>的表，因为IOT将主键值和对应的数据行存储在同一个B+树节点中，可以减少磁盘I/O操作的次数，从而提高查询性能。&lt;/p>
&lt;p>与堆文件的存储结构相比。&lt;/p>
&lt;ul>
&lt;li>堆文件的存储是&lt;strong>随机存储&lt;/strong>的，而IOT使用的B树结构是&lt;strong>根据主键按照一定顺序存储&lt;/strong>的。&lt;/li>
&lt;li>堆文件的读取是需要&lt;strong>遍历整个堆文件数据&lt;/strong>的，而IOT则可以&lt;strong>通过主键的信息&lt;/strong>快速定位到相关节点，读取数据。&lt;/li>
&lt;/ul>
&lt;p>IOT适用范围：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>主键很少更新&lt;/strong>。因为主键更新会导致B树结构的重新调整。&lt;/li>
&lt;li>&lt;strong>多用主键查询&lt;/strong>。因为IOT是以主键为节点构造B树的，以主键信息查询能较快找到对应节点。&lt;/li>
&lt;li>&lt;strong>很少插入新数据&lt;/strong>。插入新数据会导致B树重新调整。&lt;/li>
&lt;li>希望数据已某种特定的&lt;strong>顺序物理存储&lt;/strong>，那也适合用IOT&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>IOT的优点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>记录排序&lt;/strong>，查询效率贼强&lt;/li>
&lt;li>&lt;strong>节约磁盘空间开销&lt;/strong>，主键没有空间开销，索引就是数据&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>IOT缺点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>插入效率也许低于堆文件&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于&lt;strong>经常更新的表不适合用IOT&lt;/strong>，因为维护的索引代价大，更何况是多字段索引&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="聚簇索引--clustered-index-或者--clustering-index">&lt;strong>聚簇索引 -clustered index 或者 -clustering index&lt;/strong>&lt;/h3>
&lt;p>为了使得&lt;strong>表中数据有序&lt;/strong>, 很多数据库使用了&lt;strong>聚簇索引&lt;/strong>.&lt;/p>
&lt;p>聚簇索引就是按照每张表的主键构造一颗B+树，同时叶子节点中存放的就是整张表的行记录数据，这个叶子节点也被称为数据页。每张表只能拥有一个聚簇索引。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>范围查询效率非常高&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代价: &lt;strong>非范围查询也要进行范围扫描&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>主键更新会导致记录的重新排序，从而导致记录物理位置的变化&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为了更加安全, 聚簇索引可以和索引组织表一样，根据主键来定义. 因为主键被更新的概率小,或者说不应该被更新.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>聚簇索引&lt;strong>也可以是非主键索引,这是和索引组织表不一样的地方&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>聚簇索引和IOT的区别在于索引键的选择和存储方式。&lt;/p>
&lt;ul>
&lt;li>聚簇索引只包括表的主键，并将表的数据按照主键值的顺序存储在硬盘上；&lt;/li>
&lt;li>IOT包括表的主键和数据列，并将数据和索引存储在同一个结构中。&lt;/li>
&lt;/ul>
&lt;h3 id="分区的作用与类型">分区的作用与类型&lt;/h3>
&lt;p>&lt;strong>分区的作用&lt;/strong>: 提高&lt;strong>并发性和并行性&lt;/strong>，从而增强系统架构的&lt;strong>可伸缩性&lt;/strong>&lt;/p>
&lt;p>&lt;strong>分区的类型&lt;/strong>（不一定是方式）&lt;/p>
&lt;p>循环分区：&lt;strong>不受数据影响&lt;/strong>的内部机制。分区定义为各个磁盘的存储区域；可以看作是随意散布数据的机制；保持更改带来的磁盘I/O操作的平衡&lt;/p>
&lt;p>数据驱动分区：根据**一个或多个字段中的值(分区键)**来定义分区。是一种手工分区，一般叫分区视图.&lt;/p>
&lt;h3 id="数据驱动分区的实现方式">&lt;strong>数据驱动分区的实现方式&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>哈希分区(Hash-partitioning)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>对&lt;strong>分区键进行哈希运算&lt;/strong>，根据运算结果进行分区.&lt;/li>
&lt;li>能保证&lt;strong>根据分区键可以快速找到记录&lt;/strong>，但对范围搜索没有任何帮助。&lt;/li>
&lt;li>其实更接近与循环分区, 只是它还能&lt;strong>负载均衡提高并发&lt;/strong>的能力.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>范围分区(Range- partitioning)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>滑动窗口，就是范围分区，&lt;strong>根据连续数据的范围&lt;/strong>对数据进行分区。&lt;/li>
&lt;li>&lt;strong>非常适合处理历史数据&lt;/strong>，每一个分区专门用来存储&lt;strong>特定范围内的数据&lt;/strong>。&lt;/li>
&lt;li>一般系统还会设定&lt;strong>else分区&lt;/strong>,来存储所有&lt;strong>可能漏网的数据&lt;/strong>(其他)&lt;/li>
&lt;li>应用: 时间范围, 字母范围&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>列表分区(List-partitioning)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>是一种最具手工风格的分区类型，适合&lt;strong>定制某种特殊的解决方案&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分区键必须明确指定&lt;/strong>，但&lt;strong>分区键只能有一列&lt;/strong>，不能像范围或者哈希分区那样同时指定多个列做为分区键，但它的&lt;strong>单个分区对应值可以是多个&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一旦插入的列值不在分区范围内，则插入/更新就会失败.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因此
通常建议使用列表分区时，要创建一个&lt;strong>default分区&lt;/strong>存储那些&lt;strong>不在指定列表内的记录&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>复合分区&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>很多数据库中分区可以嵌套，即分区可以再建立子分区，叫sub partition.子分区是分区内的分区。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一种二位分区处理的方法，比如在时间的分区中，建立哈希分区,范围-哈希分区、范围-列表分区等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>OB把它叫做二级分区&lt;/strong>，再举个例子，&lt;strong>类似于用户账单领域，会按照user id做哈希分区，按照账单创建时间做范围分区&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>数据驱动的分区是最常使用的分区方式，用数据值本身作为分区的基础，这时候&lt;strong>数据分区最具有开发使用的价值&lt;/strong>。&lt;/p>
&lt;h3 id="分区是如何提高查询效率">&lt;strong>分区是如何提高查询效率&lt;/strong>&lt;/h3>
&lt;p>分区后，逻辑上表仍然是一张完整的表，只是将表中的数据在物理上存放到多个表空间（物理文件上），利于高速检索，&lt;strong>查询数据时，不至于每次都扫描整张表&lt;/strong>.&lt;/p>
&lt;h3 id="分区的优点和缺点">&lt;strong>分区的优点和缺点&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>优点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>增强&lt;strong>可用性&lt;/strong>：如果表的某个分区出现故障，表在其他分区的数据仍然可用；&lt;/li>
&lt;li>&lt;strong>维护&lt;/strong>方便：如果表的某个分区出现故障，需要修复数据，只修复该分区即可；&lt;/li>
&lt;li>&lt;strong>均衡I/O&lt;/strong>：可以把不同的分区映射到磁盘以平衡I/O，改善整个系统性能；&lt;/li>
&lt;li>改善&lt;strong>查询性能&lt;/strong>：对分区对象的查询可以仅搜索自己关心的分区，提高检索速度。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>除了堆文件之外的任何存储方法，都会&lt;strong>带来复杂性&lt;/strong>&lt;/li>
&lt;li>&lt;strong>选错存储方式&lt;/strong>会带来大幅度的性能降低&lt;/li>
&lt;li>降低了并发个数，但如果&lt;strong>涉及数据量非常庞大&lt;/strong>，&lt;strong>降低并发所带来的缺陷远远小于分区所带来的性能提高&lt;/strong>&lt;/li>
&lt;li>由于&lt;strong>强制的部分数据聚合&lt;/strong>可能会&lt;strong>导致其他数据的分散&lt;/strong>，所以不同的查询请求也可能会形成性能上的矛盾&lt;/li>
&lt;/ul>
&lt;h3 id="数据分区的最佳方法">&lt;strong>数据分区的最佳方法&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>当&lt;strong>数据分区键均匀分布时&lt;/strong>，分区表查询收益最大&lt;/li>
&lt;li>&lt;strong>避免更新分区键&lt;/strong>, 更新分区键会影响数据移动&lt;/li>
&lt;li>&lt;strong>不在更新数据频繁时使用分区&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>考虑整体&lt;/strong>,当有多个处理执行时，解决方案就不应该过度偏袒其中任何一个&lt;/li>
&lt;/ul>
&lt;h3 id="面向对象中可持久化类的父类子类继承关系如何映射到关系数据库中有哪几种情况-每种情况下的表结构设计是怎姓的层次结构">&lt;strong>面向对象中可持久化类的父类子类继承关系，如何映射到关系数据库中，有哪几种情况, 每种情况下的表结构设计是怎姓的。(层次结构)&lt;/strong>&lt;/h3>
&lt;p>例子:&lt;/p>
&lt;p>指挥官和士兵&lt;/p>
&lt;p>每人都有唯一的ID, 名字(name), 描述(description)&lt;/p>
&lt;p>&lt;strong>邻接模型&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>层次中&lt;strong>父记录ID&lt;/strong>作为子记录(childrow) 的一个属性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>设计直观简单,但会导致&lt;strong>递归的查询&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>原理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>在邻接表中&lt;/strong>，所有的数据均拥有一个Parent字段，用来存储它的父节点。&lt;/li>
&lt;li>当前节点为根节点的话，它的父节点则为NULL。&lt;/li>
&lt;li>在遍历的时候，可以使用递归来实现查询整棵树，从根节点开始，不断寻找子节点（父节点-&amp;gt;子节点-&amp;gt;父节点-&amp;gt;子节点）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>快速获取直接父子节点&lt;/strong>，很容易&lt;strong>插入新节点&lt;/strong>。&lt;/li>
&lt;li>容易实现
&lt;ul>
&lt;li>使用Connect by容易实现&lt;/li>
&lt;li>递归实现，用oracle的with，表示出树的层次&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>三种树状模型中&lt;strong>性能最高&lt;/strong>，每秒返回的查询记录最多；只需要遍历一次，&lt;strong>但不是基于关系的处理&lt;/strong>，性能最好&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>为了避免多次交互,&lt;strong>每次获得整张表&lt;/strong>
&lt;ul>
&lt;li>比如查询后代节点树，需要用到递归，要发送多次的请求，与数据库交互多次。&lt;/li>
&lt;li>一般&lt;strong>为了避免递归给数据库发送sql&lt;/strong>，采用&lt;strong>一次性读取整个表&lt;/strong>的数据，然后在应用端构建树的方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>查询子树性能不好&lt;/strong>
&lt;ul>
&lt;li>只需要某一个子树，仍然要把整个树加载出来，性能上并不好；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>删除中间节点&lt;/strong>
&lt;ul>
&lt;li>要删除中间层结点时，需要同时删除该节点下的所有节点，否则会出现孤立节点；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>举例&lt;/strong>:&lt;/p>
&lt;p>表结构定义 : model(&lt;strong>id&lt;/strong>,parent_id,description,commander)&lt;/p>
&lt;p>&lt;strong>自顶向下SQL&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">select level,* from model
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">connect by parent_id = prior.id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">start with commander = &amp;#34;Root Commander&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不用connect by时，需要使用with as来递归&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span>&lt;span class="err">定义起点&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">level&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commader&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Root Commander&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">定义递归体&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parant&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">level&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">parent_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">with&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recursive_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">level&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">level&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commader&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Root Commander&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">union&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">all&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parant&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">level&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recursive_query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">parent_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="err">但这是层次遍历&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">level&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">recursive_query&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>自底向上SQL&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">level&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">connect&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">prior&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">parent_id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">start&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">with&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;%Highland%&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">无法看到树&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">因为无法存储中间结果集&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>物化路径模型&lt;/strong>&lt;/p>
&lt;p>每一个节点都存储节点的&lt;strong>完整路径&lt;/strong>，一般用字符串存，它允许节点之间有顺序.&lt;/p>
&lt;p>每个节点保存的结构信息里包括&lt;/p>
&lt;ul>
&lt;li>祖先各节点的路径&lt;/li>
&lt;li>后代节点路径的一部分&lt;/li>
&lt;li>兄弟节点路径的长度&lt;/li>
&lt;li>节点所在层次等等。&lt;/li>
&lt;/ul>
&lt;p>1代表第一章;&lt;/p>
&lt;p>1.2代表第一章第二节;
1.2.3代表第一章第二节
第三小节。&lt;/p>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>性能良好&lt;/strong>，借助了unix文件目录的思想，主要是&lt;strong>以空间换时间&lt;/strong>；&lt;/li>
&lt;li>&lt;strong>可靠性&lt;/strong>（&lt;strong>容易实现&lt;/strong>，不容易出bug）&lt;/li>
&lt;li>&lt;strong>可维护性&lt;/strong>（简单、不需要依赖大量额外的处理逻辑）&lt;/li>
&lt;li>并且通过&lt;strong>比较路径字符串长度&lt;/strong>也容易知道树的深浅&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>不能实现无限深度的树&lt;/strong>，每个节点的子节点数有上限；&lt;/li>
&lt;li>而且深度越大，路径越长，还要解决操作过程中&lt;strong>节点路径的唯一性&lt;/strong>；&lt;/li>
&lt;li>树的深度要自己&lt;strong>写函数计算&lt;/strong>&lt;/li>
&lt;li>&lt;strong>物化路径不应该是KEY&lt;/strong>，即使他们有唯一性，因为主键最好不更新原则。&lt;/li>
&lt;li>数据库&lt;strong>无法确保路径格式正确&lt;/strong>，只能&lt;strong>由应用程序来验证&lt;/strong>&lt;/li>
&lt;li>查询&lt;strong>复杂度主要在路径字符串的处理&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>与邻接模型的差别&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>邻接模型的&lt;strong>子节点是平等&lt;/strong>的,且可以&lt;strong>无限扩展&lt;/strong>。&lt;/li>
&lt;li>物化路径模型可以指出&lt;strong>兄弟的排名&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>影响物化路径模型的因素&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>计算&lt;strong>深度&lt;/strong>
计算两个&lt;strong>字符串函数的差&lt;/strong>，所带来的代价;&lt;/li>
&lt;li>&lt;strong>缩排&lt;/strong>函数
物化路径模型需&lt;strong>不断地处理字符串&lt;/strong>，在where子句中不断的执行字符串操作，处理速度比邻接模型更慢。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>表结构定义&lt;/strong> : model(&lt;strong>path&lt;/strong>,description,commander)&lt;/p>
&lt;p>&lt;strong>自顶向下查询&lt;/strong>:&lt;/p>
&lt;p>自定义函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">create&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">function&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">m_depth&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">returns&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">begin&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">end&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lpad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mp_depth&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Root Commander&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>自底向上查询&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lpad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mp_depth&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mp_depth&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">decription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;%Highland%&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">desc&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>嵌套集合模型&lt;/p>
&lt;ul>
&lt;li>
&lt;p>每一个节点都有一个左编号(left_num)和右编号(right_num)，包含其所有的子节点的左右数字.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确定这二个值的方法是对树进行一次深度优先遍历，在逐层深入的过程中依次递增地分配left_num的值，并在返回时依次递增地分配right_num的值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据元素之间不再是点和线的关系，而是以&lt;strong>容纳和被容纳&lt;/strong>的方式&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>优点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>易理解&lt;/strong>&lt;/li>
&lt;li>&lt;strong>查找某一个节点的子节点很容易&lt;/strong>，&lt;/li>
&lt;li>删除一个非叶子节点时，它的&lt;strong>后代会自动替代被删除的节点&lt;/strong>，成为其直接祖先节点的直接后代；&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>缺点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>但是对&lt;strong>结果集排序不好操作&lt;/strong>，缩排无法处理&lt;/li>
&lt;li>数据&lt;strong>更新、插入、删除&lt;/strong>开销大&lt;/li>
&lt;li>&lt;strong>计算量大，对存储程序要求高&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>影响嵌套集合模型性能的因素&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>找后代方面胜于其他两个模型&lt;/strong>，但为&lt;strong>缩排付出更大代价&lt;/strong>&lt;/li>
&lt;li>&lt;strong>额外的连接&lt;/strong>，以及group by所做的&lt;strong>深度&lt;/strong>有关&lt;/li>
&lt;li>&lt;strong>改善嵌套集合模型性能代价巨大,但引入冗余&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>应用场景：&lt;/strong>&lt;/p>
&lt;p>如果&lt;strong>简单快速的查询是最重要的功能&lt;/strong>，那么可以使用嵌套集合。&lt;/p>
&lt;p>然而，在嵌套集中&lt;strong>插入和移动节点是复杂&lt;/strong>的，因为需要&lt;strong>重新分配左右值&lt;/strong>，因此嵌套集不适合需要频繁插入和删除节点的应用场景&lt;/p>
&lt;p>&lt;strong>表结构定义&lt;/strong>: model(&lt;u>left_num&lt;/u>,&lt;u>right_num&lt;/u>,commander,description)&lt;/p>
&lt;p>&lt;strong>自顶向下查询&lt;/strong>:&lt;/p>
&lt;p>找后代直接,找范围就可以. 排序不可以&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Root Commander&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">between&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">right_num&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>找level,需要再加一个 a b中间加一个c&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lpad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">depth&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">depth&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Root Commander&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">between&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">right_num&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">between&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">right_num&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">group&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>自底向上查询&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="n">b是a的父亲&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">通过&lt;/span>&lt;span class="n">b找包括自己的所有父亲数量来定义深度&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lpad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">depth&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">distinct&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commander&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">between&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">right_num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">depth&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%Highland%&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">between&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">right_num&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">left_num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">desc&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>动态计算深度依旧是个问题·&lt;/li>
&lt;li>不要显示人造根节点&lt;/li>
&lt;li>硬编码最大深度 (为了缩排显示)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>嵌套间隔模型(nested interval)&lt;/strong>&lt;/p>
&lt;p>思想是以两个数字为特定节点的&lt;strong>路径编码&lt;/strong>，这两个数字被解释成有理数(就是分数)的&lt;strong>分子和分母&lt;/strong>。 太复杂了不讲.&lt;/p>
&lt;p>多父节点模型?&lt;/p>
&lt;p>**闭包表模型：**闭包表是一个简单、优雅模型，它记录了树中所有节点的关系，将树中任何具有祖先与后代关系的节点对，都存储在 TreePaths 中，同时我们也把指向节点自身的关系也存储在这张表；为了方便查询某个节点直接父节点或直接子节点，我们还增加一个 path_length 字段，自我引用的节点该值为 0，直接子节点为 1&lt;/p>
&lt;p>**优点：**它需要一张额外的表来存储关系，是一种典型的采用空间来换时间的方案，查询、插入、删除都比较简单&lt;/p>
&lt;p>&lt;strong>缺点&lt;/strong>：占用太多空间；&lt;/p>
&lt;p>&lt;strong>三种层次模型的查询效率比较&lt;/strong>&lt;/p>
&lt;p>自顶向下查询：Vandamme查询&lt;/p>
&lt;p>效率：邻接模型&amp;gt;物化模型&amp;gt;嵌套集合模型&lt;/p>
&lt;ul>
&lt;li>邻接模型
&lt;ul>
&lt;li>利用了&lt;strong>递归&lt;/strong>&lt;/li>
&lt;li>内部connect by是用&lt;strong>过程化方法&lt;/strong>实现的，&lt;strong>未利用关系模型实现&lt;/strong>。&lt;/li>
&lt;li>是进行&lt;strong>字符比较&lt;/strong>，并且置于内存中进行计算，比较快速;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>物化路径
&lt;ul>
&lt;li>利用&lt;strong>关系模型进行表联接&lt;/strong>，通过字符串前缀比较确定是否是父子关系。&lt;/li>
&lt;li>效率低下的主要原因是&lt;strong>字符串操作，比如字符串拆分&lt;/strong>（物化路径如果解决了用&lt;strong>字符型代替字符串型表示目录时，效率会大大提高&lt;/strong>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>嵌套模型
&lt;ul>
&lt;li>&lt;strong>虽然找出子节点很容易&lt;/strong>，&lt;/li>
&lt;li>但确定子节点的&lt;strong>深度&lt;/strong>，对子节点&lt;strong>排序&lt;/strong>以及缩排比较&lt;strong>复杂&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>自底向上访问：Highland查询&lt;/p>
&lt;ul>
&lt;li>邻接表模型&lt;/li>
&lt;li>不管是自底向上的查询还是自顶向下查询，效率都是一样的。&lt;/li>
&lt;li>物化路径
&lt;ul>
&lt;li>因为&lt;strong>自底向上需要遍历很多节点&lt;/strong>，而&lt;strong>自顶向下只需要遍历一个节点&lt;/strong>，自底向上查询远远低于自定上下查询&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>嵌套集合模型
&lt;ul>
&lt;li>自顶向下查询与自底向上查询效率&lt;strong>差不多&lt;/strong>&lt;/li>
&lt;li>但多了排序过程，&lt;strong>排序比较耗时&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>效率：邻接模型&amp;gt;物化模型&amp;gt;嵌套集合模型&lt;/p>
&lt;p>&lt;strong>物化路径模型&lt;/strong>是&lt;strong>最通用的最均衡&lt;/strong>的树状结构设计方案&lt;/p>
&lt;p>&lt;strong>自底向上查询慢于自顶向下查询的原因&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>自顶向下查询只有一个起点;,&lt;strong>自底向上查询可能有多个出发点&lt;/strong>。
·多个记录都包含highland查询。&lt;/li>
&lt;li>&lt;strong>不能使用索引&lt;/strong>,导致完整地表扫描&lt;/li>
&lt;/ul>
&lt;h3 id="反范式与打破范式要考虑的因素">反范式与打破范式要考虑的因素&lt;/h3>
&lt;p>&lt;strong>反范式&lt;/strong>: 引入&lt;strong>受控的冗余&lt;/strong>，通过放松规范化规则来&lt;strong>提高系统的性能,降低数据模型的复杂度&lt;/strong>. 通常包括将多个表合并成一个表，增加冗余数据，以及创建复合索引等技术手段。&lt;/p>
&lt;p>&lt;strong>打破范式需要考虑的三因素&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>规范弱化使得&lt;strong>实现变得更加复杂&lt;/strong>，因为需要&lt;strong>手动保持数据的完整性&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>规范弱化会&lt;strong>降低灵活性&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>规范弱化会加快元组检索的速度，但却会&lt;strong>使更新速度变慢&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="判断是否应该使用逆范式的条件什么时候可以不遵守范式">&lt;strong>判断是否应该使用逆范式的条件/什么时候可以不遵守范式&lt;/strong>：&lt;/h3>
&lt;ul>
&lt;li>数据&lt;strong>表非常大&lt;/strong>或&lt;strong>查询非常频繁&lt;/strong>，导致查询性能严重下降；
&lt;ul>
&lt;li>大型电商网站, 订单读取非常频繁,把订单和订单详细信息合并提高效率&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>存在大量连接操作&lt;/strong>，导致查询复杂度极高；
&lt;ul>
&lt;li>社交媒体软件,用户的关系复杂. 经常需要使用用户的关系信息.把关系信息合并到用户信息中.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>需要&lt;strong>快速读取大量数据&lt;/strong>，而&lt;strong>不需要强制保证数据的实时性&lt;/strong>；&lt;/li>
&lt;li>&lt;strong>修改频率非常低&lt;/strong>，数据更新的代价相对较小。
&lt;ul>
&lt;li>博客网站,文章和评论都很多时,只需要最新的数据,且不容易修改.&lt;/li>
&lt;li>可以把新的播客信息和评论合并成一个表.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="打破范式的步骤">&lt;strong>打破范式的步骤&lt;/strong>:&lt;/h3>
&lt;ol>
&lt;li>画好ER模型&lt;/li>
&lt;li>分辨一对一、一对多和多对多关系&lt;/li>
&lt;li>构建三范式表结构设计。&lt;/li>
&lt;li>考虑打破范式&lt;/li>
&lt;/ol>
&lt;h3 id="七大反范式pattern">&lt;strong>七大反范式Pattern&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>Pattern 1&lt;/strong> &lt;strong>合并一对一关系&lt;/strong>&lt;/p>
&lt;p>合并：基于全部参与的实体为主，引入部分参与的表。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>会产生大量空值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若两边都部分参与则不能合并&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>如，将“员工”和“员工地址”表合并为一个表，其中包含员工和他们的地址信息。&lt;/p>
&lt;p>&lt;strong>Pattern 2&lt;/strong> &lt;strong>一对N的关系复制非键值减少连接&lt;/strong>&lt;/p>
&lt;p>适用条件：两表连接时最主要的事务都与某非键值相关&lt;/p>
&lt;ul>
&lt;li>最需要关注更新，可能需要&lt;strong>使用触发器&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>如：查询学生信息以及学生所在学院&lt;/p>
&lt;p>例如，在“订单”和“订单行项目”表之间的一对多关系中，将订单头信息（如客户名称、订单日期等）复制到订单行项目表中。&lt;/p>
&lt;p>&lt;strong>Pattern 3&lt;/strong> &lt;strong>在一对N关系中复制外键来减少JOIN表数量&lt;/strong>&lt;/p>
&lt;p>为减少或删除常用或关键查询的连接，复制关系中一个或多个外键列来提高
查询的效率。&lt;/p>
&lt;p>例如，在“订单”和“订单行项目”表之间的一对多关系中，将订单表的外键（如客户id）复制到订单行项目表中。&lt;/p>
&lt;p>&lt;strong>Pattern 4&lt;/strong> &lt;strong>多对多关系中复制属性来减少JOIN表数量&lt;/strong>&lt;/p>
&lt;p>把两张表中经常需要的属性都拷贝到同一关系表中&lt;/p>
&lt;p>在“学生”和“课程”之间的多对多关系中，将学生和课程的属性（如姓名、课程名称等）复制到“选课”关联表中&lt;/p>
&lt;p>&lt;strong>Pattern 5&lt;/strong> &lt;strong>引入重复组&lt;/strong>&lt;/p>
&lt;p>通常对于一个多值属性，值不太多（小于等于10），且不会经常变，可以在表中见多个有关属性列&lt;/p>
&lt;p>如一个人有地址一、地址二、地址三&lt;/p>
&lt;p>将学生的多个地址存储在一个单一字段中，并将其标记为重复组。&lt;/p>
&lt;p>&lt;strong>Pattern 6&lt;/strong> &lt;strong>建立提取表&lt;/strong>&lt;/p>
&lt;p>将查询慢的表需要连接成大表并储存下来。&lt;/p>
&lt;p>查询可以访问派生数据并在同一组基表上执行多表联接。&lt;/p>
&lt;p>不能做实时计算，得到数据可能是&lt;strong>相对静态&lt;/strong>
的，也可能不一定是最新的。&lt;/p>
&lt;p>好处大，缺点非常大&lt;/p>
&lt;p>带来非常大的复杂性，导致数据库中存在各种同步的、异步的、有用的没用的提取表。
数据更新耗费后续人员极长时间.&lt;/p>
&lt;p>&lt;strong>Pattern 7&lt;/strong> &lt;strong>分区&lt;/strong>&lt;/p>
&lt;p>将大型表分割为更小的逻辑部分，以便更好地管理和查询数据。&lt;/p>
&lt;p>例如，将“销售记录”表分成按日期、地理区域或销售代表等逻辑分区。&lt;/p>
&lt;h3 id="范式的价值或者作用">&lt;strong>范式的价值或者作用&lt;/strong>&lt;/h3>
&lt;p>1NF 每个属性不可再分， 确保&lt;strong>原子性&lt;/strong>，具有原子性的价值&lt;/p>
&lt;p>2NF 主键可以唯一标识记录. 非主属性完全依赖候选键.检查对键的完全依赖，价值在于&lt;strong>控制数据冗余和查询性能&lt;/strong>&lt;/p>
&lt;p>3NF 消除对主属性的传递依赖,非主键属性之间不能相互依赖，检查&lt;strong>属性的独立性&lt;/strong>&lt;/p>
&lt;p>BCNF: 每一个函数依赖的决定因素都包含候选键&lt;/p>
&lt;p>四范式:消除多值依赖.&lt;/p>
&lt;p>所以范式的价值在于：&lt;/p>
&lt;ul>
&lt;li>降低&lt;strong>冗余&lt;/strong>&lt;/li>
&lt;li>消除&lt;strong>操作异常&lt;/strong>&lt;/li>
&lt;li>合理规范化的模式&lt;strong>可应对需求变更&lt;/strong>；&lt;/li>
&lt;/ul>
&lt;h3 id="为什么要加锁">&lt;strong>为什么要加锁&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>多个应用程序&lt;strong>同时对相同数据进行访问&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>保证数据库的完整性和一致性&lt;/strong>，就必须要有一定的机制用于控制数据记录的读取、插入、删除和更新。&lt;/li>
&lt;li>通过对数据库对象加锁，我们可以&lt;strong>避免由于并发更改造成数据的丢失&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="加锁与提交">&lt;strong>加锁与提交&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>想要使加锁时间最短，必须&lt;strong>频繁的提交&lt;/strong>&lt;/li>
&lt;li>但如果每个逻辑单元完成后都提交&lt;strong>会增加大量开销&lt;/strong>&lt;/li>
&lt;li>对于批处理程序，并发控制不是问题，&lt;strong>避免频繁提交才是明智的做法&lt;/strong>。&lt;/li>
&lt;li>对于用户交互程序，则需要&lt;strong>高频提交，加快释放锁&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h3 id="加锁与可伸缩性">&lt;strong>加锁与可伸缩性&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>与表级锁相比，行级锁能产生更佳的&lt;strong>吞吐量&lt;/strong>&lt;/li>
&lt;li>&lt;strong>行级锁大都性能曲线很快达到极限&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="加锁处理的原则">&lt;strong>加锁处理的原则&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>不要随便使用表级锁&lt;/strong>&lt;/li>
&lt;li>尽量&lt;strong>缩短加锁时间&lt;/strong>&lt;/li>
&lt;li>&lt;strong>索引也需要维护&lt;/strong>&lt;/li>
&lt;li>编程上的原则(语句性能高，未必程序性能高（下面有4点）)
&lt;ul>
&lt;li>避免SQL语句上的&lt;strong>循环处理&lt;/strong>&lt;/li>
&lt;li>减少程序和数据库之间的&lt;strong>交互次数&lt;/strong>&lt;/li>
&lt;li>充分利用DBMS提供的机制，使&lt;strong>跨机器交互的次数&lt;/strong>降至最少&lt;/li>
&lt;li>把所有&lt;strong>不重复不必要的SQL语句放在逻辑工作单元&lt;/strong>之外&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="锁的分类">锁的分类&lt;/h3>
&lt;p>悲观锁：&lt;/p>
&lt;ul>
&lt;li>指在读写数据时，认为&lt;strong>数据很可能会被其他并发操作所修改&lt;/strong>.
&lt;ul>
&lt;li>因此在**进行操作之前，先加锁，**确保数据不会被其他操作修改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>悲观锁适用于并发写操作多，&lt;strong>读操作少&lt;/strong>的场景
&lt;ul>
&lt;li>例如&lt;strong>银行转账等涉及到账户余额变动&lt;/strong>的场景。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>悲观锁的缺点是在&lt;strong>并发量高时，会导致大量的阻塞和等待&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>乐观锁：&lt;/p>
&lt;ul>
&lt;li>指在读写数据时，认为&lt;strong>数据不会被其他并发操作所修改.&lt;/strong>
&lt;ul>
&lt;li>因此在进行操作之前，不加锁，但在&lt;strong>提交数据时，检查数据是否被其他操作所修改，如果没有修改，则提交成功，否则返回错误信息&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>乐观锁适用于并发读操作多，&lt;strong>写操作少&lt;/strong>的场景.
&lt;ul>
&lt;li>例如商品库存等只需要查询不需要修改的场景。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>乐观锁的优点是可以&lt;strong>大大降低阻塞和等待&lt;/strong>，但是需要在提交数据时进行额外的校验，&lt;strong>增加了程序开发和维护的难度&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>共享锁（Shared Lock）：&lt;/p>
&lt;ul>
&lt;li>共享锁适用于多个事务&lt;strong>只读同一份数据&lt;/strong>的场景。&lt;/li>
&lt;li>适用于读多写少的场景，例如在线图书馆、新闻网站等需要大量读取数据的应用，可以使用共享锁来&lt;strong>提高并发读取的能力，避免写操作的阻塞&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>排他锁（Exclusive Lock）：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>只允许一个事务进行写操作&lt;/strong>，其他事务&lt;strong>不能进行读写操作&lt;/strong>。&lt;/li>
&lt;li>适用于写多读少的场景，&lt;/li>
&lt;li>例如银行转账、在线购物等需要对数据进行修改的应用，可以使用排他锁来保证操作的原子性，&lt;strong>避免读写冲突和数据不一致性&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>行级锁（Row Lock）：&lt;/p>
&lt;ul>
&lt;li>针对数据表中的某一行数据进行加锁，&lt;strong>只有在访问该行数据时才会加锁&lt;/strong>，这样可以&lt;strong>提高并发性能&lt;/strong>。&lt;/li>
&lt;li>例如社交网络、在线游戏等需要&lt;strong>频繁更新数据,高并发&lt;/strong>的应用，可以使用行级锁来控制并发更新，提高系统的并发能力和性能。&lt;/li>
&lt;/ul>
&lt;p>间隙锁（Gap Lock）：&lt;/p>
&lt;ul>
&lt;li>针对数据表中&lt;strong>不存在的数据进行加锁&lt;/strong>，可以防止其他事务在这个间隙中插入数据。&lt;/li>
&lt;li>适用于对数据表中不存在的数据进行加锁的场景，例如对于需要&lt;strong>进行范围查询或者范围删除的应用&lt;/strong>，可以使用间隙锁来避免其他事务在查询或删除操作中插入数据，保证数据的一致性和正确性。(避免幻读)&lt;/li>
&lt;/ul>
&lt;p>意向锁（Intention Lock）：&lt;/p>
&lt;ul>
&lt;li>在加行级锁和表级锁&lt;strong>之前，先进行意向锁的判断&lt;/strong>，以&lt;strong>提高加锁效率&lt;/strong>。&lt;/li>
&lt;li>例如在多个事务同时请求对同一数据行进行更新时，可以使用意向锁来提前判断需要加的锁类型，&lt;strong>避免不必要的锁竞争和死锁问题&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h3 id="必须由程序员利用程序语言控制并发更新的情况">&lt;strong>必须由程序员利用程序语言控制并发更新的情况:&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>业务规则&lt;strong>复杂的更新&lt;/strong>：如果更新操作需要依赖多个表或者多个条件，并且需要保证操作的原子性，就需要使用事务来控制并发更新。&lt;/li>
&lt;li>&lt;strong>分布式系统中的数据更新&lt;/strong>：在分布式系统中，不同节点之间可能会同时更新同一份数据，如果不加控制，就会导致数据的不一致性。因此，在分布式系统中，需要使用分布式锁来控制并发更新。&lt;/li>
&lt;li>&lt;strong>批量数据更新&lt;/strong>：如果需要批量更新数据，而且更新的数据量很大，可能会导致数据库锁表或者死锁等问题。因此，需要&lt;strong>将批量更新操作分批进行&lt;/strong>，或者&lt;strong>使用分布式锁&lt;/strong>来控制并发更新。&lt;/li>
&lt;li>&lt;strong>大量并发更新&lt;/strong>：如果并发更新的请求数量非常大，可能会导致数据库性能下降或者崩溃。因此，&lt;strong>需要使用连接池、缓存等技术来优化数据库性能，或者使用分布式锁来分散并发更新的压力。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="资源竞争解决方案有哪些">&lt;strong>资源竞争解决方案有哪些&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>DBA解决方案：针对事务空间、可用列表&lt;/p>
&lt;ul>
&lt;li>增加分配给储物条目的空间缓解冲突&lt;/li>
&lt;li>让&lt;strong>insert分配到不同的物理块&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>架构解决方案：分区、逆序索引、索引组织表&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开发解决方案：&lt;/p>
&lt;ul>
&lt;li>调节&lt;strong>并发数&lt;/strong>
&lt;ul>
&lt;li>限制session个数为最高性能的session个数，使周转更快&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>不使用系统产生值&lt;/strong>
&lt;ul>
&lt;li>连续值只在范围查询中使用，在连续值本身毫无现实意义的情况下，范围查询的场景也不多见;&lt;/li>
&lt;li>可以只使用随机数来做主键，遇到随机数碰撞，就再生成一个随机数.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>总结：&lt;strong>与加锁不同，数据库竞争是可以改善的&lt;/strong>。架构师、开发者和DBA都可以从各自的角度改善竞争&lt;/p>
&lt;h3 id="并发操作主要解决哪三个问题">&lt;strong>并发操作主要解决哪三个问题&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>丢失修改&lt;/strong>：T1和T2读入同一数据并修改，T2提交的结果破坏了T1的提交，导致T1修改被丢失&lt;/li>
&lt;li>&lt;strong>读脏数据&lt;/strong>：T1修改某一数据并将其写回磁盘，T2读取同一数据后，T1由于某种原因被撤销，数据也做了恢复，此时T2读的数据和数据库里的数据不一致，T2读到脏数据，即不正确数据&lt;/li>
&lt;li>&lt;strong>不可重复读&lt;/strong>：T1读数据后，T2对其修改，T1无法再现前一次读取结果&lt;/li>
&lt;/ul>
&lt;h3 id="事务的隔离级别">事务的隔离级别&lt;/h3>
&lt;p>未提交读（Read Uncommitted）：事务可以读取未提交的数据，也称作脏读（Dirty Read）。一般很少使用。&lt;/p>
&lt;p>提交读（Read Committed）：是大都是 DBMS （如：Oracle, SQLServer）默认事务隔离。执行两次同意的查询却有不同的结果，也叫不可重复读。&lt;/p>
&lt;p>可重复读（Repeable Read）：是 MySQL 默认事务隔离级别。能确保同一事务多次读取同一数据的结果是一致的。可以解决脏读的问题，但理论上无法解决幻读（Phantom Read）的问题。&lt;/p>
&lt;p>可串行化（Serializable）：是最高的隔离级别。强制事务串行执行，会在读取的每一行数据上加锁，这样虽然能避免幻读的问题，但也可能导致大量的超时和锁争用的问题。很少会应用到这种级别，只有在非常需要确保数据的一致性且可以接受没有并发的应用场景下才会考虑。&lt;/p>
&lt;p>MySql实现的哪种隔离级别&lt;/p>
&lt;p>可重复读&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B/io%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B/io%E6%A8%A1%E5%9E%8B/</guid><description>&lt;h1 id="io模型">I/O模型&lt;/h1>
&lt;h2 id="一什么是io模型-及-io模型的分类">一、什么是I/O模型 及 I/O模型的分类&lt;/h2>
&lt;h2 id="二io-多路复用">二、I/O 多路复用&lt;/h2>
&lt;h2 id="三实际应用">三、实际应用&lt;/h2>
&lt;h3 id="reactor模式">Reactor模式&lt;/h3>
&lt;h3 id="proactor模式">Proactor模式&lt;/h3>
&lt;h3 id="事件驱动模式">事件驱动模式&lt;/h3></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/acmer%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/acmer%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</guid><description>&lt;h1 id="写在前面">写在前面&lt;/h1>
&lt;p>笔试上机题型基本是经典算法题，且难度最多leetcode hard。但面试的题目类型很多，如场景题、NP问题等没有最优解的问题。&lt;/p>
&lt;p>以下对求职面试算法题做整理，主要面向ACMer，是对比赛中不常见的算法题的补充。&lt;/p>
&lt;p>篇幅有限，仅给出简要思路，正解代码可选择该篇，或者自行搜索。背代码没用，经过思考后自己写一遍，面试时才能写出来。&lt;/p>
&lt;h1 id="经典算法题">经典算法题&lt;/h1>
&lt;h2 id="链表">链表&lt;/h2>
&lt;h3 id="链表翻转-空间o1-时间on">链表翻转 空间O(1) 时间O(n)&lt;/h3>
&lt;h3 id="归并排序链表on-时间onlogn">归并排序链表O(n) 时间O(nlogn)&lt;/h3>
&lt;h2 id="排序">排序&lt;/h2>
&lt;h3 id="手写快排">手写快排&lt;/h3>
&lt;h3 id="无序数组中找第k大数httpsleetcodecnproblemskth-largest-element-in-an-array--on">&lt;a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener">无序数组中找第k大数&lt;/a> O(n)&lt;/h3>
&lt;p>补充: 第K大数,而不是第K个不同的数.&lt;/p>
&lt;p>和求排序后的第k个数本质一致,转换一下即可.&lt;/p>
&lt;h4 id="思路">思路&lt;/h4>
&lt;p>回忆一下二分法和快排:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>二分法形成一棵二叉树. 每层所有序列长度总和为n, 二叉树高度为h, 时间复杂度为 O(n*h)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最优的情况: 每个结点的左儿子和右儿子序列长度相等. h = logn, 时间复杂度为O(n*logn)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因此快排最优是O(n*logn)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="如何优化到on">如何优化到O(n)&lt;/h4>
&lt;p>显然, 对于求排序后第k个数. 在二分时,每次可以只选择一个儿子继续搜索.&lt;/p>
&lt;p>即在最优情况下,每次二分结果为 l,mid,r&lt;/p>
&lt;ul>
&lt;li>mid == k ,答案就是a[mid]&lt;/li>
&lt;li>mid &amp;gt; k, 只需要继续在 (l,mid-1)中搜&lt;/li>
&lt;li>mid &amp;lt; k, 只需要继续在 (mid+1,r)中搜&lt;/li>
&lt;/ul>
&lt;p>因此与快排形成的二叉树不同. 该方法每层的搜索总长度是递减的.&lt;/p>
&lt;p>即 n + n/2 + n/4 + n/8 + &amp;hellip;&lt;/p>
&lt;p>易得上述公式的近似为 2*n, 时间复杂度O(n)&lt;/p>
&lt;h2 id="串">串&lt;/h2>
&lt;h3 id="字符串全排列httpsleetcodecnproblemszi-fu-chuan-de-pai-lie-lcof">&lt;a href="https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof/" target="_blank" rel="noopener">字符串全排列&lt;/a>&lt;/h3>
&lt;h3 id="最长回文子串---on">最长回文子串&amp;ndash; O(n)&lt;/h3>
&lt;p>思路:&lt;a href="https://blog.csdn.net/qq_51116518/article/details/117370554" target="_blank" rel="noopener">马拉车算法&lt;/a>&lt;/p>
&lt;h4 id="证明on">证明O(n):&lt;/h4>
&lt;p>即证while内的p[i]++ 执行次数总和为O(n)级别&lt;/p>
&lt;p>首先考虑什么情况下才需要进入while循环&lt;/p>
&lt;ul>
&lt;li>i &amp;lt; mx, 且 i 为 id 所在回文串的右四等分点之后.
&lt;ul>
&lt;li>此时p[i]是以mx-i 开始增加, 即i + p[i] &amp;gt;= mx&lt;/li>
&lt;li>也就是while内的操作每执行一次 mx++&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>i &amp;gt; mx, 无法使用之前的预处理.
&lt;ul>
&lt;li>while内的操作没执行一次 mx++&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>可知while的操作次数等于 mx从0加到n-1的次数, 因此while内操作次数的总和为n&lt;/p>
&lt;p>总时间复杂度 O(n)&lt;/p>
&lt;h2 id="动态规划非背包">动态规划(非背包)&lt;/h2>
&lt;h3 id="最长公共连续子序列-onm">最长公共连续子序列 O(nm)&lt;/h3>
&lt;h3 id="最长上升子序列-onlogn">最长上升子序列 O(nlogn)&lt;/h3>
&lt;p>思路:动态规划+二分&lt;/p>
&lt;h2 id="背包类">背包类&lt;/h2>
&lt;p>货币面值组成&lt;/p>
&lt;h3 id="砝码称重httpswwwacwingcomproblemcontentdescription3420-on--s">&lt;a href="https://www.acwing.com/problem/content/description/3420/" target="_blank" rel="noopener">砝码称重&lt;/a> O(n * s)&lt;/h3>
&lt;p>题意：有天平和 N 个砝码重量是 Wi。可以称出多少种不同的重量？砝码可以放在天平两边。&lt;/p>
&lt;p>N&amp;lt;100 ,Σwi &amp;lt; 1e5&lt;/p>
&lt;p>思路：&lt;/p>
&lt;p>01背包， 称重为i的可以从 abs(i-w) ， i+w 中转移。 不过要注意开个滚动数组防止重复放砝码。&lt;/p>
&lt;h2 id="数学题">数学题&lt;/h2>
&lt;h4 id="小凯的疑惑">小凯的疑惑&lt;/h4>
&lt;h1 id="思维题">思维题&lt;/h1>
&lt;h4 id="小球称重问题">小球称重问题&lt;/h4>
&lt;h1 id="np问题">NP问题&lt;/h1>
&lt;h2 id="集合覆盖问题">集合覆盖问题&lt;/h2>
&lt;h1 id="杂项">杂项&lt;/h1>
&lt;h3 id="随机加权采样算法-aliashttpsleetcodecnproblemsrandom-pick-with-weight">&lt;a href="https://leetcode.cn/problems/random-pick-with-weight/" target="_blank" rel="noopener">随机加权采样算法 alias&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://www.cnblogs.com/Lee-yl/p/12749070.html" target="_blank" rel="noopener">https://www.cnblogs.com/Lee-yl/p/12749070.html&lt;/a>&lt;/p>
&lt;h1 id="杂谈后话">杂谈后话&lt;/h1>
&lt;p>写一点求职的经验和所见所闻吧！&lt;strong>不保证时效性和真实性，参考与否自行斟酌&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>面评记录对求职的影响&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>针对人群：想&lt;strong>刷面试经验&lt;/strong>，而&lt;strong>不是真正急着找工作的&lt;/strong>。&lt;/li>
&lt;li>请&lt;strong>珍惜每次面试机会&lt;/strong>，尤其是面试喜欢的公司时。&lt;/li>
&lt;li>面试一般都会有记录和面试评价。&lt;/li>
&lt;li>所见所闻：大佬A大二时投递了理想公司的实习，意图刷该公司的面试经验。结果表现不佳，导致在真正需要找实习的时候，因之前的面评太差，导致没过简历/排序靠后（记不太清了）&lt;/li>
&lt;/ul></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</guid><description>&lt;p>1.已知平面上的一个圆和若干点 快速求出包含点数最少的多边形使得圆在多边形中&lt;/p>
&lt;p>预处理：圆内的点删去&lt;/p>
&lt;p>点排序，按照射线的角度排序。O(nlogn)&lt;/p>
&lt;p>如黑色的三个点要排序，就是按与圆相切的射线的角度排序。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="%e7%ac%94%e8%af%95%e7%ae%97%e6%b3%95%e9%a2%98/img/image-20230414155250711.png" alt="image-20230414155250711" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>把每一个点当作起点贪心。&lt;/p>
&lt;p>每次贪心：&lt;/p>
&lt;p>​ 从一个S出发，选择一个点T ，点T角度最大，且满足ST与圆不相交 且 圆心在ST射线的右侧。（即顺时针）然后再以T点出发，选择下一个点，直到遍历过的角度大于360度。每次选择 logn，最多选择n次，因此每次贪心是nlogn。&lt;/p>
&lt;p>做n次贪心，总时间复杂度是n^2logn&lt;/p>
&lt;p>给出一无序数组 求所有长度大于等于k的连续子序列的中位数的最大值 定义中位数为第&lt;a href="%e5%90%91%e4%b8%8a%e5%8f%96%e6%95%b4">l/2&lt;/a>(l为数组长度)个数&lt;/p>
&lt;p>二分答案，从小到大排序后二分，选择X为中位数。判断是否有大于等于X的中位数满足条件。&lt;/p>
&lt;p>预处理数组为 -1 ， 0 ， 1（小于X，等于X，大于X），On跑一遍找是否有长度大于K的和大于等于0。 求前缀和并维护最小前缀和即可。&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</guid><description>&lt;h3 id="tcp和udp的区别">TCP和UDP的区别&lt;/h3>
&lt;p>TCP:
User Datagram Protocol 用户数据报协议&lt;/p>
&lt;ul>
&lt;li>提供一种面向连接的、可靠交付的面向字节流服务&lt;/li>
&lt;li>TPDU: TCP 报文段(segment)&lt;/li>
&lt;li>传输开销大、报文头部大&lt;/li>
&lt;li>全双工&lt;/li>
&lt;/ul>
&lt;p>UDP：
User Datagram Protocol 用户数据报协议&lt;/p>
&lt;ul>
&lt;li>提供面向事务的简单不可靠信息传送服务&lt;/li>
&lt;li>TPDU: UDP 报文或用户数据报。&lt;/li>
&lt;li>传输开销小、报文头部小 8字节&lt;/li>
&lt;li>不面向连接没有双工的说法&lt;/li>
&lt;/ul>
&lt;h3 id="tcp握手">TCP握手&lt;/h3>
&lt;p>三次握手为什么不是四次呢&lt;/p>
&lt;p>服务器的回复和请求可以并成一次。&lt;/p>
&lt;p>第三次可以携带数据吗&lt;/p>
&lt;p>可以&lt;/p>
&lt;p>TCP四次挥手可以三次吗&lt;/p>
&lt;p>不可以，服务器那个时候可能还要发送数据。&lt;/p>
&lt;p>最后一次要等两个ttl，&lt;/p>
&lt;p>14.tcp为什么慢&lt;/p>
&lt;p>如重传机制，确认机制，拥塞控制机制&lt;/p>
&lt;p>15.udp的切包&lt;/p>
&lt;p>IP分片的概念
在TCP/IP分层中，数据链路层用MTU（Maximum Transmission Unit，最大传输单元）来限制所能传输的数据包大小，MTU是指一次传送的数据最大长度，不包括数据链路层数据帧的帧头，如以太网的MTU为1500字节，实际上数据帧的最大长度为1514字节，其中以太网数据帧的帧头为14字节&lt;/p>
&lt;p>当发送的IP数据包的大小超过了MTU时，IP层就需要对数据进行分片，否则数据将无法发送成功&lt;/p>
&lt;p>IP层是没有超时重传机制的，如果IP层对一个数据包进行了分片，只要有一个分片丢失了，只能依赖于传输层进行重传，结果是所有的分片都要重传一遍，这个代价有点大；公网传输，需要经过多个网络设备，IP分片容易造成丢包&lt;/p>
&lt;p>由此可见，IP分片会大大降低传输层传送数据的成功率，所以我们要避免IP分片&lt;/p>
&lt;p>33.了解一些常用的RPC框架吗&lt;/p>
&lt;p>RPC（Remote Procedure Call，远程服务调用），用来实现部署在不同机器之间系统的方法调用，使程序像当问本地系统资源一样，通过网络传出资源.&lt;/p>
&lt;p>dubbo：基于Netty的高性能RPC框架，是阿里巴巴开源的&lt;/p>
&lt;p>Netty介绍
Netty是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络IO程序。
Netty主要针对在TCP协议下，面向Clients端的高并发应用，或者Peer-to-Peer场景下的大量数据持续传输的应用。
Netty本质是一个NIO框架，适用于服务器通讯相关的多种应用场景。&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/</guid><description>&lt;h3 id="程序分析主要关注两大方面">程序分析主要关注两大方面：&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>程序优化&lt;/strong>侧重于提高程序的性能，通过对程序中关键函数的跟踪或者运行时信息的统计，找到系统性能的瓶颈，从而采取进一步行动对程序进行优化，同时减少资源使用。&lt;/li>
&lt;li>&lt;strong>程序正确性&lt;/strong>侧重于确保程序执行它应该做的事情，帮助开发者找出错误代码的位置。（本文以程序正确性的分析为主）&lt;/li>
&lt;/ul>
&lt;h3 id="程序分析方法">程序分析方法：&lt;/h3>
&lt;p>第一类是&lt;strong>静态程序分析&lt;/strong>，即在不执行程序的情况下进行程序分析。&lt;/p>
&lt;p>第二类是&lt;strong>动态程序分析&lt;/strong>，即通过运行程序或者在程序运行期间进行分析。&lt;/p>
&lt;p>&lt;a href="https://wiki.mbalib.com/wiki/%e5%8a%a8%e6%80%81%e5%88%86%e6%9e%90" target="_blank" rel="noopener">动态分析方法包括：调试、覆盖测试、剖面测试、动态切片、动态污点分析等&lt;/a>&lt;a href="https://wiki.mbalib.com/wiki/%e5%8a%a8%e6%80%81%e5%88%86%e6%9e%90" target="_blank" rel="noopener">1&lt;/a>。&lt;/p>
&lt;p>当然，也有很多研究工作是关于&lt;strong>如何有效结合静态和动态程序分析&lt;/strong>的。同时，因为通常无法拿到真正的程序正确性的需求，绝大多数的程序分析技术着重于分析&lt;strong>通用的程序正确性需求&lt;/strong>，比如如果有断言的话，我们尽量分析断言会不会被违背，再比如分析是否存在整数或者缓存溢出，再或者检测指针相关的安全漏洞等。&lt;/p>
&lt;p>&lt;strong>符号执行&lt;/strong>（通过用求解每条程序路上上的条件来生成测试用例）&lt;/p>
&lt;p>&lt;strong>模型检测&lt;/strong>（通过抽象并遍历所有的程序行为来判断程序是不是正确）&lt;/p>
&lt;p>&lt;strong>模糊测试&lt;/strong>（通过优化大量的生成测试用例）&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/396531255" target="_blank" rel="noopener">模型检查、符号执行、抽象解释等&lt;/a>&lt;a href="https://zhuanlan.zhihu.com/p/396531255" target="_blank" rel="noopener">1&lt;/a>。&lt;/p>
&lt;p>对基于静态分析（比如抽象解释，或者 lint）的工具，一个重要的问题就是&lt;strong>如何减少假警报&lt;/strong>的。&lt;/p>
&lt;p>而对于动态分析（比如测试）而言，对应的问题就是&lt;strong>如何减少漏报&lt;/strong>。&lt;/p>
&lt;p>除了把静态分析做的更精确（比如设计更复杂的 lint 规则），和把动态分析做的更完备（比如提要求更高的覆盖率标准）&lt;/p>
&lt;p>还有一个趋势，就是&lt;strong>结合不同的程序分析技术取长补短&lt;/strong>。比如 hybrid fuzzing 的做法是，通过有效的结合符号执行与模糊测试来提高测试的覆盖率。&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/396531255" target="_blank" rel="noopener">插桩、覆盖率、动态切片、动态污点分析等。&lt;/a>&lt;a href="https://zhuanlan.zhihu.com/p/396531255" target="_blank" rel="noopener">1&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/396531255" target="_blank" rel="noopener">技术分享 | 浅谈程序分析&lt;/a>&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/knowledge/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/knowledge/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/git/</guid><description>&lt;p>软件配置管理&lt;/p>
&lt;p>21.做代码管理用什么东西&lt;/p>
&lt;p>Git 代码仓库&lt;/p>
&lt;p>22.git rebase和git merge的区别&lt;/p>
&lt;p>Merge会自动根据两个分支的共同祖先和两个分支的最新提交 进行一个三方合并，然后将合并中修改的内容生成一个新的 commit，即merge合并两个分支并生成一个新的提交,并且仍然后保存原来分支的commit记录&lt;/p>
&lt;p>Rebase会从两个分支的共同祖先开始提取当前分支上的修改，然后将当前分支上的所有修改合并到目标分支的最新提交后面，如果提取的修改有多个，那git将依次应用到最新的提交后面。Rebase后只剩下一个分支的commit记录&lt;/p>
&lt;p>rebase会打乱时间线，但是更加整洁，merge保留了时间线信息&lt;/p>
&lt;h3 id="23git提交流程">23.git提交流程&lt;/h3>
&lt;p>&lt;a href="https://blog.csdn.net/weixin_44256848/article/details/123812716" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44256848/article/details/123812716&lt;/a>&lt;/p>
&lt;p>git pull 同步远程代码&lt;/p>
&lt;p>修改代码&lt;/p>
&lt;p>git status 显示被修改的文件&lt;/p>
&lt;p>git diff 文件名 显示文件具体变更&lt;/p>
&lt;p>git add 文件名 提交文件到本地缓存区&lt;/p>
&lt;p>git commit 提交到本地仓库&lt;/p>
&lt;p>git push 提交本地代码到远程仓库&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/weixin_44256848/article/details/123812716" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44256848/article/details/123812716&lt;/a>&lt;/p>
&lt;p>生产分支（master）‌&lt;/p>
&lt;ul>
&lt;li>Master分支是仓库的主分支，也有人叫Production分支，这个分支包含最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改‌&lt;/li>
&lt;/ul>
&lt;p>补丁分支（hotfix）‌&lt;/p>
&lt;ul>
&lt;li>当我们在生产环境发现新的Bug时候，我们需要基于master分支创建一个Hotfix分支，然后在Hotfix分支上修复bug，完成Hotfix后，我们要把hotfix分支合并回Master和Develop分支‌，所以Hotfix的改动会进入下一个Release&lt;/li>
&lt;/ul>
&lt;p>发布分支（release)‌&lt;/p>
&lt;ul>
&lt;li>当你需要发布一个新功能的时候，要基于Develop分支创建一个Release分支，在Release分支测试并修复bug，完成release后，把release合并到master和develop分支‌&lt;/li>
&lt;/ul>
&lt;p>开发分支（develop）‌&lt;/p>
&lt;ul>
&lt;li>这个分支是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支‌&lt;/li>
&lt;/ul>
&lt;p>功能分支（feature）‌&lt;/p>
&lt;ul>
&lt;li>feature分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release‌&lt;/li>
&lt;/ul></description></item><item><title/><link>https://ysyyhhh.github.io/docs/language/c++/modern-c++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/language/c++/modern-c++/</guid><description>&lt;h1 id="modern-c">Modern C++&lt;/h1>
&lt;h2 id="lambda表达式">lambda表达式&lt;/h2>
&lt;p>描述:&lt;/p>
&lt;ul>
&lt;li>一个匿名函数对象&lt;/li>
&lt;li>一个可调用的代码单元&lt;/li>
&lt;li>一个函数对象的语法糖&lt;/li>
&lt;/ul>
&lt;p>语法规则:
&lt;a href="">&lt;/a>{};&lt;br>
[]: lambda表达式的引导符
(): 参数列表&lt;/p>
&lt;p>具体示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">taskId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">taskId&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">taskId&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runnable&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在示例中, thread的初始化是一个lambda表达式, 该lambda表达式的参数列表为空, 函数体为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">taskId&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">taskId&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runnable&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">runTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_total_tasks&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样一个thread可以负载多个任务.&lt;/p>
&lt;p>如果不用lambda表达式, 那么就需要定义一个函数, 然后将函数的地址传递给thread, 这样就会增加代码量.&lt;/p>
&lt;p>也就是说实际上 thread的参数可以是一个函数对象, 也可以是一个函数指针, 也可以是一个lambda表达式.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">explicit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">不能在传参时隐式调用构造函数。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="err">使用&lt;/span>&lt;span class="n">reset来用子类覆盖父类&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">new_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TrieNodeWithValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">end_node&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">end_node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new_node&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stl">STL&lt;/h3>
&lt;h4 id="vector">vector&lt;/h4>
&lt;p>可变长数组，用倍增的思想。&lt;/p>
&lt;p>vector在push_back以成倍增长可以在均摊后达到O(1)的事件复杂度&lt;/p>
&lt;p>2倍 gcc&lt;/p>
&lt;p>1.5倍 vs2019&lt;/p>
&lt;p>以2倍的方式扩容，导致&lt;strong>下一次申请的内存必然大于之前分配内存的总和&lt;/strong>，导致&lt;strong>之前分配的内存不能再被使用&lt;/strong>，所以最好倍增长因子设置为(1,2)之间.&lt;/p>
&lt;h4 id="map">map&lt;/h4>
&lt;p>map底层红黑树&lt;/p>
&lt;p>unordered_map底层哈希&lt;/p>
&lt;h3 id="bitset">bitset&lt;/h3>
&lt;p>二进制数组，bool类型的数组。&lt;/p>
&lt;p>可以加速到/64&lt;/p>
&lt;h4 id="迭代器失效的情况以及解决方法">迭代器失效的情况，以及解决方法&lt;/h4>
&lt;ol>
&lt;li>对于序列容器vector，deque来说，使用erase后，后边的每个元素的迭代器都会失效，后边每个元素都往前移动一位，&lt;strong>erase返回下一个有效的迭代器&lt;/strong>。&lt;/li>
&lt;li>对于关联容器map，set来说，使用了erase后，当前元素的迭代器失效，但是其结构是红黑树，删除当前元素，不会影响下一个元素的迭代器，所以&lt;strong>在调用erase之前，记录下一个元素的迭代器&lt;/strong>即可。&lt;/li>
&lt;li>对于list来说，它使用了不连续分配的内存，并且它的erase方法也会返回下一个有效的迭代器，因此上面两种方法都可以使用。&lt;/li>
&lt;/ol>
&lt;h3 id="哈希冲突的解决方法">哈希冲突的解决方法&lt;/h3>
&lt;p>开放地址法/再散列法&lt;/p>
&lt;ul>
&lt;li>冲突时采用&lt;/li>
&lt;li>线性探查&lt;/li>
&lt;li>二次探测&lt;/li>
&lt;li>伪随机&lt;/li>
&lt;/ul>
&lt;p>链表法/拉链法&lt;/p>
&lt;ul>
&lt;li>冲突时直接单链表&lt;/li>
&lt;/ul>
&lt;p>再哈希法&lt;/p>
&lt;ul>
&lt;li>输出是同一个位置就再次哈希（第二个哈希函数）&lt;/li>
&lt;/ul>
&lt;h3 id="空类包括什么成员">空类包括什么成员&lt;/h3>
&lt;p>默认构造函数、一个拷贝默认构造函数、一个默认拷贝赋值操作符和一个默认析构函数&lt;/p>
&lt;h3 id="浅拷贝和深拷贝">浅拷贝和深拷贝&lt;/h3>
&lt;p>浅拷贝/值拷贝 数据数量不变，共享同一片空间&lt;/p>
&lt;p>深拷贝 开辟一块新的空间存入数据&lt;/p>
&lt;h3 id="虚函数">虚函数&lt;/h3>
&lt;p>虚函数使用的其核心目的是&lt;strong>通过基类访问派生类定义的函数&lt;/strong>。&lt;/p>
&lt;p>有vptr（虚指针）和vtbl(虚表)&lt;/p>
&lt;p>在派生类中重写该虚函数，运行时将会根据对象的实际类型来调用相应的函数。如果对象类型是派生类，就调用派生类的函数；如果对象类型是基类，就调用基类的函数。&lt;/p>
&lt;p>纯虚函数：virtual void fun()=0。即抽象类必须在子类实现这个函数，即先有名称，没有内容，在派生类实现内容。&lt;/p>
&lt;p>抽象类是指包括至少一个纯虚函数的类。&lt;/p>
&lt;h3 id="类的大小子类继承后的影响">类的大小，子类继承后的影响&lt;/h3>
&lt;ol>
&lt;li>非静态成员变量的内存占用之和&lt;/li>
&lt;li>考虑内存对其的问题；&lt;/li>
&lt;li>&lt;a href="https://so.csdn.net/so/search?q=%E8%99%9A%E5%87%BD%E6%95%B0&amp;amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">虚函数&lt;/a>产生的额外内存开销，即虚函数表指针(Virtual Table Pointer);&lt;/li>
&lt;/ol>
&lt;p>空白类被继承后可能会被编译器优化掉&lt;/p>
&lt;p>内存相关、&lt;/p>
&lt;h3 id="new和malloc">new和malloc&lt;/h3>
&lt;p>&lt;a href="https://blog.csdn.net/weixin_43899008/article/details/123261412" target="_blank" rel="noopener">new malloc&lt;/a>&lt;/p>
&lt;p>malloc(100M)一块大小，相应的虚拟内存有多少？ （我说这个不是可以自己设么）&lt;/p>
&lt;ul>
&lt;li>new是关键字，需要编译器支持；malloc是库函数，需要头文件支持。&lt;/li>
&lt;li>new申请内存无需指定内存大小，编译器会根据类型信息自行计算。除此之外，new会调用构造函数。&lt;/li>
&lt;li>malloc必须由我们计算需要申请的字节数，需要显式指出所需内存的尺寸，并且返回后强行转换为实际类型的指针。而且malloc只管分配内存，并不能对所得的内存进行初始化，所以得到的一片新内存中，其&lt;strong>值是随机&lt;/strong>的。&lt;/li>
&lt;li>new在自由储存区分配内存，malloc在堆上分配内存。&lt;/li>
&lt;/ul>
&lt;h3 id="悬空指针和野指针">悬空指针和野指针&lt;/h3>
&lt;p>悬空指针是指一个&lt;strong>没有指向任何内存单元&lt;/strong>的指针.&lt;/p>
&lt;p>使用悬空指针报&lt;strong>段错误&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void *p = malloc(size);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">assert(p);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">free(p);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 现在 p 是“悬空指针”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">p = NULL;//// 避免“悬空指针”
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>野指针是指一个不确定其具体指向的指针，最常来自于未初始化的指针。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void *p;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 此时 p 是“野指针”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void *p = NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void *data = malloc(size);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为“野指针”可能指向任意内存段，因此它可能会损坏正常的数据，也有可能引发其他未知错误，所以C语言中的“野指针”危害性甚至比“悬空指针”还要严重。&lt;/p>
&lt;p>在实际的C语言程序开发中，定义指针时，一般都要尽量避免“野指针”的出现（赋初值）：&lt;/p>
&lt;h3 id="用c如何保证资源不泄露">用C++如何保证资源不泄露&lt;/h3>
&lt;p>遵循RAII原则。&lt;/p>
&lt;p>在初始化中获取资源 Resource acquisition is initialation&lt;/p>
&lt;p>对象管理自己的资源。&lt;/p>
&lt;p>智能指针是RAII原则的体现。&lt;/p>
&lt;h3 id="内存泄漏">内存泄漏&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>内存泄露及解决办法&lt;/strong>：&lt;/p>
&lt;p>&lt;strong>什么是内存泄露？&lt;/strong>&lt;/p>
&lt;p>简单地说就是申请了一块内存空间，使用完毕后没有释放掉。（1）new和malloc申请资源使用后，没有用delete和free释放；（2）子类继承父类时，父类析构函数不是虚函数。&lt;/p>
&lt;p>（3）Windows句柄资源使用后没有释放。&lt;/p>
&lt;p>&lt;strong>怎么检测？&lt;/strong>&lt;/p>
&lt;p>第一：良好的编码习惯，使用了内存分配的函数，一旦使用完毕,要记得使用其相应的函数释放掉。&lt;/p>
&lt;p>第二：将分配的内存的指针以链表的形式自行管理，使用完毕之后从链表中删除，程序结束时可检查改链表。&lt;/p>
&lt;p>第三：使用&lt;strong>智能指针&lt;/strong>。&lt;/p>
&lt;p>第四：一些常见的工具插件，如ccmalloc、Dmalloc、Leaky、Valgrind等等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="智能指针-shared_ptr与unique_ptr的开销比较">智能指针 shared_ptr与unique_ptr的开销比较&lt;/h3>
&lt;p>shared_ptr内部引用计数对象要通过new创建，这样所有的对象才能指向同一个引用计数变量；&lt;/p>
&lt;p>unique_ptr接近原生的性能&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/codingcs/article/details/120403980" target="_blank" rel="noopener">https://blog.csdn.net/codingcs/article/details/120403980&lt;/a>&lt;/p>
&lt;h3 id="右值引用">右值引用&lt;/h3>
&lt;p>右值引用主要用于移动语义和完美转发&lt;/p>
&lt;h3 id="如果有多个重载函数那么我根据函数名打断点gdb会怎么执行呢是只执行一个还是全部都显示出来都显示出来">如果有多个重载函数，那么我根据函数名打断点，GDB会怎么执行呢，是只执行一个还是全部都显示出来（都显示出来）&lt;/h3></description></item><item><title/><link>https://ysyyhhh.github.io/docs/language/c++/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/language/c++/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid><description>&lt;h1 id="多线程">多线程&lt;/h1>
&lt;h2 id="锁">锁&lt;/h2>
&lt;h3 id="unique_lock-和-lock_guard">unique_lock 和 lock_guard&lt;/h3>
&lt;p>unique_lock 和 lock_guard 都是 RAII 的封装，都是用来管理 mutex 的，但是 unique_lock 比 lock_guard 更加灵活，可以随时 unlock 和 lock，而 lock_guard 只能在构造的时候 lock，在析构的时候 unlock。&lt;/p>
&lt;p>unique_lock:&lt;/p>
&lt;pre>&lt;code>```cpp
std::mutex mtx;
std::unique_lock&amp;lt;std::mutex&amp;gt; lck(mtx);
lck.unlock();
lck.lock();
```
&lt;/code>&lt;/pre>
&lt;p>lock_guard:&lt;/p>
&lt;pre>&lt;code>```cpp
std::mutex mtx;
std::lock_guard&amp;lt;std::mutex&amp;gt; lck(mtx);
```
&lt;/code>&lt;/pre>
&lt;h4 id="和-condition_variable-使用时的区别">和 condition_variable 使用时的区别&lt;/h4>
&lt;p>unique_lock 和 lock_guard 都可以和 condition_variable 一起使用，但是 unique_lock 更加灵活，可以随时 unlock 和 lock，而 lock_guard 只能在构造的时候 lock，在析构的时候 unlock。&lt;/p>
&lt;p>unique_lock:&lt;/p>
&lt;pre>&lt;code>```cpp
std::mutex mtx;
std::condition_variable cv;
std::unique_lock&amp;lt;std::mutex&amp;gt; lck(mtx);
cv.wait(lck);
/*
这部分仍然被锁住
*/
lck.unlock();
lck.lock();
```
&lt;/code>&lt;/pre>
&lt;p>lock_guard:&lt;/p>
&lt;pre>&lt;code>```cpp
std::mutex mtx;
std::condition_variable cv;
std::lock_guard&amp;lt;std::mutex&amp;gt; lck(mtx);
cv.wait(lck);
/*
这部分已经被解锁
*/
```
&lt;/code>&lt;/pre></description></item><item><title/><link>https://ysyyhhh.github.io/docs/language/java/java%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/language/java/java%E4%BC%98%E5%8C%96/</guid><description/></item><item><title/><link>https://ysyyhhh.github.io/docs/language/java/java%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/language/java/java%E5%9F%BA%E7%A1%80/</guid><description>&lt;h4 id="介绍自己学的技术">介绍自己学的技术&lt;/h4>
&lt;h4 id="介绍一下springboot">介绍一下springboot&lt;/h4>
&lt;p>简化spring应用的创建及部署&lt;/p>
&lt;p>Spring Boot通过自动配置功能，降低了复杂性，同时支持基于JVM的多种开源框架，可以缩短开发时间，使开发更加简单和高效。&lt;/p>
&lt;h4 id="3mvc的dispatcherservlet的分派原理">3.mvc的dispatcherservlet的分派原理&lt;/h4>
&lt;p>
&lt;figure >
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img src="4.13%e6%bb%b4%e6%bb%b4%e5%87%86%e5%a4%87/img/image-20230413193651300.png" alt="image-20230413193651300" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;ol>
&lt;li>用户发送 请求到 前端控制器（DispatcherServlet）。&lt;/li>
&lt;li>前端控制器 请求 &lt;strong>处理器映射器&lt;/strong>（HandlerMapping）去 查找 处理器（Handler）。&lt;/li>
&lt;li>找到以后 处理器映射器（HandlerMappering）向 前端控制器 返回 执行链（HandlerExecutionChain）。&lt;/li>
&lt;li>前端控制器（DispatcherServlet）调用 &lt;strong>处理器适配器&lt;/strong>（HandlerAdapter） 去执行 处理器（Handler）。&lt;/li>
&lt;li>处理器适配器 去执行 处理器Handler。&lt;/li>
&lt;li>处理器 执行完给 处理器适配器 返回ModelAndView。&lt;/li>
&lt;li>&lt;strong>处理器适配器&lt;/strong> 向 前端控制器 返回ModelAndView。&lt;/li>
&lt;li>前端控制器 请求 &lt;strong>视图解析器&lt;/strong>（ViewResolver）去进行 视图解析。&lt;/li>
&lt;li>视图解析器 向 前端控制器返回View。&lt;/li>
&lt;li>前端控制器 对 &lt;strong>视图进行渲染&lt;/strong>。&lt;/li>
&lt;li>前端控制器 向用户&lt;strong>响应结果&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;h4 id="restful风格在mvc的分派如何解析参数这个我不知道瞎答的">restful风格在mvc的分派，如何解析参数（这个我不知道瞎答的）&lt;/h4>
&lt;p>restful 即 URL表示资源， + GET POST PUT DELETE 表示行为&lt;/p>
&lt;p>Restful风格的请求是使用 &lt;strong>url+请求方式&lt;/strong> 表示一次请求目的的，并且规范了一些的状态码，使得看到接口就知道请求要干嘛。&lt;/p>
&lt;p>RequestMappingURL&lt;/p>
&lt;p>PathVariable 获取参数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>@Controller&lt;/code>声名一个处理请求的控制器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@RequestMapping&lt;/code>请求映射地址，它存在几个子注解对于实现&lt;code>REST&lt;/code>风格来说更加具有语义性&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;code>GETMapping&lt;/code> GET请求&lt;/li>
&lt;li>&lt;code>PUTMapping&lt;/code> PUT请求&lt;/li>
&lt;li>&lt;code>POSTMapping&lt;/code> POST请求&lt;/li>
&lt;li>&lt;code>DELETEMapping&lt;/code> DELETE请求&lt;code>sponseBody&lt;/code> 将响应内容转换为&lt;code>JSON&lt;/code>格式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@RequestBody&lt;/code> 请求内容转换为&lt;code>JSON&lt;/code>格式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@PathVariable(&amp;quot;id&amp;quot;)&lt;/code>用于绑定一个参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@RESTController&lt;/code> 等同于&lt;code>@Controller&lt;/code>+&lt;code>@ResponseBody&lt;/code>在类上写了这个注解，标识这个类的所有方法只返回数据，而不进行视图跳转&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="java集合体系">Java集合体系&lt;/h4>
&lt;h4 id="hashmap原理">HashMap原理&lt;/h4>
&lt;p>数组+链表+红黑树。&lt;/p>
&lt;p>那么在jdk1.8的HashMap中，当链表的长度超过8时，链表会自动转化为红黑树，优化查询速度。&lt;/p>
&lt;p>put原理&lt;/p>
&lt;p>同时还有一个区别：发生“hash冲突”时，我们上面的做法是“头插法”，这是jdk1.7的做法，而在jdk1.8中，使用的是“尾插法”。&lt;/p>
&lt;h4 id="concurrenthashmap原理">ConcurrentHashMap原理&lt;/h4>
&lt;p>红黑树可用别的数据结构代替吗&lt;/p>
&lt;p>跳表与红黑树比较&lt;/p>
&lt;p>线程安全的类有哪些，为什么线程安全&lt;/p>
&lt;p>索引原理&lt;/p>
&lt;p>B+查询过程&lt;/p>
&lt;p>聚簇索引与非聚簇索引&lt;/p>
&lt;p>快排思想&lt;/p>
&lt;p>快排时间复杂度&lt;/p>
&lt;p>线程池&lt;/p>
&lt;p>线程池的使用&lt;/p>
&lt;p>1个10G大小文件，如何得前100个最大数字&lt;/p>
&lt;h1 id="java">Java&lt;/h1>
&lt;h2 id="集合类">集合类&lt;/h2>
&lt;h4 id="操作字符串用什么类">操作字符串用什么类&lt;/h4>
&lt;p>Java中提供了String类和StringBuilder类来操作字符串。String类是不可变的，每次对字符串进行修改都会创建一个新的字符串对象，而StringBuilder类是可变的，可以在原字符串上进行修改。&lt;/p>
&lt;h4 id="常用集合类">常用集合类&lt;/h4>
&lt;p>Java中常用的集合类包括List、Set、Map等。HashMap是一种基于哈希表的Map实现，其底层实现主要包括数组和链表（或红黑树）两部分。数组用来存储哈希桶，链表（或红黑树）用来解决哈希冲突。&lt;/p>
&lt;h4 id="hashmap底层实现">hashmap底层实现&lt;/h4>
&lt;p>HashMap是一种基于哈希表的Map实现，其底层实现主要包括数组和链表（或红黑树）两部分。数组用来存储哈希桶，链表（或红黑树）用来解决哈希冲突。&lt;/p>
&lt;p>具体来说，HashMap中的每个元素都是一个键值对，其中键和值都可以为null。当向HashMap中添加元素时，首先根据键的哈希值计算出该元素在数组中的位置，如果该位置上已经有元素了，则需要使用链表（或红黑树）来解决哈希冲突。如果链表（或红黑树）中已经存在该键，则更新该键对应的值，否则将该键值对添加到链表（或红黑树）的末尾。&lt;/p>
&lt;p>当链表（或红黑树）的长度超过一定阈值时，链表（或红黑树）会被转换为红黑树（或链表），以提高查询效率。当链表（或红黑树）的长度小于等于6时，会使用链表来存储元素，当长度大于6时，会使用红黑树来存储元素。&lt;/p>
&lt;p>在HashMap中，数组的长度是2的幂次方，这是为了使哈希值的高位和低位都能够参与到计算中，提高哈希值的均匀性。同时，数组的长度也决定了HashMap中哈希桶的数量，当哈希桶的数量过少时，容易导致哈希冲突，影响查询效率；当哈希桶的数量过多时，会浪费内存空间。因此，在创建HashMap时，需要根据实际情况来选择合适的数组长度。&lt;/p>
&lt;h4 id="hashmap17和18区别">hashmap1.7和1.8区别&lt;/h4>
&lt;p>HashMap1.7和1.8的主要区别在于底层实现方式的改变。1.7中使用的是数组+链表的方式来解决哈希冲突，而1.8中引入了红黑树来优化链表过长的情况，提高了查询效率。此外，1.8中还引入了一些新的方法和特性，如forEach()方法、Lambda表达式等。&lt;/p>
&lt;h4 id="hashmap怎么让他线程安全的方法">hashmap怎么让他线程安全的方法&lt;/h4>
&lt;p>HashMap本身是非线程安全的，如果需要在多线程环境下使用HashMap，可以使用以下几种方法来保证线程安全：&lt;/p>
&lt;ol>
&lt;li>使用Collections.synchronizedMap()方法将HashMap转换为线程安全的Map。&lt;/li>
&lt;li>使用ConcurrentHashMap代替HashMap，ConcurrentHashMap是一种线程安全的Map实现。&lt;/li>
&lt;li>使用读写锁来保证HashMap的线程安全性，即使用ReentrantReadWriteLock来控制读写操作的并发访问。&lt;/li>
&lt;/ol>
&lt;h4 id="hashset了解过吗">hashset了解过吗&lt;/h4>
&lt;p>HashSet是一种基于哈希表的Set实现，其底层实现与HashMap类似，只不过HashSet中存储的是不重复的元素。HashSet中的元素是无序的，不保证元素的插入顺序和遍历顺序一致。&lt;/p>
&lt;h4 id="判断某对象是否在set中存在需要重写哪些方法">判断某对象是否在set中存在，需要重写哪些方法&lt;/h4>
&lt;p>为了判断某个对象是否在Set中存在，需要重写该对象的hashCode()和equals()方法。hashCode()方法用于计算对象的哈希值，equals()方法用于比较两个对象是否相等。在重写这两个方法时，需要保证相等的对象具有相同的哈希值，否则会导致Set中出现重复元素。&lt;/p>
&lt;h2 id="jvm的内存模型">jvm的内存模型&lt;/h2>
&lt;h3 id="integer-a--128b128两个相等吗">integer a = 128,b=128，两个相等吗&lt;/h3>
&lt;p>&lt;a href="https://blog.csdn.net/qq_42208194/article/details/117536553" target="_blank" rel="noopener">https://blog.csdn.net/qq_42208194/article/details/117536553&lt;/a>&lt;/p>
&lt;p>在Java中，对于Integer类型的对象，如果其值在-128到127之间，会被缓存到常量池中，因此当创建值在该范围内的Integer对象时，会直接从常量池中获取已有的对象。而对于值不在该范围内的Integer对象，则会创建新的对象。&lt;/p>
&lt;p>因此，对于Integer a = 128, b = 128，由于128不在-128到127之间，因此会创建两个不同的Integer对象，即a和b不相等。而对于Integer a = 127, b = 127，由于127在-128到127之间，因此会从常量池中获取同一个Integer对象，即a和b相等。&lt;/p>
&lt;h3 id="什么叫零拷贝">什么叫零拷贝&lt;/h3>
&lt;p>零拷贝（Zero Copy）是一种数据传输技术，它可以在不需要将数据从一个缓冲区复制到另一个缓冲区的情况下，将数据从一个地方传输到另一个地方。在零拷贝技术中，数据可以直接从磁盘、网络或其他设备中读取，然后通过DMA（Direct Memory Access）技术直接写入内存中，从而避免了数据的多次复制，提高了数据传输的效率。&lt;/p>
&lt;p>在Java中，零拷贝技术可以通过NIO（New I/O）来实现。NIO提供了一种基于通道（Channel）和缓冲区（Buffer）的I/O模型，可以直接将数据从通道中读取到缓冲区中，或者将缓冲区中的数据直接写入通道中，从而避免了数据的多次复制。&lt;/p>
&lt;h3 id="为什么用常量池有哪些常量池">为什么用常量池，有哪些常量池&lt;/h3>
&lt;p>&lt;a href="https://blog.csdn.net/qq_41376740/article/details/80338158" target="_blank" rel="noopener">https://blog.csdn.net/qq_41376740/article/details/80338158&lt;/a>&lt;/p>
&lt;p>常量池是Java中的一种特殊的内存区域，用于存储常量和符号引用。在Java中，常量池主要有以下几种：&lt;/p>
&lt;ol>
&lt;li>字面量常量池：用于存储字符串、数字等字面量常量。&lt;/li>
&lt;li>符号引用常量池：用于存储类、方法、字段等符号引用。&lt;/li>
&lt;li>运行时常量池：用于存储在类加载时解析的常量池信息，包括字面量常量池和符号引用常量池中的内容。&lt;/li>
&lt;/ol>
&lt;p>使用常量池的主要目的是为了提高程序的性能和减少内存的占用。由于常量池中的常量是唯一的，因此可以避免重复创建相同的常量对象，从而减少内存的占用。同时，由于常量池中的常量是在编译期间就确定的，因此可以在运行时直接使用，避免了重复计算和创建对象的开销，提高了程序的性能。&lt;/p>
&lt;h2 id="线程">线程&lt;/h2>
&lt;h4 id="java创建线程的方法">Java创建线程的方法&lt;/h4>
&lt;p>Java中创建线程的方法主要有两种：&lt;/p>
&lt;ol>
&lt;li>继承Thread类并重写run()方法。&lt;/li>
&lt;li>实现Runnable接口并实现run()方法，然后将其作为参数传递给Thread类的构造方法。&lt;/li>
&lt;/ol>
&lt;h4 id="查看线程的执行结果怎么拿到">查看线程的执行结果，怎么拿到&lt;/h4>
&lt;p>可以通过线程的join()方法来等待线程执行完毕，并获取线程的执行结果。join()方法会阻塞当前线程，直到被调用的线程执行完毕。&lt;/p>
&lt;p>另外，可以通过线程的返回值来获取线程的执行结果。如果线程需要返回结果，可以在run()方法中返回一个值，然后在调用线程的地方通过Thread对象的get()方法获取返回值。&lt;/p>
&lt;h4 id="有哪些实现好的线程池既然他们不推荐为什么java官方还要给你">有哪些实现好的线程池，既然他们不推荐，为什么Java官方还要给你&lt;/h4>
&lt;p>Java中提供了多种线程池实现，包括ThreadPoolExecutor、ScheduledThreadPoolExecutor、ForkJoinPool等。这些线程池实现都是经过优化和测试的，可以满足大部分场景的需求。&lt;/p>
&lt;p>虽然Java官方不推荐直接使用这些线程池实现，但是它们提供了一种可靠、高效的线程池实现，可以作为开发者自己实现线程池的参考。&lt;/p>
&lt;h4 id="阻塞队列有哪些">阻塞队列有哪些&lt;/h4>
&lt;p>Java中提供了多种阻塞队列实现，包括ArrayBlockingQueue、LinkedBlockingQueue、SynchronousQueue等。这些阻塞队列实现都是线程安全的，可以在多线程环境下使用。&lt;/p>
&lt;h4 id="线程池的工作流程">线程池的工作流程&lt;/h4>
&lt;p>线程池的工作流程如下：&lt;/p>
&lt;ol>
&lt;li>当有任务需要执行时，线程池会从线程池中获取一个空闲线程来执行任务。&lt;/li>
&lt;li>如果线程池中没有空闲线程，则会根据线程池的配置创建新的线程来执行任务。&lt;/li>
&lt;li>当任务执行完毕后，线程会返回线程池，并等待下一次任务的分配。&lt;/li>
&lt;/ol>
&lt;h4 id="线程池拒绝策略有哪些">线程池拒绝策略有哪些&lt;/h4>
&lt;p>线程池的拒绝策略主要有以下几种：&lt;/p>
&lt;ol>
&lt;li>AbortPolicy：直接抛出RejectedExecutionException异常。&lt;/li>
&lt;li>CallerRunsPolicy：将任务交给调用线程来执行。&lt;/li>
&lt;li>DiscardPolicy：直接丢弃任务，不做任何处理。&lt;/li>
&lt;li>DiscardOldestPolicy：丢弃队列中最老的任务，然后尝试重新提交任务。&lt;/li>
&lt;/ol>
&lt;h4 id="线程池的参数有哪些">线程池的参数有哪些&lt;/h4>
&lt;p>线程池的参数主要包括以下几个：&lt;/p>
&lt;ol>
&lt;li>corePoolSize：核心线程数，即线程池中保留的线程数。&lt;/li>
&lt;li>maximumPoolSize：最大线程数，即线程池中允许的最大线程数。&lt;/li>
&lt;li>keepAliveTime：线程空闲时间，即当线程池中的线程空闲时间超过该值时，多余的线程会被销毁。&lt;/li>
&lt;li>unit：时间单位，用于指定keepAliveTime的时间单位。&lt;/li>
&lt;li>workQueue：任务队列，用于存储等待执行的任务。&lt;/li>
&lt;li>threadFactory：线程工厂，用于创建新的线程。&lt;/li>
&lt;li>handler：拒绝策略，用于处理无法处理的任务。&lt;/li>
&lt;/ol>
&lt;h2 id="jwt">JWT&lt;/h2>
&lt;h3 id="jwt里面有什么httpsblogcsdnnetweixin_36378232articledetails113022878">jwt&lt;a href="https://blog.csdn.net/weixin_36378232/article/details/113022878" target="_blank" rel="noopener">里面有什么&lt;/a>&lt;/h3>
&lt;p>JWT主要由三个部分组成(前两部分可以通过base64解密得到)：头部(HEADER)，载荷(PAYLOAD)，签证(SIGNATURE)。&lt;/p>
&lt;ul>
&lt;li>头部描述该JWT的最基本信息，主要包含两个部分：声明类型 JWT 和声明加密算法(通常直接使用HMAC，SHA256)。
&lt;ul>
&lt;li>&lt;code>{ &amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;, //第三段字符串的不可逆加密类型HS256 &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot; //token类型JWT }&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>载荷主要是存放有效信息为自定义值，这些信息按照职能可以分成三个部分
&lt;ul>
&lt;li>标准的注册声明
&lt;ul>
&lt;li>人:签发者,jwt面向用户,接收jwt的一方.&lt;/li>
&lt;li>时间相关,过期时间,不可用时间.签发时间&lt;/li>
&lt;li>唯一标识, 可用于一次性token&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>公共的声明:公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息。但不建议添加敏感信息，因为该部分在客户端可解密。&lt;/li>
&lt;li>私有的声明:私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为BASE64是对称解密的，意味着该部分信息可以归类为明文信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>签证
&lt;ul>
&lt;li>先将第一段和第二段的密文&lt;strong>拼接&lt;/strong>起来&lt;/li>
&lt;li>对拼接起来的密文字符串和自定义的盐进行上边&lt;strong>指定的HS256加密&lt;/strong>&lt;/li>
&lt;li>&lt;strong>对HS256加密后的密文再做base64加密&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="要是想要传输密码怎么解决盐值怎么存储">要是想要传输密码，怎么解决？盐值怎么存储？&lt;/h3>
&lt;p>SHA,&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/biubiubiubibibi/article/details/127579426" target="_blank" rel="noopener">BCryptPasswordEncoder&lt;/a>&lt;/p>
&lt;p>盐存在密文里.&lt;/p>
&lt;p>status字段是什么类型&lt;/p>
&lt;p>函数的返回值类型。&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/language/java/jvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/language/java/jvm/</guid><description/></item><item><title/><link>https://ysyyhhh.github.io/docs/language/java/spring/code%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/language/java/spring/code%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</guid><description>&lt;h5 id="service层的返回值">Service层的返回值&lt;/h5>
&lt;p>service 做校验，如果非法，直接抛异常 + 全局异常处理&lt;/p>
&lt;p>controller 正常就是组合 service ，返回前端需要的数据。&lt;/p>
&lt;p>java异常效率低下是因为抛出异常会遍历所有涉及堆栈，具体代码在基类Throwable的fillInStackTrace()方法里。但其实可以通过在自定义异常中重写fillInStackTrace()来大幅度提高异常效率。&lt;/p>
&lt;p>&lt;a href="https://segmentfault.com/q/1010000020840854" target="_blank" rel="noopener">https://segmentfault.com/q/1010000020840854&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/qq_41107231/article/details/115874974" target="_blank" rel="noopener">https://blog.csdn.net/qq_41107231/article/details/115874974&lt;/a>&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/language/java/spring/spring-cloud-alibaba/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/language/java/spring/spring-cloud-alibaba/</guid><description>&lt;h1 id="微服务">微服务&lt;/h1>
&lt;p>各个springboot&lt;/p>
&lt;h1 id="nacos注册中心">Nacos注册中心&lt;/h1>
&lt;h4 id="核心功能">核心功能&lt;/h4>
&lt;p>服务注册：&lt;/p>
&lt;p>服务心跳：&lt;/p>
&lt;p>服务同步：&lt;/p>
&lt;p>服务发现：拿到微服务地址&lt;/p>
&lt;p>服务调用：&lt;/p>
&lt;p>服务健康检查：&lt;/p>
&lt;h2 id="ribbon-负载均衡">Ribbon 负载均衡&lt;/h2>
&lt;h2 id="feign-优雅地调用远程服务">feign 优雅地调用远程服务&lt;/h2>
&lt;p>解决的是微服务之间调用问题&lt;/p>
&lt;h2 id="sentinel-服务容错">sentinel 服务容错&lt;/h2>
&lt;p>解决服务雪崩等问题&lt;/p>
&lt;h2 id="服务网关">服务网关&lt;/h2>
&lt;h3 id="解决的问题">解决的问题&lt;/h3>
&lt;p>解决客户端访问微服务的问题：&lt;/p>
&lt;ol>
&lt;li>维护微服务的多个地址&lt;/li>
&lt;li>认证 鉴权复杂&lt;/li>
&lt;li>跨域问题&lt;/li>
&lt;/ol>
&lt;p>所谓的API网关，就是指系统的统一入口。对于客服端来说，它封装了应用程序的内部结构，为客户端提供统一服务，一些&lt;strong>与业务本身功能无关&lt;/strong>的&lt;strong>公共逻辑&lt;/strong>可以在这里实现，诸如&lt;strong>认证、鉴权、监控、路由转发&lt;/strong>等等。&lt;/p>
&lt;h3 id="目前主流的解决方案">目前主流的解决方案&lt;/h3>
&lt;ul>
&lt;li>Ngnix+lua&lt;/li>
&lt;/ul>
&lt;p>使用nginx的&lt;strong>反向代理和负载均衡&lt;/strong>可实现对api服务器的负载均衡及高可用&lt;/p>
&lt;p>lua是一种脚本语言,可以来编写一些简单的逻辑, nginx支持lua脚本&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Kong&lt;/p>
&lt;p>基于Nginx+Lua开发，性能高，稳定，有多个可用的插件(限流、鉴权等等)可以开箱即用。 问题：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>只支持Http协议；二次开发，自由扩展困难；提供管理API，缺乏更易用的管控、配置方式。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Zuul&lt;/p>
&lt;p>springboot1系列用的，Netflix开源的网关，功能丰富，使用JAVA开发，易于二次开发。Zuul 1.0 有问题：缺乏管控，无法动态配置；依赖组件较多；处理Http请求依赖的是Web容器，性能不如Nginx。&lt;/p>
&lt;p>Zuul有2.0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Spring Cloud Gateway&lt;/p>
&lt;p>Spring公司为了替换Zuul而开发的网关服务，将在下面具体介绍。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Gateway&lt;/p>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>其实现依赖Netty与WebFlux，不是传统的Servlet编程模型，学习成本高&lt;/li>
&lt;li>不能将其部署在Tomcat、Jetty等Servlet容器里，只能打成jar包执行&lt;/li>
&lt;li>需要Spring Boot 2.0及以上的版本，才支持&lt;/li>
&lt;/ul>
&lt;h3 id="路由-route">路由 route&lt;/h3>
&lt;p>路由(Route) 是 gateway 中最基本的组件之一，表示一个具体的路由信息载体。主要定义了下面的几个信息:&lt;/p>
&lt;p>id，路由标识符，区别于其他 Route，默认是一个随机的UID，最好自己起一个###&lt;/p>
&lt;p>uri，路由指向的目的地 uri，即客户端请求最终被转发到的微服务。&lt;/p>
&lt;p>order，用于多个 Route 之间的排序，数值越小排序越靠前，匹配优先级越高。&lt;/p>
&lt;p>predicate，断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由。&lt;/p>
&lt;p>filter，过滤器用于修改请求和响应信息。&lt;/p>
&lt;h3 id="断言">断言&lt;/h3>
&lt;p>predicate 用于条件判断，只有全部的断言为真，才实现路由转发。&lt;/p>
&lt;p>4.5.1 内置路由断言工厂&lt;/p>
&lt;p>可以自定义断言&lt;/p>
&lt;h3 id="过滤器">过滤器&lt;/h3>
&lt;ol>
&lt;li>作用：在请求过程中，对请求和响应做手脚&lt;/li>
&lt;li>生命周期：PRE 和 POST&lt;/li>
&lt;li>分类：局部过滤器（作用在一个路由上），全局过滤器（全部路由是）&lt;/li>
&lt;/ol>
&lt;p>PRE生命周期：在被路由之前调用，跨域实现验证身份，集群。&lt;/p>
&lt;p>POST生命周期：可以添加标准的Header，收集统计信息。&lt;/p>
&lt;h4 id="局部过滤器-gateaway">局部过滤器 GateAway&lt;/h4>
&lt;p>内置有很多，可以自定义&lt;/p>
&lt;h4 id="全局过滤器">全局过滤器&lt;/h4>
&lt;h4 id="网关限流">网关限流&lt;/h4>
&lt;p>用sentinel&lt;/p>
&lt;h2 id="mq消息队列">MQ消息队列&lt;/h2>
&lt;p>一般用于请求加快&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/language/java/spring/spring%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/language/java/spring/spring%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</guid><description>&lt;h5 id="jpa注解">JPA注解&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://www.jianshu.com/p/38d247f02724
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="安全">安全&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://blog.csdn.net/qq_37023928/article/details/116777630
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="解决前后端分离的跨域问题">解决前后端分离的跨域问题&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://www.yisu.com/zixun/606000.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="创建test类注解">创建Test类注解&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@RunWith(SpringJUnit4ClassRunner.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@SpringBootTest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">依赖
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;dependency&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;artifactId&amp;gt;spring-boot-test&amp;lt;/artifactId&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/dependency&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;dependency&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/dependency&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="开启services">开启services&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Views -&amp;gt; Tool Windows -&amp;gt; Services
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="spring容器中找不到servletwebserverfactory类出现的异常">&lt;strong>Spring容器中找不到ServletWebServerFactory类出现的异常&lt;/strong>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://cloud.tencent.com/developer/article/1893349
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/language/java/spring/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/language/java/spring/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</guid><description>&lt;h2 id="实体类命名">实体类命名&lt;/h2>
&lt;p>1.分层领域模型规约：&lt;/p>
&lt;pre>&lt;code>• DO（ Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。
• DTO（ Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。
• BO（ Business Object）：业务对象。 由Service层输出的封装业务逻辑的对象。
• AO（ Application Object）：应用对象。 在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。
• VO（ View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。
• POJO（ Plain Ordinary Java Object）：在本手册中， POJO专指只有setter/getter/toString的简单类，包括DO/DTO/BO/VO等。
• Query：数据查询对象，各层接收上层的查询请求。 注意超过2个参数的查询封装，禁止使用Map类来传输。
&lt;/code>&lt;/pre>
&lt;p>2.领域模型命名规约：&lt;/p>
&lt;pre>&lt;code>• 数据对象：xxxDO，xxx即为数据表名。
• 数据传输对象：xxxDTO，xxx为业务领域相关的名称。
• 展示对象：xxxVO，xxx一般为网页名称。 • POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO。
&lt;/code>&lt;/pre>
&lt;h1 id="restful-接口风格">Restful 接口风格&lt;/h1></description></item><item><title/><link>https://ysyyhhh.github.io/docs/language/java/spring/%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/language/java/spring/%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid><description>&lt;p>jar包启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">nohup java -jar -Xms128M -Xmx128M -XX:PermSize=128M -XX:MaxPermSize=128M jar包名.jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>nacos启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sh /home/tmp/nacos/bin/startup.sh -m standalone
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>服务器启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd /home/mind_wings
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nohup java -jar -Xms128M -Xmx128M -XX:PermSize=128M -XX:MaxPermSize=128M service-user-1.0-SNAPSHOT.jar &amp;amp;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nohup java -jar -Xms128M -Xmx128M -XX:PermSize=128M -XX:MaxPermSize=128M service-timetable-1.0-SNAPSHOT.jar &amp;amp;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nohup java -jar -Xms128M -Xmx128M -XX:PermSize=128M -XX:MaxPermSize=128M -noverify api-gateway-1.0-SNAPSHOT.jar &amp;amp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>出现过的问题&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">api-gateway 启动失败
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://blog.csdn.net/crxk_/article/details/103196146
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tips/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tips/docker/</guid><description>&lt;h1 id="docker相关技巧">docker相关技巧&lt;/h1>
&lt;h2 id="记把深度学习项目装入docker">记把深度学习项目装入docker&lt;/h2>
&lt;p>安装时出现选项&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># RUN apt-get install libglib2.0-dev -y&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 由于安装libglib2.0-dev的时候，bash会有交互操作叫你选择对应的时区，在docker build的时候没有交互的，所以需要加上DEBIAN_FRONTEND=&amp;#34;noninteractive&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> &lt;span class="nv">DEBIAN_FRONTEND&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;noninteractive&amp;#34;&lt;/span> apt -y install libglib2.0-dev&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker清理">docker清理&lt;/h2>
&lt;p>在win10下，docker是基于wsl2的，所以docker的镜像和容器都是在wsl2的文件系统中。
所以在清理完docker的镜像和容器后，需要对wsl的盘进行压缩。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 停止所有的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stop &lt;span class="k">$(&lt;/span>docker ps -aq&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除所有未使用的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker volume prune
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除所有未使用的镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker image prune -a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除缓存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker builder prune
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看当前占用的空间&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker system df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对wsl2的盘进行压缩&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wsl --shutdown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看wsl2的盘&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wsl --list -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用diskpart压缩&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">diskpart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># open window Diskpart&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span> vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;D:\ubuntu\wsl\docker-desktop-data\ext4.vhdx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">attach vdisk &lt;span class="nb">readonly&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">compact vdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">detach vdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker中安装conda">docker中安装conda&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 安装conda&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> apt-get install -y wget&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># yhyu13 : donwload anaconda package &amp;amp; install&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> wget &lt;span class="s2">&amp;#34;https://repo.anaconda.com/archive/Anaconda3-2023.03-1-Linux-x86_64.sh&amp;#34;&lt;/span> &lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> sh Anaconda3-2023.03-1-Linux-x86_64.sh -b -p /opt/conda&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># RUN rm /anaconda.sh &lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;. /opt/conda/etc/profile.d/conda.sh&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># yhyu13 : add conda to path &lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> PATH /opt/conda/bin:/opt/conda/condabin:&lt;span class="nv">$PATH&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-compose-使用gpu">docker-compose 使用gpu&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.7&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">pytorch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runtime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nvidia&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">NVIDIA_VISIBLE_DEVICES=all&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">NVIDIA_DRIVER_CAPABILITIES=all&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">.:/workspace&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;8888:8888&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;6006:6006&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bash -c &amp;#34;jupyter notebook --ip&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="wsl-盘迁移到非系统盘">wsl 盘迁移到非系统盘&lt;/h2>
&lt;p>一般情况下 wsl盘的位置在
&lt;code>C:\Users\&amp;lt;用户名&amp;gt;\AppData\Local\Docker\wsl&lt;/code>&lt;/p>
&lt;p>docker的盘在
&lt;code>C:\Users\&amp;lt;用户名&amp;gt;\AppData\Local\Docker\wsl\data&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1. 停止wsl&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wsl --shutdown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2. 查看wsl状态&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wsl --list -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 可以看到docker有两个wsl，一个是docker-desktop-data，一个是docker-desktop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 只需要迁移docker-desktop-data即可,另一个很小&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 3. 迁移wsl&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wsl --export Ubuntu-20.04 D:&lt;span class="se">\u&lt;/span>buntu&lt;span class="se">\w&lt;/span>sl&lt;span class="se">\U&lt;/span>buntu-20.04.tar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 4. 删除wsl&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wsl --unregister Ubuntu-20.04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 5. 查看是否删除成功&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wsl --list -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 6. 导入wsl&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wsl --import Ubuntu-20.04 D:&lt;span class="se">\u&lt;/span>buntu&lt;span class="se">\w&lt;/span>sl&lt;span class="se">\U&lt;/span>buntu-20.04 D:&lt;span class="se">\u&lt;/span>buntu&lt;span class="se">\w&lt;/span>sl&lt;span class="se">\U&lt;/span>buntu-20.04.tar --version &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 7. 查看是否导入成功&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wsl --list -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-中设置特定版本的python">docker 中设置特定版本的python&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建一个基础镜像 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM ubuntu:20.04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 重置apt-get&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN rm -rf /etc/apt/sources.list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装conda&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># yhyu13 : install additional packages&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置apt的源为tsinghua镜像源&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN sed -i &lt;span class="s1">&amp;#39;s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&amp;#39;&lt;/span> /etc/apt/sources.list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y curl wget
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装conda&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm Miniconda3-latest-Linux-x86_64.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建conda环境并安装python&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN /opt/conda/bin/conda create -n py38 &lt;span class="nv">python&lt;/span>&lt;span class="o">=&lt;/span>3.8.5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ENV PATH /opt/conda/envs/py38/bin:&lt;span class="nv">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker中使用display">docker中使用display&lt;/h2>
&lt;p>在启动时需要设置环境变量DISPLAY&lt;/p>
&lt;h3 id="win下的情况">win下的情况&lt;/h3>
&lt;p>参考&lt;a href="https://www.cnblogs.com/larva-zhh/p/10531824.html" target="_blank" rel="noopener">在Docker for Windows中运行GUI程序&lt;/a>&lt;/p>
&lt;h2 id="前后端项目静态资源转发">前后端项目静态资源转发&lt;/h2>
&lt;p>后端 springboot时：
把静态资源放在static目录下，然后在application中配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">mvc&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">static-path-pattern&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/static/**&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">static-locations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">classpath:/static/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果设置了拦截器，需要在拦截器上加入&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Configuration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">WebMvcConfig&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">WebMvcConfigurer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CorsInterceptor&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">corsInterceptor&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CorsInterceptor&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">addInterceptors&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">InterceptorRegistry&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">registry&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">registry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">addInterceptor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">corsInterceptor&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">addPathPatterns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/**&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">addResourceHandlers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ResourceHandlerRegistry&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">registry&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">registry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">addResourceHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/static/**&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">addResourceLocations&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;classpath:/static/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;file:static/&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>jar 包和静态路径关系&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-md" data-lang="md">&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> .jar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> static
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前端，需要在nginx上加入转发后访问静态路径后缀。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">location&lt;/span> &lt;span class="s">/api&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">rewrite&lt;/span> &lt;span class="s">^/api(.*)&lt;/span> &lt;span class="nv">$1&lt;/span> &lt;span class="s">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">proxy_pass&lt;/span> &lt;span class="nv">$SERVER_URL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">Host&lt;/span> &lt;span class="nv">$host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">X-Real-IP&lt;/span> &lt;span class="nv">$remote_addr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">X-Forwarded-For&lt;/span> &lt;span class="nv">$proxy_add_x_forwarded_for&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">X-Forwarded-Photo&lt;/span> &lt;span class="nv">$scheme&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">location&lt;/span> &lt;span class="p">~&lt;/span>&lt;span class="sr">*.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt|swf|xml|woff|woff2|ttf|eot|svg)$&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">rewrite&lt;/span> &lt;span class="s">^/api(.*)&lt;/span> &lt;span class="nv">$1&lt;/span> &lt;span class="s">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">proxy_pass&lt;/span> &lt;span class="nv">$SERVER_URL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">proxy_redirect&lt;/span> &lt;span class="no">off&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tips/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tips/linux/</guid><description>&lt;h1 id="linux">Linux&lt;/h1>
&lt;h2 id="系统资源相关">系统资源相关&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看内存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">free -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看cpu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat /proc/cpuinfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看cpu使用情况&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">top
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看GPU使用情况&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nvidia-smi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看磁盘&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">df -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看系统版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat /etc/os-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看系统信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uname -a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 列出所有文件夹和文件 显示占用空间&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">du -sh *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看文件夹大小&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">du -sh folder_name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看文件大小&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">du -sh file_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="用户相关">用户相关&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建用户&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">useradd -m -s /bin/bash -d /home/username username
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 解释: -m 创建用户目录, -s 指定shell, -d 指定用户目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置密码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">passwd username
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除用户&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">userdel -r username
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加用户的sudo权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 编辑sudoers文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vi /etc/sudoers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 在root ALL=(ALL) ALL下面添加&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">username &lt;span class="nv">ALL&lt;/span>&lt;span class="o">=(&lt;/span>ALL&lt;span class="o">)&lt;/span> ALL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看用户组&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">groups username
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改用户组&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usermod -g groupname username
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看所有用户&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat /etc/passwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="目录挂载">目录挂载&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看挂载&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">df -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 挂载目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mount /dev/sdb1 /home/username/data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 卸载目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">umount /home/username/data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 挂载硬盘&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 查看硬盘&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fdisk -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 格式化硬盘&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fdisk /dev/sdb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 格式化为ext4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkfs.ext4 /dev/sdb1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>挂载目录并立即生效&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 挂载目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mount /dev/sdb1 /home/username/data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 立即生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mount -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="文件">文件&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 带权限复制&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp -rp &lt;span class="nb">source&lt;/span> dest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 远程连接复制文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">scp -r username@ip:/home/username/data /home/username/data
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="工具">工具&lt;/h2>
&lt;h3 id="压缩解压缩">压缩解压缩&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 压缩&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar -czvf filename.tar.gz foldername
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 解压&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar -xzvf filename.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">### 定时脚本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">```shell
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 查看定时脚本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">crontab -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="curl">curl&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 下载文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -o filename url
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="系统路径变量">系统路径/变量&lt;/h2>
&lt;p>持久化添加/改变系统路径/变量&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加到系统路径&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export PATH=$PATH:/home/username/bin&amp;#39;&lt;/span> &amp;gt;&amp;gt; /etc/profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 立即生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> /etc/profile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tool">tool&lt;/h2>
&lt;h3 id="ssh">ssh&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 生成密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh-keygen -t rsa -C &lt;span class="s2">&amp;#34;{email}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat ~/.ssh/id_rsa.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="apt">apt&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置tsinghua源&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo sed -i &lt;span class="s1">&amp;#39;s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&amp;#39;&lt;/span> /etc/apt/sources.list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 更新源&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tips/piplineaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tips/piplineaction/</guid><description>&lt;p>&lt;a href="https://docs.github.com/en/actions/migrating-to-github-actions/manual-migrations/migrating-from-gitlab-cicd-to-github-actions" target="_blank" rel="noopener">github action&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.gitlab.com/ee/ci/" target="_blank" rel="noopener">gitlab pipline&lt;/a>&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tips/server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tips/server/</guid><description>&lt;h1 id="服务器">服务器&lt;/h1>
&lt;h2 id="scp传输文件">scp传输文件&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 本地到远程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">scp -r /home/username/data username@ip:/home/username/data
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tips/windows%E4%B8%8B%E7%9A%84%E5%AD%90%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tips/windows%E4%B8%8B%E7%9A%84%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid><description>&lt;h1 id="windows-下的子系统">windows 下的子系统&lt;/h1>
&lt;h2 id="wsl">wsl&lt;/h2>
&lt;p>pass&lt;/p>
&lt;h2 id="适用于android的windows子系统">适用于Android的Windows子系统&lt;/h2></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/docker/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/docker/docker/</guid><description>&lt;h1 id="docker-usage">docker Usage&lt;/h1>
&lt;h2 id="多阶段构建docker镜像">多阶段构建docker镜像&lt;/h2>
&lt;p>多阶段构建的修改不会保留到下一阶段，只有COPY和ADD命令会保留到下一阶段&lt;/p>
&lt;p>usages：&lt;/p>
&lt;ul>
&lt;li>第一阶段：编译/打包程序依赖&lt;/li>
&lt;/ul>
&lt;p>多阶段用途：&lt;/p>
&lt;ul>
&lt;li>缩小镜像体积&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="新系统build时出现cannot-autolaunch-d-bus-without-x11-display">新系统build时出现&lt;code>Cannot autolaunch D-Bus without X11 $DISPLAY&lt;/code>&lt;/h2>
&lt;p>docker 拉取包时需要登录.&lt;/p>
&lt;p>问题出在Linux缺少一个密码管理包gnupg，它用于加密，我们在登录时需要这个包将密码加密后才能完成，因此直接安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt install gnupg2 pass
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/docker/docker%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/docker/docker%E5%91%BD%E4%BB%A4/</guid><description>&lt;h1 id="docker命令">Docker命令&lt;/h1>
&lt;h2 id="安装docker">安装docker&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt -y update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt -y upgrade
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt -y full-upgrade
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装依赖&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加官方GPG密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -fsSL https://download.docker.com/linux/ubuntu/gpg &lt;span class="p">|&lt;/span> sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#添加仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;deb [arch=&lt;/span>&lt;span class="k">$(&lt;/span>dpkg --print-architecture&lt;span class="k">)&lt;/span>&lt;span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu &lt;/span>&lt;span class="k">$(&lt;/span>lsb_release -cs&lt;span class="k">)&lt;/span>&lt;span class="s2"> stable&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 更新apt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt -y update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装docker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装docker-compose&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install -y docker-compose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>centos 6.9 下安装docker&lt;/p>
&lt;p>&lt;a href="https://medium.com/@zihansyu/centos-6-x-%E5%AE%89%E8%A3%9Ddocker-9e61354fd2ae" target="_blank" rel="noopener">https://medium.com/@zihansyu/centos-6-x-%E5%AE%89%E8%A3%9Ddocker-9e61354fd2ae&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/kinginblue/article/details/73527832" target="_blank" rel="noopener">https://blog.csdn.net/kinginblue/article/details/73527832&lt;/a>&lt;/p>
&lt;h2 id="1镜像相关">1.镜像相关&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 构建镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker build &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;上下文路径/URL/-&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选项: -f, --file=&amp;#34;&amp;#34; # 指定要使用的Dockerfile路径（默认为./Dockerfile）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --force-rm=false # 在构建过程中删除中间容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --no-cache=false # 始终使用缓存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --pull=false # 在构建过程中尝试去更新镜像的新版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --quiet=false # 安静模式，成功后只输出镜像ID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --rm=true # 在构建成功后删除临时容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -t, --tag=[] # 镜像名称（默认值：&amp;lt;上下文路径&amp;gt;的基本名称）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --ulimit=[] # Ulimit配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 拉取镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker pull &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>Docker Registry 地址&lt;span class="o">[&lt;/span>:端口号&lt;span class="o">]&lt;/span>/&lt;span class="o">]&lt;/span>仓库名&lt;span class="o">[&lt;/span>:标签&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker images &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>仓库名&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rmi &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;镜像1&amp;gt; &lt;span class="o">[&lt;/span>&amp;lt;镜像2&amp;gt; ...&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看镜像历史&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker &lt;span class="nb">history&lt;/span> &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;镜像名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看镜像详细信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker inspect &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;镜像名&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2容器相关">2.容器相关&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;镜像名&amp;gt; &lt;span class="o">[&lt;/span>命令&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#eg: docker run -d -p 8080:8080 --name tomcat tomcat:8.5.51&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#选项&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -d 后台运行容器，并返回容器ID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -i 以交互模式运行容器，通常与 -t 同时使用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -t 为容器重新分配一个伪输入终端，通常与 -i 同时使用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -P 随机端口映射&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -p 指定端口映射，格式为：主机(宿主)端口:容器端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --name 指定容器名字&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --link 连接到其它容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --rm 容器退出后自动删除容器文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --volumes-from 从其它容器或数据卷挂载一些配置或其它文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --volume 挂载宿主机目录或文件，格式为：主机目录:容器目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --privileged=true 给容器内的root用户赋予最高权限，容器内的root用户就拥有了真正的root权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --restart&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># no 容器退出时不重启&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># on-failure[:max-retries] 容器故障退出（返回值非零）时重启，最多重启max-retries次&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># always 容器退出时总是重启&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># unless-stopped 容器退出时总是重启，但是不考虑在Docker守护进程启动时就已经停止了的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --env-file 从指定文件读入环境变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># eg:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># docker run -d -p 8080:8080 --name tomcat tomcat:8.5.51 --env-file ./env.list&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker ps &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 启动容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 启动和创建容器的区别在于，启动容器是针对已经创建好的容器进行启动，而创建容器则是针对镜像进行的操作&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker start &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 停止容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stop &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看容器日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker logs &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看容器内进程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker top &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看容器详细信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker inspect &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 进入容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker &lt;span class="nb">exec&lt;/span> &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt; &lt;span class="o">[&lt;/span>命令&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 导出容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker &lt;span class="nb">export&lt;/span> &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 导入容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker import &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 重命名容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rename &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt; &amp;lt;新容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看容器使用的资源&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stats &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看容器端口映射&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker port &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 导出容器中的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker cp &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;:&amp;lt;容器内路径&amp;gt; &amp;lt;宿主机路径&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选项: -a, --archive=false # 归档模式(默认)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -L, --follow-link=false # 总是解析符号链接&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -d, --device=false # 复制字符和块设备&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -r, --recursive=false # 递归复制整个目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -p, --pause=true # 暂停容器中的所有进程&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="docker-检查与排错">docker 检查与排错&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker logs &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选项: -f, --follow=false # 跟踪日志输出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --since=&amp;#34;&amp;#34; # 显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --tail=&amp;#34;all&amp;#34; # 从日志末尾显示多少行日志， 默认是all&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -t, --timestamps=false # 显示时间戳&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --until=&amp;#34;&amp;#34; # 显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看容器占用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stats &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选项: --all=false # 显示所有容器（默认显示运行中的容器）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --format=&amp;#34;&amp;#34; # 使用Go模板显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --no-stream=false # 不显示实时流容器的统计信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --no-trunc=false # 不截断输出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 停止所有容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stop &lt;span class="k">$(&lt;/span>docker ps -a -q&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 移除所有容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm &lt;span class="k">$(&lt;/span>docker ps -a -q&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 移除所有镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker image rmi &lt;span class="k">$(&lt;/span>docker images -q&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 清空docker中所有的东西&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker system prune -a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 清空缓存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker system prune -f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 清空未使用的镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker image prune -a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 清空未使用的容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker container prune
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 清空未使用的卷&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker volume prune
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 清空未使用的网络&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker network prune
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 清空未使用的构建缓存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker builder prune
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 清空未使用的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker system prune -a --volumes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 清空所有未使用的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker system prune -a --volumes --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3容器日志">3.容器日志&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看容器日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker logs &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;容器名&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选项: -f, --follow=false # 跟踪日志输出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --since=&amp;#34;&amp;#34; # 显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --tail=&amp;#34;all&amp;#34; # 从日志末尾显示多少行日志， 默认是all&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -t, --timestamps=false # 显示时间戳&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --until=&amp;#34;&amp;#34; # 显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-submodule">docker submodule&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取子模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule update --init --recursive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-compose">docker-compose&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 启动命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose up &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>服务名&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选项&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -d 后台运行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --build 构建镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除容器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose rm &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>服务名&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose down &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>服务名&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker私服的相关命令">docker私服的相关命令&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 登录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker login
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 上传&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker push &amp;lt;镜像名&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/git/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/git/git/</guid><description>&lt;h1 id="git">git&lt;/h1>
&lt;h2 id="git-常用命令">git 常用命令&lt;/h2>
&lt;h3 id="git-基本配置">git 基本配置&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global user.name &lt;span class="s2">&amp;#34;your name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global user.email &lt;span class="s2">&amp;#34;your email&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="git-基本操作">git 基本操作&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git init &lt;span class="c1"># 初始化仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add . &lt;span class="c1"># 添加所有文件到暂存区&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s2">&amp;#34;commit message&amp;#34;&lt;/span> &lt;span class="c1"># 提交到本地仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add origin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -u origin master &lt;span class="c1"># 推送到远程仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git pull origin master &lt;span class="c1"># 拉取远程仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone &lt;span class="c1"># 克隆远程仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git status &lt;span class="c1"># 查看当前状态&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git log &lt;span class="c1"># 查看提交日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git diff &lt;span class="c1"># 查看修改内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch &lt;span class="c1"># 查看分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout -b branch_name &lt;span class="c1"># 创建并切换到新分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout branch_name &lt;span class="c1"># 切换分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git merge branch_name &lt;span class="c1"># 合并分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -d branch_name &lt;span class="c1"># 删除分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset --hard HEAD^ &lt;span class="c1"># 回退到上一个版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset --hard commit_id &lt;span class="c1"># 回退到指定版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reflog &lt;span class="c1"># 查看命令历史&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git rm file_name &lt;span class="c1"># 删除文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git stash &lt;span class="c1"># 暂存当前修改&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git stash list &lt;span class="c1"># 查看暂存列表&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git stash apply &lt;span class="c1"># 恢复暂存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git stash drop &lt;span class="c1"># 删除暂存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git stash pop &lt;span class="c1"># 恢复并删除暂存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote -v &lt;span class="c1"># 查看远程仓库地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote set-url origin new_url &lt;span class="c1"># 修改远程仓库地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin --delete branch_name &lt;span class="c1"># 删除远程分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin :branch_name &lt;span class="c1"># 删除远程分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag &lt;span class="c1"># 查看标签&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag tag_name &lt;span class="c1"># 创建标签&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag tag_name commit_id &lt;span class="c1"># 指定提交创建标签&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag -a tag_name -m &lt;span class="s2">&amp;#34;tag message&amp;#34;&lt;/span> &lt;span class="c1"># 创建带有说明的标签&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag -d tag_name &lt;span class="c1"># 删除标签&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin tag_name &lt;span class="c1"># 推送标签到远程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin --tags &lt;span class="c1"># 推送所有标签到远程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin :refs/tags/tag_name &lt;span class="c1"># 删除远程标签&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin --delete tag tag_name &lt;span class="c1"># 删除远程标签&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout -- file_name &lt;span class="c1"># 撤销工作区修改&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset HEAD file_name &lt;span class="c1"># 撤销暂存区修改&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset --hard HEAD^ &lt;span class="c1"># 撤销本地提交&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset --hard commit_id &lt;span class="c1"># 撤销本地提交&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global alias.st status &lt;span class="c1"># 设置别名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global alias.co checkout &lt;span class="c1"># 设置别名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global alias.ci commit &lt;span class="c1"># 设置别名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global alias.br branch &lt;span class="c1"># 设置别名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global alias.unstage &lt;span class="s1">&amp;#39;reset HEAD&amp;#39;&lt;/span> &lt;span class="c1"># 设置别名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global alias.last &lt;span class="s1">&amp;#39;log -1&amp;#39;&lt;/span> &lt;span class="c1"># 设置别名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global alias.lg &lt;span class="s2">&amp;#34;log --color --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit&amp;#34;&lt;/span> &lt;span class="c1"># 设置别名&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="git-子模块">git 子模块&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看子模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule add &lt;span class="c1"># 添加子模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加子模块并自定义子模块目录名称和分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule add &amp;lt;repository&amp;gt; &lt;span class="o">[&lt;/span>&amp;lt;path&amp;gt;&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule init &lt;span class="c1"># 初始化子模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule update &lt;span class="c1"># 更新子模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule foreach git pull &lt;span class="c1"># 更新所有子模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除子模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1. 删除.gitmodules中对应子模块的条目&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2. 删除.git/config中对应子模块的条目&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 3. 执行git rm --cached path/to/submodule&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 4. 执行rm -rf .git/modules/path/to/submodule&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 5. 执行rm -rf path/to/submodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/git/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/git/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>&lt;p>多个笔记之间存在关联, 可以先在mind-wings内笔记搜索, 再搜索百度.&lt;/p>
&lt;p>笔记格式为&lt;/p>
&lt;ul>
&lt;li>指令集&lt;/li>
&lt;li>名称解释&lt;/li>
&lt;li>学习步骤&lt;/li>
&lt;/ul>
&lt;p>其中指令集和名称解释是将学习步骤的内容做一个简要整理, 即备忘录. 目的是方便快速搜索.&lt;/p>
&lt;p>如果是初学者,直接跳过指令集和名词解释.&lt;/p>
&lt;h1 id="指令集">指令集&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git init # 初始化本地git仓库（创建新仓库）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global user.name &amp;#34;xxx&amp;#34; # 配置用户名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global user.email &amp;#34;xxx@xxx.com&amp;#34; # 配置邮件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global color.ui true # git status等命令自动着色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global color.status auto
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global color.diff auto
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global color.branch auto
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global color.interactive auto
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global --unset http.proxy # remove proxy configuration on git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone git+ssh://git@192.168.53.168/VT.git # clone远程仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git status # 查看当前版本状态（是否修改）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add xyz # 添加xyz文件至index
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add . # 增加当前子目录下所有更改过的文件至index
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &amp;#39;xxx&amp;#39; # 提交
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit --amend -m &amp;#39;xxx&amp;#39; # 合并上一次提交（用于反复修改）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -am &amp;#39;xxx&amp;#39; # 将add和commit合为一步
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git rm xxx # 删除index中的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git rm -r * # 递归删除
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git log # 显示提交日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git log -1 # 显示1行日志 -n为n行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git log -5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git log --stat # 显示提交日志及相关变动文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git log -p -m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show dfb02e6e4f2f7b573337763e5c0013802e392818 # 显示某个提交的详细内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show dfb02 # 可只用commitid的前几位
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show HEAD # 显示HEAD提交日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show HEAD^ # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag # 显示已存在的tag
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag -a v2.0 -m &amp;#39;xxx&amp;#39; # 增加v2.0的tag
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show v2.0 # 显示v2.0的日志及详细内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git log v2.0 # 显示v2.0的日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git diff # 显示所有未添加至index的变更
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git diff --cached # 显示所有已添加index但还未commit的变更
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git diff HEAD^ # 比较与上一个版本的差异
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git diff HEAD -- ./lib # 比较与HEAD版本lib目录的差异
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git diff origin/master..master # 比较远程分支master上有本地分支master上没有的
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git diff origin/master..master --stat # 只显示差异的文件，不显示具体内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch # 显示本地分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch --contains 50089 # 显示包含提交50089的分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -a # 显示所有分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -r # 显示所有原创分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch --merged # 显示所有已合并到当前分支的分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch --no-merged # 显示所有未合并到当前分支的分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -m master master_copy # 本地分支改名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout -b master_copy # 从当前分支创建新分支master_copy并检出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout -b master master_copy # 上面的完整版
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout features/performance # 检出已存在的features/performance分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout --track hotfixes/BJVEP933 # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout v2.0 # 检出版本v2.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout -b devel origin/develop # 从远程分支develop创建新本地分支devel并检出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout -- README # 检出head版本的README文件（可用于修改错误回退）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git merge origin/master # 合并远程master分支至当前分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git cherry-pick ff44785404a8e # 合并提交ff44785404a8e的修改
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin master # 将当前分支push到远程master分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin :hotfixes/BJVEP933 # 删除远程仓库的hotfixes/BJVEP933分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push --tags # 把所有tag推送到远程仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git fetch # 获取所有远程分支（不更新本地分支，另需merge）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git fetch --prune # 获取所有原创分支并清除服务器上已删掉的分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git pull origin master # 获取远程分支master并merge到当前分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git mv README README2 # 重命名文件README为README2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset --hard HEAD # 将当前版本重置为HEAD（通常用于merge失败回退）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git rebase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -d hotfixes/BJVEP933 # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -D hotfixes/BJVEP933 # 强制删除分支hotfixes/BJVEP933
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git ls-files # 列出git index包含的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show-branch # 图示当前分支历史
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show-branch --all # 图示所有分支历史
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git whatchanged # 显示提交历史对应的文件修改
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git ls-tree HEAD # 内部命令：显示某个git对象
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git rev-parse v2.0 # 内部命令：显示某个ref对于的SHA1 HASH
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reflog # 显示所有提交，包括孤立节点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show HEAD@{5}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show master@{yesterday} # 显示master分支昨天的状态
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git log --pretty=format:&amp;#39;%h %s&amp;#39; --graph # 图示提交日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show HEAD~3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git show -s --pretty=raw 2be7fcb476
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git stash # 暂存当前修改，将所有至为HEAD状态
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git stash list # 查看所有暂存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git stash show -p stash@{0} # 参考第一次暂存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git stash apply stash@{0} # 应用第一次暂存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git grep &amp;#34;delete from&amp;#34; # 文件中搜索文本“delete from”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git grep -e &amp;#39;#define&amp;#39; --and -e SORT_DIRENT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git gc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git fsck
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="名词解释">名词解释&lt;/h1>
&lt;p>repo&lt;/p>
&lt;h1 id="git概述">Git概述&lt;/h1>
&lt;h2 id="简要介绍">简要介绍&lt;/h2>
&lt;h2 id="安装与检查">安装与检查&lt;/h2>
&lt;p>安装命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt-get install git #Ubuntu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo yum install git #Centos
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查安装是否成功&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git --version #检查版本号
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置">配置&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git config --global user.name &amp;#34;username&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global user.email &amp;#34;xxx@example.com&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/ide/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%85%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/ide/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%85%A8/</guid><description>&lt;h1 id="工作学习流vscode快捷键">工作学习流(vscode快捷键)&lt;/h1>
&lt;h2 id="markdown-快捷键">markdown 快捷键&lt;/h2>
&lt;p>删除线: &lt;code>alt + s&lt;/code>&lt;/p>
&lt;p>待办事项勾选/取消勾选: &lt;code>alt + c&lt;/code>&lt;/p>
&lt;h2 id="terminal">terminal&lt;/h2>
&lt;p>命令行创建: &lt;code>Ctrl + Shift + ~&lt;/code>&lt;/p>
&lt;p>命令行切换: &lt;code>Ctrl + fn + upArrow/downArrow&lt;/code>&lt;/p>
&lt;h2 id="view">view&lt;/h2>
&lt;h2 id="run">Run&lt;/h2>
&lt;p>Run python file in terminal: &lt;code>Ctrl + F5&lt;/code>&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/k8s/k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/k8s/k8s/</guid><description>&lt;h1 id="k8s">k8s&lt;/h1>
&lt;p>&lt;strong>&lt;a href="https://kubernetes.io/zh-cn/docs/reference/kubectl/" target="_blank" rel="noopener">kubectl&lt;/a> 命令行工具&lt;/strong>&lt;/p>
&lt;p>kubectl [command] [TYPE] [NAME] [flags]&lt;/p>
&lt;p>- &lt;code>command&lt;/code>：指定要对一个或多个资源执行的操作，例如 &lt;code>create&lt;/code>、&lt;code>get&lt;/code>、&lt;code>describe&lt;/code>、&lt;code>delete&lt;/code>。&lt;/p>
&lt;p>- &lt;code>TYPE&lt;/code>：指定&lt;a href="https://kubernetes.io/zh-cn/docs/reference/kubectl/#resource-types" target="_blank" rel="noopener">资源类型&lt;/a>。资源类型不区分大小写， 可以指定单数、复数或缩写形式。&lt;/p>
&lt;p>- &lt;code>NAME&lt;/code>：指定资源的名称。名称区分大小写。 如果省略名称，则显示所有资源的详细信息。例如：&lt;/p>
&lt;p>命令大全&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">- kubectl get:列出资源,比如 pod、deployment、service 等
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl describe:显示资源的详细信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl create:创建资源,比如 pod、deployment、service 等
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl delete:删除资源
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl apply:对资源进行配置更改
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl rollout:管理资源的发布,比如 deployment 的发布
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl scale:扩缩 pod 副本数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl expose:暴露资源为 service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl logs:打印 pod 的日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl exec:在 pod 内执行命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl cp:在 pod 之间 copy 文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl port-forward:将 pod 的端口转发到本地
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl label:给资源加标签
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl annotate:给资源加注释
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl config:管理 kubeconfig 文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl cluster-info:显示集群信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl version:显示 CLI 版本和服务端版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl api-versions:显示所支持的 API 版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- kubectl api-resources:显示每个API group下的资源列表
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>常用命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl get 资源类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl get pod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl get pod -o wide
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl get deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl get deployment -o wide
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl get namespace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 指定查看某个命名空间下的pod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl get pod -n kube-system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 查看所有命名空间下的pod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl get pod -A -o wide
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl describe 资源类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl describe pod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl describe pod web-nginx-dep2-5f4fbd5bfb-jqw9z
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl describe pod -o wide
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl describe deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl describe deployment -o wide
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl describe namespace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 指定查看某个命名空间下的pod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl describe pod -n kube-system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 查看所有命名空间下的pod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl describe pod -A -o wide
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl logs 显示pod中的容器中运行过程中产生的日志信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl logs ngx-dep3-64cfcc9ddc-92x9s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl logs injoi-5c9b8f98bd-trm95 | grep &amp;#34;capturing the emotions&amp;#34; -A 100 -B 100 搜索并查看上下文
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl run bx --image=busybox
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl exec -it nginx-dep1-6dd5d75f8b-mgndd /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl exec -it pod对象 /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://kubernetes.io/zh-cn/docs/" target="_blank" rel="noopener">https://kubernetes.io/zh-cn/docs/&lt;/a>&lt;/p>
&lt;h1 id="container">container&lt;/h1>
&lt;h1 id="pod">pod&lt;/h1>
&lt;p>Pod 类似于共享名字空间并共享文件系统卷的一组容器。&lt;/p>
&lt;h1 id="deployment">deployment&lt;/h1>
&lt;h2 id="depploymentyaml">depployment.yaml&lt;/h2>
&lt;p>① &lt;code>apiVersion&lt;/code> 是当前配置格式的版本。&lt;br>
② &lt;code>kind&lt;/code> 是要创建的资源类型，这里是 &lt;code>Deployment&lt;/code>。&lt;br>
③ &lt;code>metadata&lt;/code> 是该资源的元数据，&lt;code>name&lt;/code> 是必需的元数据项。&lt;br>
④ &lt;code>spec&lt;/code> 部分是该 &lt;code>Deployment&lt;/code> 的规格说明。&lt;br>
⑤ &lt;code>replicas&lt;/code> 指明副本数量，默认为 1。&lt;br>
⑥ &lt;code>template&lt;/code> 定义 Pod 的模板，这是配置文件的重要部分。&lt;br>
⑦ &lt;code>metadata&lt;/code> 定义 Pod 的元数据，至少要定义一个 label。label 的 key 和 value 可以任意指定。&lt;br>
⑧ &lt;code>spec&lt;/code> 描述 Pod 的规格，此部分定义 Pod 中每一个容器的属性，&lt;code>name&lt;/code> 和 &lt;code>image&lt;/code> 是必需的。&lt;/p>
&lt;h1 id="secret">secret&lt;/h1>
&lt;p>Secret 是 Kubernetes 中的一种资源,用于存储敏感信息,比如密码、OAuth 令牌、SSH 密钥等。Secret 的数据是 base64 编码并存储在 etcd 中。Secret 有三种类型:1. Opaque:任意数据,用于存储密码、密钥等;base64 编码后存储。&lt;br>
2. &lt;a href="http://kubernetes.io/service-account-token:%E6%9C%8D%E5%8A%A1%E8%B4%A6%E5%8F%B7%E4%BB%A4%E7%89%8C,%E7%94%B1" target="_blank" rel="noopener">kubernetes.io/service-account-token:服务账号令牌,由&lt;/a> Kubernetes 自动创建和更新。&lt;br>
3. &lt;a href="http://kubernetes.io/dockercfg:Docker" target="_blank" rel="noopener">kubernetes.io/dockercfg:Docker&lt;/a> 配置文件,用来存储私有 Docker Registry 的认证信息。主要用途是:- 存储敏感数据,比如密码、密钥、认证信息等&lt;br>
- 在 Pod 中设置环境变量&lt;br>
- 用于拉取私有镜像仓库的镜像创建 Secret 有三种方式:1. 从文件中创建:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl create secret generic &amp;lt;secret-name&amp;gt; --from-file=path/to/file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2. 从字串中创建:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl create secret generic &amp;lt;secret-name&amp;gt; --from-literal=&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3. 编写 YAML 文件创建:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apiVersion: v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind: Secret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">metadata:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: mysecret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type: Opaque
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: YWRtaW4= # base64 编码后的密码或密钥
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password: MWYyZDFlMmU2N2Rm # base64 编码后的密码或密钥
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 Pod 中可以以三种方式使用 Secret:1. 设置环境变量的值 &lt;code>env&lt;/code>&lt;br>
2. 以 Volume 文件的形式挂载,然后在 Volume 中访问&lt;br>
3. 使用 kubectl 在本地执行工具中设置 Secret总的来说,Secret 用于在 Kubernetes 集群中存储敏感信息,有以下主要用途:- 存储密码、密钥、认证信息等敏感数据&lt;br>
- 用于在 Pod 中设置环境变量的值&lt;br>
- 用于在 Volume 中创建 config 文件&lt;br>
- 拉取私有 Docker Registry 的镜像&lt;/p>
&lt;h1 id="namespace">namespace&lt;/h1></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/k8s/minikube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/k8s/minikube/</guid><description>&lt;h1 id="minikube">minikube&lt;/h1>
&lt;p>使用&lt;/p>
&lt;p>进入pods的容器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl &lt;span class="nb">exec&lt;/span> -it &amp;lt;pod-name&amp;gt; -c &amp;lt;container-name&amp;gt; -- /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看对应容器的日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl logs -f &amp;lt;pod-name&amp;gt; -c &amp;lt;container-name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="错误和解决方案">错误和解决方案&lt;/h2>
&lt;h3 id="minikube-挂载-本地目录进minikube时作为mysql的数据目录但是mysql无法启动">minikube 挂载 本地目录进minikube时,作为mysql的数据目录,但是mysql无法启动&lt;/h3>
&lt;p>挂载方式:
在minikube正常启动后, 使用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">minikube mount &amp;lt;本地目录&amp;gt;:&amp;lt;minikube目录&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>进行挂载&lt;/p>
&lt;p>检查问题&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 进入pod 的 db容器内查看日志 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl logs -f &amp;lt;pod-name&amp;gt; -c &amp;lt;container-name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">find: File system loop detected&lt;span class="p">;&lt;/span> &lt;span class="s1">&amp;#39;/var/lib/mysql/test&amp;#39;&lt;/span> is part of the same file system loop as &lt;span class="s1">&amp;#39;/var/lib/mysql/&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>原因是挂载时发现循环&lt;/p>
&lt;p>解决方案:&lt;/p>
&lt;ol>
&lt;li>关闭并&lt;strong>删除&lt;/strong>minikube&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">minikube stop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">minikube delete
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>在minikube启动时就挂载&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">minikube start --mount --mount-string&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;本地目录&amp;gt;:&amp;lt;minikube目录&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>问题解决&lt;/p>
&lt;h3 id="minikube-中-设置ingress未转发的问题">minikube 中 设置ingress未转发的问题&lt;/h3>
&lt;p>参考&lt;a href="https://stackoverflow.com/questions/66275458/could-not-access-kubernetes-ingress-in-browser-on-windows-home-with-minikube" target="_blank" rel="noopener">Could not access Kubernetes Ingress in Browser on Windows Home with Minikube?&lt;/a>&lt;/p>
&lt;p>问题1：
当使用minikube时，设置ingress后，minikube ssh 内部可以通过ingress转发的服务端口访问。
但127.0.0.1 或 minikube ip 在主机上无法访问。&lt;/p>
&lt;p>解决方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-md" data-lang="md">&lt;span class="line">&lt;span class="cl">Set custom domain IP to 127.0.01 in %WINDIR%\System32\drivers\etc\hosts file, i.e. by adding line 127.0.0.1 my-k8s.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get ingress pod name: kubectl get pods -n ingress-nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start port forwarding: kubectl -n ingress-nginx port-forward pod/ingress-nginx-controller-5d88495688-dxxgw --address 0.0.0.0 80:80 443:443, where you should replace ingress-nginx-controller-5d88495688-dxxgw with your ingress pod name.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enjoy using ingress on custom domain in any browser (but only when port forwarding is active)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>问题2:
ingress中使用prefix的转发规则时,无法获取路径中的query&lt;/p>
&lt;p>解决方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">minimal-ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">nginx.ingress.kubernetes.io/use-regex&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 需要添加这个&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">nginx.ingress.kubernetes.io/rewrite-target&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/$2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">defaultBackend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-http-backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">fuzzs-scene-sim-test.localhost&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/FuzzsSceneSimTest(/|$)(.*)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 后缀加上(/|$)(.*) 用于获取query&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">pathType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ImplementationSpecific &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">service&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">fuzzs-scene-sim-test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8089&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/maven/maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/maven/maven/</guid><description>&lt;h1 id="maven">maven&lt;/h1>
&lt;h2 id="打包">打包&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">mvn clean package -Dmaven.test.skip&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常见问题">常见问题&lt;/h2>
&lt;h3 id="找不到主类">找不到主类&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">Error: Could not find or load main class com.xxx.xxx.xxx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Caused by: java.lang.ClassNotFoundException: com.xxx.xxx.xxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解决方法：在pom.xml中添加如下配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/nginx/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/nginx/nginx/</guid><description>&lt;h1 id="nginx">nginx&lt;/h1>
&lt;h2 id="nginx安装">nginx安装&lt;/h2>
&lt;h3 id="1-安装依赖">1. 安装依赖&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">yum install -y gcc gcc-c++ autoconf automake make
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yum install -y pcre pcre-devel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yum install -y zlib zlib-devel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yum install -y openssl openssl-devel
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-转发后端图片">2. 转发后端图片&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1. 创建目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p /data/nginx/cache
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2. 修改目录权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chown -R nginx:nginx /data/nginx/cache
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="nginx-命令">nginx 命令&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 启动&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 重启, 重新加载配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx -s reload
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 停止&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx -s stop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 测试配置文件是否正确&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx -t
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/npm/npm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/npm/npm/</guid><description>&lt;h1 id="npm">npm&lt;/h1>
&lt;h2 id="docker中的npm">docker中的npm&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置npm源&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npm config &lt;span class="nb">set&lt;/span> registry https://registry.npm.taobao.org
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/python/conda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/python/conda/</guid><description>&lt;h1 id="conda">conda&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">conda env list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">conda create -n py3 &lt;span class="nv">python&lt;/span>&lt;span class="o">=&lt;/span>3.6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 通过yml文件创建环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">conda env create -f environment.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 激活环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">conda activate py3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 退出环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">conda deactivate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">conda remove -n py3 --all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="迁移时可能会出现pip问题">迁移时可能会出现pip问题&lt;/h2>
&lt;p>可以在yml的pip:上面加上pip&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">py3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">channels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">defaults&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">dependencies&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">python=3.6&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">pip&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">pip&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">r requirements.txt&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/python/poetry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/python/poetry/</guid><description>&lt;h1 id="poetry">poetry&lt;/h1>
&lt;h2 id="poetry-出现的错误及解决方法">poetry 出现的错误及解决方法&lt;/h2>
&lt;h3 id="poetry-install-时failed-to-create-the-collection-prompt-dismissed">poetry install 时Failed to create the collection: Prompt dismissed&lt;/h3>
&lt;p>解决方案: 关闭keyring&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python3 -m keyring --disable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>原因:
&lt;a href="https://github.com/python-poetry/poetry/issues/1917" target="_blank" rel="noopener">https://github.com/python-poetry/poetry/issues/1917&lt;/a>&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/sql/mongodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/sql/mongodb/</guid><description>&lt;h1 id="mongodb">mongoDB&lt;/h1>
&lt;h2 id="常用命令">常用命令&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 连接&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mongosh ip&lt;span class="o">[&lt;/span>:port&lt;span class="o">]&lt;/span>/database -u username -p password
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看数据库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">show dbs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 切换数据库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">use database
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看集合&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">show collections
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看集合数据&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">db.&lt;span class="o">{&lt;/span>collection&lt;span class="o">}&lt;/span>.find&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 按条件查看集合数据&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## pid=1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">db.&lt;span class="o">{&lt;/span>collection&lt;span class="o">}&lt;/span>.find&lt;span class="o">({&lt;/span>pid:1&lt;span class="o">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 限制4条&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">db.&lt;span class="o">{&lt;/span>collection&lt;span class="o">}&lt;/span>.find&lt;span class="o">()&lt;/span>.limit&lt;span class="o">(&lt;/span>4&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 只显示其中一个字段&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">db.&lt;span class="o">{&lt;/span>collection&lt;span class="o">}&lt;/span>.find&lt;span class="o">({}&lt;/span>, &lt;span class="o">{&lt;/span>name:1&lt;span class="o">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 统计数量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">db.&lt;span class="o">{&lt;/span>collection&lt;span class="o">}&lt;/span>.find&lt;span class="o">()&lt;/span>.count&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 全部删除&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">db.&lt;span class="o">{&lt;/span>collection&lt;span class="o">}&lt;/span>.remove&lt;span class="o">({})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 插入或更新数据&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/sql/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/sql/mysql/</guid><description>&lt;h1 id="mysql">MySQL&lt;/h1>
&lt;h2 id="mysql常用命令">MySql常用命令&lt;/h2>
&lt;h5 id="修改用户">修改用户&lt;/h5>
&lt;p>修改密码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">alter user &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; identified with mysql_native_password by &amp;#39;123456&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改用户host&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">host&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;root
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="刷新权限">刷新权限&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">flush privileges;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="添加一个远程用户">添加一个远程用户&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">create user &amp;#39;remote&amp;#39;@&amp;#39;%&amp;#39; identified by &amp;#39;password&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GRANT all ON *.* TO &amp;#39;remote&amp;#39;@&amp;#39;%&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">grant all privileges on *.* to &amp;#39;remote&amp;#39;@&amp;#39;%&amp;#39; with grant option;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*.*所有数据库下的所有表
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="删除用户">删除用户&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">drop user &amp;#39;remote&amp;#39;@&amp;#39;%&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="创建数据库并设定中文编码">创建数据库并设定中文编码&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DATABASE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">db_name&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CHARACTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">utf8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COLLATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">utf8_general_ci&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="登录格式">登录格式&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">mysql -h #{数据库IP} -P 3306 -u #{用户名} -p -D #{数据库名}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="自增id-不连续时">自增id 不连续时&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SET @auto_id = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">UPDATE 表名 SET 自增字段名 = (@auto_id := @auto_id + 1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ALTER TABLE 表名 AUTO_INCREMENT = 1;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="文件">文件&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">source
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="数据库">数据库&lt;/h4>
&lt;p>设置数据库的字符集&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">alter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">database&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">数据库名&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">character&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">utf8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="表">表&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">添加一列&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">alter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">add&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">column&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">类型&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="数据">数据&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">插入数据&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">字段&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">字段&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">值&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">值&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">更新数据&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">字段&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">值&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">字段&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">值&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">删除数据&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">delete&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="时间处理">时间处理&lt;/h3>
&lt;p>Date&lt;/p>
&lt;h3 id="条件语句">条件语句&lt;/h3>
&lt;p>CASE&lt;/p>
&lt;p>强制转换&lt;/p>
&lt;p>CAST&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/sql/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/sql/redis/</guid><description>&lt;h1 id="redis">redis&lt;/h1>
&lt;p>flushall 清空&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/terminal/grep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/terminal/grep/</guid><description>&lt;h1 id="grep">grep&lt;/h1>
&lt;p>grep工具&lt;/p></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/terminal/%E5%91%BD%E4%BB%A4%E8%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/terminal/%E5%91%BD%E4%BB%A4%E8%A1%8C/</guid><description>&lt;h1 id="命令行">命令行&lt;/h1>
&lt;h2 id="cmd">cmd&lt;/h2>
&lt;p>后缀 &lt;code>.bat&lt;/code> 或 &lt;code>.cmd&lt;/code> 的批处理文件&lt;/p>
&lt;h2 id="powershell">powershell&lt;/h2>
&lt;p>后缀 &lt;code>.ps1&lt;/code> 的脚本文件&lt;/p>
&lt;h2 id="bash">bash&lt;/h2>
&lt;h2 id="zsh">zsh&lt;/h2>
&lt;h2 id="fish">fish&lt;/h2></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/terminal/%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/terminal/%E5%B7%A5%E5%85%B7/</guid><description>&lt;h1 id="命令行工具">命令行工具&lt;/h1>
&lt;h2 id="查看文件">查看文件&lt;/h2>
&lt;h3 id="cat">cat&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">cat 文件名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="heading">&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">more 文件名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="下载文件">下载文件&lt;/h2>
&lt;h3 id="wget">wget&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget -c -t &lt;span class="m">0&lt;/span> -T &lt;span class="m">60&lt;/span> -O 文件名 下载地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -c 断点续传&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -t 0 重试次数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -T 60 超时时间&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -O 文件名 保存文件名&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tree指令在windows下">tree指令在windows下&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/pyufftj/article/details/83102530" target="_blank" rel="noopener">https://blog.csdn.net/pyufftj/article/details/83102530&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/fragrant_no1/article/details/85986511" target="_blank" rel="noopener">https://blog.csdn.net/fragrant_no1/article/details/85986511&lt;/a>&lt;/p>
&lt;p>nohup&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">nohup python3 -u tcp_client.py &amp;gt; tcp.log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nuhup : 不挂起的意思
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python3 tcp_client.py : 使用python3环境运行 tcp_client.py文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u : 代表程序不启用缓存，也就是把输出直接放到log中，没这个参数的话，log文件的生成会有延迟
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; tcp.log : 把程序输出日志保存到tcp.log文件中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2&amp;gt;&amp;amp;1 : 换成2&amp;gt;&amp;amp;1，&amp;amp;与1结合就代表标准输出了，就变成错误重定向到标准输出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;amp; : 最后一个&amp;amp; ，代表该命令在后台执行
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">nohup python3 -u main.py &amp;gt; chatbot.log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nohup ./go-cqhttp &amp;gt; go-cq.log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="curl">curl&lt;/h1>
&lt;h1 id="curl-1">curl&lt;/h1></description></item><item><title/><link>https://ysyyhhh.github.io/docs/tool/vim/%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ysyyhhh.github.io/docs/tool/vim/%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/</guid><description>&lt;h1 id="vim的使用">vim的使用&lt;/h1>
&lt;h2 id="光标移动">光标移动&lt;/h2>
&lt;p>h: 左移一个字符
j: 下移一行
k: 上移一行
l: 右移一个字符&lt;/p>
&lt;p>w: 移动到下一个单词的开头
e: 移动到当前单词末尾
b: 移动到上一个单词的开头&lt;/p>
&lt;p>0: 移动到行首
$: 移动到行尾&lt;/p>
&lt;p>n + 上面的命令: 移动n次&lt;/p>
&lt;p>gg: 移动到文件开头
G: 移动到文件末尾&lt;/p>
&lt;p>上面所有命令构成了一个移动命令，可以和d命令组合使用，删除从当前光标到移动命令所指的位置的内容&lt;/p>
&lt;p>ctrl + f: 下翻一页
ctrl + b: 上翻一页
ctrl + G: 显示当前光标所在行的行号&lt;/p>
&lt;p>ctrl + i: 跳转到上次位置·
ctrl + o: 跳转到下次位置&lt;/p>
&lt;p>G + n: 移动到第n行&lt;/p>
&lt;h2 id="插入">插入&lt;/h2>
&lt;p>i: 在当前光标处插入
I: 在当前行首插入&lt;/p>
&lt;p>a: 在当前光标后插入
A: 在当前行尾插入&lt;/p>
&lt;p>o: 在当前行下方插入一行
O: 在当前行上方插入一行&lt;/p>
&lt;h2 id="删除">删除&lt;/h2>
&lt;p>x: 删除当前光标所在的字符
X: 删除当前光标所在的前一个字符&lt;/p>
&lt;p>dd: 删除当前行
D: 删除当前光标所在位置到行尾的内容&lt;/p>
&lt;p>d + 移动命令: 删除从当前光标到移动命令所指的位置的内容&lt;/p>
&lt;p>如:
dw: 删除当前光标所在的单词
db: 删除当前光标所在的单词
d$: 删除当前光标所在位置到行尾的内容
dnG: 删除当前光标所在行到第n行的内容
dG: 删除当前光标所在行到文件末尾的内容&lt;/p>
&lt;h2 id="剪切">剪切&lt;/h2>
&lt;p>上面删除的内容都会被保存到剪切板中&lt;/p>
&lt;h2 id="删除并进入插入模式">删除并进入插入模式&lt;/h2>
&lt;p>s: 删除当前光标所在的字符并进入插入模式
S: 删除当前行并进入插入模式&lt;/p>
&lt;p>c + 移动命令: 删除从当前光标到移动命令所指的位置的内容并进入插入模式&lt;/p>
&lt;p>如:
cw: 删除当前光标所在的单词并进入插入模式
c$: 删除当前光标所在位置到行尾的内容并进入插入模式
cnG: 删除当前光标所在行到第n行的内容并进入插入模式&lt;/p>
&lt;h2 id="复制">复制&lt;/h2>
&lt;p>y + 移动命令: 复制从当前光标到移动命令所指的位置的内容&lt;/p>
&lt;p>如:
yw: 复制当前光标所在的单词
yb: 复制当前光标所在的单词
y$: 复制当前光标所在位置到行尾的内容
ynG: 复制当前光标所在行到第n行的内容&lt;/p>
&lt;h2 id="粘贴">粘贴&lt;/h2>
&lt;p>所有删除的内容都会被保存到剪切板中，可以使用p命令将剪切板中的内容粘贴到当前光标所在位置
p: 将剪切板中的内容粘贴到当前光标所在位置的后面
P: 将剪切板中的内容粘贴到当前光标所在位置的前面&lt;/p>
&lt;h2 id="替换">替换&lt;/h2>
&lt;p>r + 字符: 将当前光标所在的字符替换为指定的字符&lt;/p>
&lt;p>R + 字符串: 将当前光标所在位置开始的字符串替换为指定的字符串&lt;/p>
&lt;h2 id="撤销">撤销&lt;/h2>
&lt;p>u: 撤销上一次操作
U: 撤销当前行的所有操作&lt;/p>
&lt;p>ctrl + r: 恢复上一次撤销的操作&lt;/p>
&lt;h2 id="重复">重复&lt;/h2>
&lt;p>. : 重复上一次操作&lt;/p>
&lt;h2 id="查找">查找&lt;/h2>
&lt;p>/ + 关键字: 从当前光标开始向下查找关键字
? + 关键字: 从当前光标开始向上查找关键字&lt;/p>
&lt;p>输完后按回车，会跳转到第一个匹配的位置.&lt;/p>
&lt;p>n: 跳转到下一个匹配的位置
N: 跳转到上一个匹配的位置&lt;/p>
&lt;h2 id="-进阶命令">: 进阶命令&lt;/h2>
&lt;p>:w 保存文件
:q 退出
:q! 强制退出，不保存
:wq 保存并退出
:wq! 强制保存并退出&lt;/p>
&lt;p>上面的命令 + 文件名: 保存文件到指定的文件名&lt;/p>
&lt;p>:help 命令名: 查看命令的帮助文档&lt;/p>
&lt;h3 id="替换-1">替换&lt;/h3>
&lt;p>:%s/old/new/g 将所有的old替换为new
:%s/old/new/gc 将所有的old替换为new，替换前询问是否替换&lt;/p>
&lt;p>:#,#s/old/new/g 将第#行到第#行的old替换为new&lt;/p>
&lt;h3 id="外部命令">外部命令&lt;/h3>
&lt;p>:! + 命令: 执行外部命令&lt;/p>
&lt;p>如:
:!ls 执行ls命令
:!dir 执行dir命令&lt;/p></description></item></channel></rss>