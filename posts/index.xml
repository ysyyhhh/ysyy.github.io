<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on ysyy&#39;s blog</title>
    <link>https://ysyyhhh.github.io/posts/</link>
    <description>Recent content in Posts on ysyy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 01 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ysyyhhh.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abstraction vs implementation</title>
      <link>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l3/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l3/</guid>
      <description>ISPC language SPMD: Single Program Multiple Data 一种花哨的方式来说，就是一种并行编程的范式，它的特点是：在编程时，我们只需要写一个程序，然后在运行时，这个程序会被复制多份，每</description>
    </item>
    <item>
      <title>asst1</title>
      <link>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/asst1-performance-analysis-on-a-quad-core-cpu/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/asst1-performance-analysis-on-a-quad-core-cpu/</guid>
      <description>参考 任务 Program 1: Parallel Fractal Generation Using Threads (20 points) 提示: 需要先看CMU15-418/CS149的L2再完成Pro1 任务描述: 用多线程画mandelbrot fractal. 代码中给</description>
    </item>
    <item>
      <title>asst2</title>
      <link>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/asst2/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/asst2/</guid>
      <description>C++ Sync thread的使用 #include &amp;lt;thread&amp;gt; #include &amp;lt;stdio.h&amp;gt; void my_func(int thread_id, int num_threads) { printf(&amp;#34;Hello from spawned thread %d of %d\n&amp;#34;, thread_id, num_threads); } int main(int argc, char** argv) { std::thread t0 = std::thread(my_func, 0, 2); std::thread t1 = std::thread(my_func, 1, 2); printf(&amp;#34;The main thread is running concurrently with spawned threads.\n&amp;#34;); t0.join(); t1.join(); printf(&amp;#34;Spawned threads have terminated at this point.\n&amp;#34;); return 0; }</description>
    </item>
    <item>
      <title>Docker命令</title>
      <link>https://ysyyhhh.github.io/posts/tool/docker/docker%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/docker/docker%E5%91%BD%E4%BB%A4/</guid>
      <description>安装docker sudo apt -y update sudo apt -y upgrade sudo apt -y full-upgrade # 安装依赖 sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release # 添加官方GPG密钥 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg #添加仓库 echo &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;#34; | sudo</description>
    </item>
    <item>
      <title>git</title>
      <link>https://ysyyhhh.github.io/posts/tool/git/git/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/git/git/</guid>
      <description>git 常用命令 git 基本配置 git config --global user.name &amp;#34;your name&amp;#34; git config --global user.email &amp;#34;your email&amp;#34; git 基本操作 git init # 初始化仓库 git add . # 添加所有文件到暂存区 git commit -m &amp;#34;commit message&amp;#34; # 提交到本地仓库 git remote add origin git push -u origin</description>
    </item>
    <item>
      <title>k8s</title>
      <link>https://ysyyhhh.github.io/posts/tool/k8s/k8s/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/k8s/k8s/</guid>
      <description>kubectl 命令行工具 kubectl [command] [TYPE] [NAME] [flags] - command：指定要对一个或多个资源执行的操作，例如 create、get、describe、delete。 - TYP</description>
    </item>
    <item>
      <title>L2</title>
      <link>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l2/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l2/</guid>
      <description>并行程序 void sinx(int N, int terms, float* x, float* result) { for (int i = 0; i &amp;lt; N; i++) { float value = x[i]; float number = x[i] * x[i] * x[i]; int sign = -1; int denom = 6; for (int j = 0; j &amp;lt; terms; j++) { value += sign * number / denom; sign *= -1; denom *= (2*j+3)*(2*j+2); number *= x[i]</description>
    </item>
    <item>
      <title>L4 Parallel Programing basics</title>
      <link>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l4/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l4/</guid>
      <description>主要用三种方式实现并行程序(没有进行真正的优化) 例子 n-body simulation 创建并行程序的过程 1. Decomposition 主要思想: 创造至少足够的任务让所有的处理单元都有事情做 Amdahl&amp;rsquo;s Law: 串行</description>
    </item>
    <item>
      <title>L5 Work distribution and scheduling</title>
      <link>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l5/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l5/</guid>
      <description>三种分配策略的总结 静态分配 优点: 几乎没有运行时的开销(关于分配) 缺点: 不总是均匀的分配任务 什么时候使用: (最简单的例子) 当知道每个任务的工作</description>
    </item>
    <item>
      <title>L6</title>
      <link>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l6/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l6/</guid>
      <description>虚拟文件系统 /proc/cpuinfo model name cpu MHz - 频率 cache size - 缓存大小 siblings - 逻辑cpu数量 processor - 逻辑cpu编号 cpu cores - 物理cpu数量 core id - 物理cpu编号 这样查看的cpu数量很</description>
    </item>
    <item>
      <title>L7</title>
      <link>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l7/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l7/</guid>
      <description>GPU 图形渲染 图像中的每个对象都有很自然的并行性。</description>
    </item>
    <item>
      <title>Modern C&#43;&#43;</title>
      <link>https://ysyyhhh.github.io/posts/language/c&#43;&#43;/modern-c&#43;&#43;/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/language/c&#43;&#43;/modern-c&#43;&#43;/</guid>
      <description>lambda表达式 描述: 一个匿名函数对象 一个可调用的代码单元 一个函数对象的语法糖 语法规则: {}; []: lambda表达式的引导符 (): 参数列表 {}: 函数体 具</description>
    </item>
    <item>
      <title>mongoDB</title>
      <link>https://ysyyhhh.github.io/posts/tool/sql/mongodb/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/sql/mongodb/</guid>
      <description>常用命令 # 连接 mongosh ip[:port]/database -u username -p password # 查看数据库 show dbs # 切换数据库 use database # 查看集合 show collections # file # 查看集合数据 db.{collection}.find() # 按条件查看集合数据 ## pid=1 db.{collection}.find({pid:1}) ## 限制4条 db.{collection}.find().limit(4) ## 只显示其</description>
    </item>
    <item>
      <title>MySQL</title>
      <link>https://ysyyhhh.github.io/posts/tool/sql/mysql/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/sql/mysql/</guid>
      <description>MySql常用命令 修改用户 修改密码 alter user &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; identified with mysql_native_password by &amp;#39;123456&amp;#39;; 修改用户host update mysql.user set host = &amp;#39;%&amp;#39; where user = &amp;#39;root 刷新权限 flush privileges; 添加一个远程用户 create user &amp;#39;remote&amp;#39;@&amp;#39;%&amp;#39; identified by &amp;#39;password&amp;#39; GRANT all ON *.* TO &amp;#39;remote&amp;#39;@&amp;#39;%&amp;#39;; grant</description>
    </item>
    <item>
      <title>nginx</title>
      <link>https://ysyyhhh.github.io/posts/tool/nginx/nginx/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/nginx/nginx/</guid>
      <description>nginx安装 1. 安装依赖 yum install -y gcc gcc-c++ autoconf automake make yum install -y pcre pcre-devel yum install -y zlib zlib-devel yum install -y openssl openssl-devel 2. 转发后端图片 # 1. 创建目录 mkdir -p /data/nginx/cache # 2. 修改目录权限 chown -R nginx:nginx /data/nginx/cache nginx 命令 # 启动 nginx</description>
    </item>
    <item>
      <title>NoRBERT：使用迁移学习改进需求分类任务</title>
      <link>https://ysyyhhh.github.io/posts/paper/llm/nobert/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/paper/llm/nobert/</guid>
      <description>NoRBERT: Transfer Learning for Requirements Classification Tobias Hey， Jan Keim， Anne Koziolek， Walter F. Tichy Karlsruhe Institute of Technology (KIT) 引用 T. Hey, J. Keim, A. Koziolek and W. F. Tichy, &amp;ldquo;NoRBERT: Transfer Learning for Requirements Classification,&amp;rdquo; 2020 IEEE 28th International Requirements Engineering Conference (RE), Zurich, Switzerland, 2020, pp. 169-179, doi: 10.1109/RE48521.2020.00028. 论文</description>
    </item>
    <item>
      <title>P0 [C&#43;&#43; Primer](https://15445.courses.cs.cmu.edu/fall2022/project0/)</title>
      <link>https://ysyyhhh.github.io/posts/public-course/cmu-15445/cmu15-445/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/public-course/cmu-15445/cmu15-445/</guid>
      <description>L1 Relational Model &amp;amp; Relational Algebra 1.1 Databases 数据库：an organized collection of inter-related data that models some aspect of the real-world 数据库管理系统 DBMS：the software that manages a database 1.2 Flat File Strawman 数据库常常以CSV(comma-sepa</description>
    </item>
    <item>
      <title>redis</title>
      <link>https://ysyyhhh.github.io/posts/tool/sql/redis/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/sql/redis/</guid>
      <description>flushall 清空</description>
    </item>
    <item>
      <title>Why parallelism? Why efficiency?</title>
      <link>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l1-%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%92%8C%E9%AB%98%E6%95%88/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/public-course/cmu-15418cs-618/l1-%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%92%8C%E9%AB%98%E6%95%88/</guid>
      <description>Parallelism 加速比 Speed up 是指： 程序在单处理器上运行的时间 / 程序在多处理器上运行的时间 我们一般会期望用两倍的硬件得到两倍的速度提升,但是实际上并不是这样的</description>
    </item>
    <item>
      <title>笔试算法题</title>
      <link>https://ysyyhhh.github.io/posts/knowledge/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/knowledge/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</guid>
      <description>1.已知平面上的一个圆和若干点 快速求出包含点数最少的多边形使得圆在多边形中 预处理：圆内的点删去 点排序，按照射线的角度排序。O(nlogn) 如</description>
    </item>
    <item>
      <title>部署手册</title>
      <link>https://ysyyhhh.github.io/posts/guide/%E9%83%A8%E7%BD%B2/%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/guide/%E9%83%A8%E7%BD%B2/%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</guid>
      <description>docker 镜像上传到私有仓库 docker login -u username -p password registry.cn-hangzhou.aliyuncs.com docker tag image registry.cn-hangzhou.aliyuncs.com/username/image:tag docker push registry.cn-hangzhou.aliyuncs.com/username/image:tag Server SpringBoot application.yml 必须使用环境变量来进行配置。 spring: datasource: url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:test}?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false&amp;amp;serverTimezone=Asia/Shanghai username: ${MYSQL_USER:test} password: ${MYSQL_PASSWORD:123456}</description>
    </item>
    <item>
      <title>大语言模型原理</title>
      <link>https://ysyyhhh.github.io/posts/knowledge/llm/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/knowledge/llm/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86/</guid>
      <description>语言模型的基础技术 transformer 大语言模型 GPT BERT BERT vs GPT</description>
    </item>
    <item>
      <title>服务器</title>
      <link>https://ysyyhhh.github.io/posts/tips/server/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tips/server/</guid>
      <description>scp传输文件 # 本地到远程 scp -r /home/username/data username@ip:/home/username/data</description>
    </item>
    <item>
      <title>工具</title>
      <link>https://ysyyhhh.github.io/posts/tool/terminal/%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/terminal/%E5%B7%A5%E5%85%B7/</guid>
      <description>下载文件 wget wget -c -t 0 -T 60 -O 文件名 下载地址 # -c 断点续传 # -t 0 重试次数 # -T 60 超时时间 # -O 文件名 保存文件名 tree指令在windows下 https://blog.csdn.net/pyufftj/article/details/83102530 https://blog.csdn.net/fragrant_no1/article/details/85986511 nohup nohup python3 -u</description>
    </item>
    <item>
      <title>命令行</title>
      <link>https://ysyyhhh.github.io/posts/tool/terminal/%E5%91%BD%E4%BB%A4%E8%A1%8C/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/terminal/%E5%91%BD%E4%BB%A4%E8%A1%8C/</guid>
      <description>cmd 后缀 .bat 或 .cmd 的批处理文件 powershell 后缀 .ps1 的脚本文件 bash zsh fish</description>
    </item>
    <item>
      <title>写在前面</title>
      <link>https://ysyyhhh.github.io/posts/knowledge/%E7%AE%97%E6%B3%95/acmer%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/knowledge/%E7%AE%97%E6%B3%95/acmer%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/</guid>
      <description>笔试上机题型基本是经典算法题，且难度最多leetcode hard。但面试的题目类型很多，如场景题、NP问题等没有最优解的问题。 以下对求职面试</description>
    </item>
    <item>
      <title>Linux</title>
      <link>https://ysyyhhh.github.io/posts/tips/linux/</link>
      <pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tips/linux/</guid>
      <description>系统资源相关 # 查看内存 free -h # 查看cpu cat /proc/cpuinfo # 查看cpu使用情况 top # 查看GPU使用情况 nvidia-smi # 查看磁盘 df -h # 查看系统版本 cat /etc/os-release # 查看系统信息 uname -a # 列</description>
    </item>
    <item>
      <title>docker 相关的部署规范</title>
      <link>https://ysyyhhh.github.io/posts/guide/%E9%83%A8%E7%BD%B2/docker%E7%9B%B8%E5%85%B3%E7%9A%84%E9%83%A8%E7%BD%B2%E8%A7%84%E8%8C%83/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/guide/%E9%83%A8%E7%BD%B2/docker%E7%9B%B8%E5%85%B3%E7%9A%84%E9%83%A8%E7%BD%B2%E8%A7%84%E8%8C%83/</guid>
      <description>1.命名规范 1.1.镜像命名规范 镜像命名规范：&amp;lt;小组名&amp;gt;/&amp;lt;项目名&amp;gt;/&amp;lt;镜像名&amp;gt;:&amp;lt;版本号&amp;gt;</description>
    </item>
    <item>
      <title>windows 下的子系统</title>
      <link>https://ysyyhhh.github.io/posts/tips/windows%E4%B8%8B%E7%9A%84%E5%AD%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tips/windows%E4%B8%8B%E7%9A%84%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>wsl pass 适用于Android的Windows子系统</description>
    </item>
    <item>
      <title>docker Usage</title>
      <link>https://ysyyhhh.github.io/posts/tool/docker/docker/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/docker/docker/</guid>
      <description>多阶段构建docker镜像 多阶段构建的修改不会保留到下一阶段，只有COPY和ADD命令会保留到下一阶段 usages： 第一阶段：编译/打包程序</description>
    </item>
    <item>
      <title>npm</title>
      <link>https://ysyyhhh.github.io/posts/tool/npm/npm/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/npm/npm/</guid>
      <description>docker中的npm # 设置npm源 npm config set registry https://registry.npm.taobao.org</description>
    </item>
    <item>
      <title>openai 相关QA</title>
      <link>https://ysyyhhh.github.io/posts/qa/openai/</link>
      <pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/qa/openai/</guid>
      <description>无法连接 Q: openai.error.APIConnectionError: Error communicating with OpenAI: HTTPSConnectionPool(host=&amp;#39;api.openai.com&amp;#39;, port=443): Max retries exceeded with url: /v1/chat/completions (Caused by ProxyError(&amp;#39;Unable to connect to proxy&amp;#39;, SSLError(SSLZeroReturnError(6, &amp;#39;TLS/SSL connection has been closed (EOF) (_ssl.c:1131)&amp;#39;)))) A: 问题出在模块 urllib3 的版本，报错的是 1.26.3，没报错的是 1.25.11 在原报错环境中使</description>
    </item>
    <item>
      <title>多线程</title>
      <link>https://ysyyhhh.github.io/posts/language/c&#43;&#43;/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/language/c&#43;&#43;/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>锁 unique_lock 和 lock_guard unique_lock 和 lock_guard 都是 RAII 的封装，都是用来管理 mutex 的，但是 unique_lock 比 lock_guard 更加灵活，可以随时 unlock 和 lock，而 lock_guard 只能在构造的时候 lock，在析构的时候 unloc</description>
    </item>
    <item>
      <title>工作学习流(vscode快捷键)</title>
      <link>https://ysyyhhh.github.io/posts/tool/ide/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%85%A8/</link>
      <pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/ide/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%85%A8/</guid>
      <description>markdown 快捷键 删除线: alt + s 待办事项勾选/取消勾选: alt + c terminal 命令行创建: Ctrl + Shift + ~ 命令行切换: Ctrl + fn + upArrow/downArrow view Run Run python file in terminal: Ctrl + F5</description>
    </item>
    <item>
      <title>maven</title>
      <link>https://ysyyhhh.github.io/posts/tool/maven/maven/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/maven/maven/</guid>
      <description>打包 mvn clean package -Dmaven.test.skip=true 常见问题 找不到主类 Error: Could not find or load main class com.xxx.xxx.xxx Caused by: java.lang.ClassNotFoundException: com.xxx.xxx.xxx 解决方法：在pom.xml中添加如下配置</description>
    </item>
    <item>
      <title>I/O模型</title>
      <link>https://ysyyhhh.github.io/posts/knowledge/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B/io%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/knowledge/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B/io%E6%A8%A1%E5%9E%8B/</guid>
      <description>一、什么是I/O模型 及 I/O模型的分类 二、I/O 多路复用 三、实际应用 Reactor模式 Proactor模式 事件驱动模式</description>
    </item>
    <item>
      <title>conda</title>
      <link>https://ysyyhhh.github.io/posts/tool/python/conda/</link>
      <pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/python/conda/</guid>
      <description># 查看环境 conda env list # 创建环境 conda create -n py3 python=3.6 # 通过yml文件创建环境 conda env create -f environment.yml # 激活环境 conda activate py3 # 退出环境 conda deactivate # 删除环境 conda remove -n py3 --all 迁移时可能会出现pi</description>
    </item>
    <item>
      <title>docker相关技巧</title>
      <link>https://ysyyhhh.github.io/posts/tips/docker/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tips/docker/</guid>
      <description>记把深度学习项目装入docker 安装时出现选项 # RUN apt-get install libglib2.0-dev -y # 由于安装libglib2.0-dev的时候，bash会有交互操作叫你选择对应的时</description>
    </item>
    <item>
      <title>poetry</title>
      <link>https://ysyyhhh.github.io/posts/tool/python/poetry/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/python/poetry/</guid>
      <description>poetry 出现的错误及解决方法 poetry install 时Failed to create the collection: Prompt dismissed 解决方案: 关闭keyring python3 -m keyring --disable 原因: https://github.com/python-poetry/poetry/issues/1917</description>
    </item>
    <item>
      <title>minikube</title>
      <link>https://ysyyhhh.github.io/posts/tool/k8s/minikube/</link>
      <pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/k8s/minikube/</guid>
      <description>使用 进入pods的容器 kubectl exec -it &amp;lt;pod-name&amp;gt; -c &amp;lt;container-name&amp;gt; -- /bin/bash # 查看对应容器的日志 kubectl logs -f &amp;lt;pod-name&amp;gt; -c &amp;lt;container-name&amp;gt; 错误和解决方案 minikube 挂载 本地目录进minikube时,作为mysql的数据</description>
    </item>
    <item>
      <title>利于部署的开发规范手册</title>
      <link>https://ysyyhhh.github.io/posts/guide/%E9%83%A8%E7%BD%B2/%E5%88%A9%E4%BA%8E%E9%83%A8%E7%BD%B2%E7%9A%84%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</link>
      <pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/guide/%E9%83%A8%E7%BD%B2/%E5%88%A9%E4%BA%8E%E9%83%A8%E7%BD%B2%E7%9A%84%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</guid>
      <description>本规范用于在开发过程中，使得项目能够更好的部署，更好的维护。 使用时间: 当项目开始开发时，就应该遵守本规范。 核心要点: 管理依赖库 使用docke</description>
    </item>
    <item>
      <title>grep</title>
      <link>https://ysyyhhh.github.io/posts/tool/terminal/grep/</link>
      <pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/terminal/grep/</guid>
      <description>grep工具</description>
    </item>
    <item>
      <title>vim的使用</title>
      <link>https://ysyyhhh.github.io/posts/tool/vim/%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/</link>
      <pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/vim/%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/</guid>
      <description>光标移动 h: 左移一个字符 j: 下移一行 k: 上移一行 l: 右移一个字符 w: 移动到下一个单词的开头 e: 移动到当前单词末尾 b: 移动到上一个单词的开头 0: 移动到行首 $: 移</description>
    </item>
    <item>
      <title>用Hugo &#43; Github Pages/Action &#43; py &#43; 任务计划程序 搭建 全自动化markdown笔记转博客</title>
      <link>https://ysyyhhh.github.io/posts/guide/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/guide/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>TL;DR 背景: 已使用nextcloud和typora写笔记 需求: 将笔记转换为博客.(且因为本人太懒,😂 所以需要全自动化) 在nextcloud中, 专</description>
    </item>
    <item>
      <title>开发流程</title>
      <link>https://ysyyhhh.github.io/posts/guide/%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/guide/%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</guid>
      <description>测试环境 自动化部署 一键转移到生成环境 部署 项目代码 测试代码 编码风格测试&amp;amp;修正 功能测试 Dockerfile docker-compose 测试脚本 部署脚本 前端代码结构 优点 接口可以根据环</description>
    </item>
    <item>
      <title>代码风格</title>
      <link>https://ysyyhhh.github.io/posts/language/spring/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/language/spring/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</guid>
      <description>1.分层领域模型规约： • DO（ Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。 • DTO（ Data Transfer Object）：数据传</description>
    </item>
    <item>
      <title>服务端</title>
      <link>https://ysyyhhh.github.io/posts/language/spring/%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/language/spring/%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid>
      <description>jar包启动 nohup java -jar -Xms128M -Xmx128M -XX:PermSize=128M -XX:MaxPermSize=128M jar包名.jar nacos启动 sh /home/tmp/nacos/bin/startup.sh -m standalone 服务器启动 cd /home/mind_wings nohup java -jar -Xms128M -Xmx128M -XX:PermSize=128M -XX:MaxPermSize=128M service-user-1.0-SNAPSHOT.jar &amp;amp; nohup java -jar -Xms128M -Xmx128M -XX:PermSize=128M -XX:MaxPermSize=128M service-timetable-1.0-SNAPSHOT.jar &amp;amp; nohup java -jar -Xms128M -Xmx128M -XX:PermSize=128M -XX:MaxPermSize=128M -noverify api-gateway-1.0-SNAPSHOT.jar &amp;amp; 出现</description>
    </item>
    <item>
      <title>杂</title>
      <link>https://ysyyhhh.github.io/posts/qa/%E6%9D%82/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/qa/%E6%9D%82/</guid>
      <description>session权限问题 https://blog.51cto.com/u_15162069/2778036 RSA前后端解密出错 14：07 JSEncrypt支持的是openssl生成的pkcs1格式私钥，java需要pkcs</description>
    </item>
    <item>
      <title>spring常用代码</title>
      <link>https://ysyyhhh.github.io/posts/language/spring/spring%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/language/spring/spring%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</guid>
      <description>https://www.jianshu.com/p/38d247f02724 安全 https://blog.csdn.net/qq_37023928/article/details/116777630 解决前后端分离的跨域问题 https://www.yisu.com/zixun/606000.html 创建Test类注解 @RunWith(SpringJUnit4ClassRunner.class) @SpringBootTest 依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-test&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 开启services Views -&amp;gt; Tool Windows -&amp;gt; Services Spring容器中找不到Serv</description>
    </item>
    <item>
      <title>pipline&amp;action</title>
      <link>https://ysyyhhh.github.io/posts/tips/piplineaction/</link>
      <pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tips/piplineaction/</guid>
      <description>github action
gitlab pipline</description>
    </item>
    <item>
      <title>指令集</title>
      <link>https://ysyyhhh.github.io/posts/tool/git/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/tool/git/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>多个笔记之间存在关联, 可以先在mind-wings内笔记搜索, 再搜索百度. 笔记格式为 指令集 名称解释 学习步骤 其中指令集和名称解释是将学习步骤的</description>
    </item>
    <item>
      <title>程序分析</title>
      <link>https://ysyyhhh.github.io/posts/knowledge/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/knowledge/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/</guid>
      <description>程序优化侧重于提高程序的性能，通过对程序中关键函数的跟踪或者运行时信息的统计，找到系统性能的瓶颈，从而采取进一步行动对程序进行优化，同时减少</description>
    </item>
    <item>
      <title>code相关知识</title>
      <link>https://ysyyhhh.github.io/posts/language/spring/code%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/language/spring/code%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</guid>
      <description>service 做校验，如果非法，直接抛异常 + 全局异常处理 controller 正常就是组合 service ，返回前端需要的数据。 java异常效率低下是因为抛出异常会遍历所有涉及堆栈，具体</description>
    </item>
    <item>
      <title>微服务</title>
      <link>https://ysyyhhh.github.io/posts/language/spring/spring-cloud-alibaba/</link>
      <pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://ysyyhhh.github.io/posts/language/spring/spring-cloud-alibaba/</guid>
      <description>各个springboot Nacos注册中心 核心功能 服务注册： 服务心跳： 服务同步： 服务发现：拿到微服务地址 服务调用： 服务健康检查： Ribbon 负载均衡 feign</description>
    </item>
  </channel>
</rss>
